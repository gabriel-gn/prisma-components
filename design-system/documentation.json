{
    "pipes": [],
    "interfaces": [
        {
            "name": "ComboItem",
            "id": "interface-ComboItem-4559a9e381398bce2d9780a95355daee",
            "file": "projects/components/src/lib/combo-box/combo-box.component.ts",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nexport interface ComboItem {\n  label: string;\n  value: any;\n}\n\n@Component({\n  selector: 'pm-combo-box',\n  templateUrl: './combo-box.component.html',\n  styleUrls: ['./combo-box.component.scss']\n})\nexport class ComboBoxComponent implements OnInit {\n\n  @Input() items: ComboItem[] = [];\n  @Input() selectedItem: any;\n  @Input() disabled = false;\n  @Output() selectionChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.ref.detectChanges();\n  }\n\n  private selectionChanged(event: any): void {\n    this.selectionChange.emit(event.value);\n    this.ref.detectChanges();\n  }\n\n  public setSelected(item: any): void {\n    this.selectedItem = item;\n    this.selectionChange.emit(item);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GridListItem",
            "id": "interface-GridListItem-796e93fd8c33fa425fdeebddb952d7ac",
            "file": "projects/components/src/lib/grid-list/grid-list.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Input, TemplateRef, ViewChild} from '@angular/core';\nimport {MainColors} from '../../models/colors';\n\nexport interface GridListItem {\n  title: string;\n  subtitle?: string;\n  context?: any;\n  iconClass?: string;\n  iconColor?: MainColors | string;\n  iconOutline?: boolean;\n  thumbnailPicture?: string;\n  bodyPicture: string;\n  iconCallback?: void;\n  titleCallback?: void;\n  subtitleCallback?: void;\n  bodyCallback?: void;\n}\n\n@Component({\n  selector: 'pm-grid-list',\n  templateUrl: './grid-list.component.html',\n  styleUrls: ['./grid-list.component.scss']\n})\nexport class GridListComponent {\n\n  @ViewChild('gridTemplate', {static: true}) gridTemplateRef: TemplateRef<any>;\n  @ViewChild('listTemplate', {static: true}) listTemplateRef: TemplateRef<any>;\n  @ViewChild('galleryTemplate', {static: true}) galleryTemplateRef: TemplateRef<any>;\n  @Input() displayStyle: 'list' | 'grid' | 'gallery' = 'grid';\n  @Input() overflowGallery = true;\n  @Input() items: GridListItem[];\n  @Input() gridHeaderReverse = false;\n  @Input() bodyBackgroundColor;\n  @Input() actionTemplate: TemplateRef<any>;\n\n  constructor() { }\n\n  public getTemplate(): TemplateRef<any> {\n    switch (this.displayStyle) {\n      case 'grid':\n        return this.gridTemplateRef;\n      case 'gallery':\n        return this.galleryTemplateRef;\n      case 'list':\n        return this.listTemplateRef;\n      default:\n        return this.gridTemplateRef;\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "bodyCallback",
                    "type": "void",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "bodyPicture",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "context",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "iconCallback",
                    "type": "void",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "iconClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "iconColor",
                    "type": "MainColors | string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "iconOutline",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subtitleCallback",
                    "type": "void",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "thumbnailPicture",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "titleCallback",
                    "type": "void",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ComponentsService",
            "id": "injectable-ComponentsService-b7227a2afcbe83ba2f5742aac484e6d1",
            "file": "projects/components/src/lib/components.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentsService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c1d58fe813f03b0aad2b098042ac73d7",
            "file": "projects/components/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "busy",
                    "defaultValue": "false",
                    "description": "<p>Exibe botão de &quot;carregamento&quot; e desabilita o botão.\nPara alterar o texto, utilizar a propriedade <code>busyText</code></p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "busyText",
                    "description": "<p>Texto exibido junto ao botão de &quot;carregando&quot; quando a propriedade <code>busy</code> está como <code>true</code></p>\n",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "description": "<p>Propriedade de habilitado ou desabilitado</p>\n",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "iconClass",
                    "description": "<p>Ícone que será exibido no botão junto ao texto. Ex: <code>uil uil-md uil-tabs</code></p>\n",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 10,
                    "type": "string | null"
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "description": "<p>Se o botão será cheio ou apenas contornado pela borda</p>\n",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "defaultValue": "`${MainColors.default}`",
                    "description": "<p>Cor do botão que será exibido.\nUtilizar as propriedades do tipo &quot;MainColors&quot;</p>\n",
                    "line": 15,
                    "type": "MainColors | string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {MainColors} from '../../models/colors';\n\n@Component({\n  selector: 'pm-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n  @Input('label') label: string | null = '';  // Usada só pra aparecer no storybook\n  /**\n   * Cor do botão que será exibido.\n   * Utilizar as propriedades do tipo \"MainColors\"\n   */\n  @Input('type') type: MainColors | string = `${MainColors.default}`;\n  /**\n   * Exibe botão de \"carregamento\" e desabilita o botão.\n   * Para alterar o texto, utilizar a propriedade `busyText`\n   */\n  @Input('busy') busy: boolean = false;\n  /**\n   * Texto exibido junto ao botão de \"carregando\" quando a propriedade `busy` está como `true`\n   */\n  @Input('busyText') busyText: string;\n  /**\n   * Ícone que será exibido no botão junto ao texto. Ex: `uil uil-md uil-tabs`\n   */\n  @Input('iconClass') iconClass: string;\n  /**\n   * Se o botão será cheio ou apenas contornado pela borda\n   */\n  @Input('outline') outline: boolean = false;\n  /**\n   * Propriedade de habilitado ou desabilitado\n   */\n  @Input('disabled') disabled: boolean = false;\n\n  constructor() { }\n\n  public getClassName(): string {\n    let name = 'btn';\n    if (this.type) {\n      if (this.outline) {\n        name += ` btn-outline-${this.type}`;\n      } else {\n        name += ` btn-${this.type}`;\n      }\n    }\n    return name;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-button {\n  button {\n    &:disabled {\n      cursor: not-allowed;\n      pointer-events: none;\n    }\n  }\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 36
            },
            "templateData": "<div class=\"pm-button\">\n  <button [className]=\"getClassName()\" [disabled]=\"busy || disabled\">\n    <ng-container *ngIf=\"busy; else buttonContent\">\n      <span class=\"spinner-border spinner-border-sm mx-2\" role=\"status\" aria-hidden=\"true\"></span>\n      {{busyText ? busyText : ''}}\n    </ng-container>\n  </button>\n</div>\n\n<ng-template #buttonContent>\n  <i *ngIf=\"iconClass && busy === false\" class=\"{{iconClass}}\"></i>\n  <ng-container *ngIf=\"label; else noLabel\">\n    {{label}}\n  </ng-container>\n</ng-template>\n\n<ng-template #noLabel>\n  <ng-content></ng-content>\n</ng-template>\n\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-258e5bd4c61dec0aac573bae3c72d714",
            "file": "projects/components/src/lib/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "borderRadius",
                    "defaultValue": "Sizes.md",
                    "line": 12,
                    "type": "Sizes"
                },
                {
                    "name": "hoverable",
                    "defaultValue": "false",
                    "line": 11
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {Sizes} from '../../models/sizes';\n\n@Component({\n  selector: 'pm-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent {\n\n  @Input() hoverable = false;\n  @Input() borderRadius: Sizes = Sizes.md;\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "templateData": "<div\n  [ngClass]=\"{'hoverable': hoverable}\"\n  class=\"card-basic {{borderRadius ? 'rad-' + borderRadius : ''}} w-100 p-3\"\n  style=\"height: auto;\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-51774af61e4b842886e893ae3df7b183",
            "file": "projects/components/src/lib/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "line": 10
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 13
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 11,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "disabledChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 14,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "onCheckedChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'pm-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent {\n\n  @Input() checked = false;\n  @Output() checkedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() onCheckedChange = new EventEmitter();\n  @Input() disabled = false;\n  @Output() disabledChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor() {\n  }\n\n  public setValue(value: boolean): void {\n    this.checked = value;\n    this.checkedChange.emit(this.checked);\n    this.onCheckedChange.emit(this.checked);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "templateData": "<div class=\"form-check\" [ngClass]=\"{'disabled': disabled}\" (click)=\"$event.stopPropagation();\">\n  <label class=\"form-check-label\">\n    <input (change)=\"setValue($event.target['checked'])\"\n           [(ngModel)]=\"checked\"\n           [ngModelOptions]=\"{standalone: true}\"\n           [disabled]=\"disabled\"\n           class=\"form-check-input\" type=\"checkbox\">\n    <span class=\"form-check-sign\"></span>\n    <ng-content></ng-content>\n  </label>\n</div>\n"
        },
        {
            "name": "ComboBoxComponent",
            "id": "component-ComboBoxComponent-4559a9e381398bce2d9780a95355daee",
            "file": "projects/components/src/lib/combo-box/combo-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-combo-box",
            "styleUrls": [
                "./combo-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./combo-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 17
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "ComboItem[]"
                },
                {
                    "name": "selectedItem",
                    "line": 16,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "selectionChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nexport interface ComboItem {\n  label: string;\n  value: any;\n}\n\n@Component({\n  selector: 'pm-combo-box',\n  templateUrl: './combo-box.component.html',\n  styleUrls: ['./combo-box.component.scss']\n})\nexport class ComboBoxComponent implements OnInit {\n\n  @Input() items: ComboItem[] = [];\n  @Input() selectedItem: any;\n  @Input() disabled = false;\n  @Output() selectionChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.ref.detectChanges();\n  }\n\n  private selectionChanged(event: any): void {\n    this.selectionChange.emit(event.value);\n    this.ref.detectChanges();\n  }\n\n  public setSelected(item: any): void {\n    this.selectedItem = item;\n    this.selectionChange.emit(item);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./combo-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field class=\"w-100\">\n  <mat-select\n    [disabled]=\"disabled\"\n    [disableRipple]=\"true\"\n    [(ngModel)]=\"selectedItem\" disableOptionCentering\n    (selectionChange)=\"selectionChanged($event)\"\n  >\n    <mat-option *ngFor=\"let item of items\" [value]=\"item.value\">\n      {{item.label}}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n"
        },
        {
            "name": "ComponentsComponent",
            "id": "component-ComponentsComponent-b10d994f930dcdc791bfa10ecd8f2428",
            "file": "projects/components/src/lib/components.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-components",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  components works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'pm-components',\n  template: `\n    <p>\n      components works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class ComponentsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "CopyContentInputComponent",
            "id": "component-CopyContentInputComponent-9ec1f2377b49b96cc969f1a6c41dfd48",
            "file": "projects/components/src/lib/copy-content-input/copy-content-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-copy-content-input",
            "styleUrls": [
                "./copy-content-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./copy-content-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "true",
                    "line": 11
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'pm-copy-content-input',\n  templateUrl: './copy-content-input.component.html',\n  styleUrls: ['./copy-content-input.component.scss']\n})\nexport class CopyContentInputComponent implements OnInit {\n\n  @Input() text = '';\n  @Input() disabled = true;\n  // public readonly notifier: SnotifyService;\n\n  constructor(\n    // private notifierService: SnotifyService\n  ) {\n    // this.notifier = notifierService;\n  }\n\n  ngOnInit(): void {\n  }\n\n  // /**\n  //  * Notifica que o valor foi copiado para a clipboard.\n  //  * O que copia mesmo é a diretiva [cdkCopyToClipboard]=\"texto\"\n  //  * @param inputElement: uma tag input\n  //  */\n  // copyInputMessage(inputElement) {\n  //   this.notifier.info('Link copiado para a área de transferência')\n  // }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./copy-content-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"text\">\n  <div class=\"d-flex\">\n    <input [attr.readonly]=\"disabled\" [attr.disabled]=\"disabled\" [value]=\"text\" class=\"form-control\" [title]=\"text\"\n           style=\"border-radius: var(--border-radius-md) 0px 0px var(--border-radius-md) !important;\" type=\"text\">\n    <button [cdkCopyToClipboard]=\"text\" class=\"btn-copy\">\n      <i class=\"uil uil-lg uil-copy\"></i>\n    </button>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "DraggableListComponent",
            "id": "component-DraggableListComponent-7f67272b7828fde27164e5bba92460c2",
            "file": "projects/components/src/lib/draggable-list/draggable-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-draggable-list",
            "styleUrls": [
                "./draggable-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./draggable-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "line": 26,
                    "type": "any[]"
                },
                {
                    "name": "enableDragging",
                    "defaultValue": "true",
                    "line": 16
                },
                {
                    "name": "enableSelection",
                    "defaultValue": "true",
                    "line": 17
                },
                {
                    "name": "itemActionLabel",
                    "line": 23
                },
                {
                    "name": "itemList",
                    "line": 22,
                    "type": "any[]"
                },
                {
                    "name": "itemMainLabel",
                    "line": 24
                },
                {
                    "name": "itemSubLabel",
                    "line": 25
                },
                {
                    "name": "roundedBorders",
                    "defaultValue": "true",
                    "line": 28
                },
                {
                    "name": "showIndex",
                    "defaultValue": "true",
                    "line": 21
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelectedChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenu",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contextMenu'"
                        }
                    ]
                },
                {
                    "name": "overlay",
                    "type": "Overlay",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "overlayRef",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedItem",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "viewContainerRef",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeContextMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "description": "<p>Fecha o context menu</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "description": "<p>Evento de drop do cdkDragDrop</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1775,
                                "end": 1780,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "pos": 1769,
                                "end": 1774,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: evento de drop</p>\n"
                        }
                    ]
                },
                {
                    "name": "formatItemStringParameters",
                    "args": [
                        {
                            "name": "originalString",
                            "type": "string"
                        },
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "description": "<p>Caso o originalString tenha {algumacoisa}, é substituído por ${item[algumacoisa]}\nFazendo assim ser possível strings dinânimcas de acordo com o objeto\nCaso o item seja string, é possível ele ser dinâmico usando {this}</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "originalString",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemList",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getSelectedItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSelectedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>Verifica se o item é o atual selecionado</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4243,
                                "end": 4247,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 4237,
                                "end": 4242,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item a ser comparado com o atual selecionado</p>\n"
                        }
                    ]
                },
                {
                    "name": "openContextMenu",
                    "args": [
                        {
                            "type": "MouseEvent"
                        },
                        {
                            "name": "context",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "description": "<p>Abre o context Menu</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 2132,
                                "end": 2139,
                                "flags": 0,
                                "escapedText": "context"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 2126,
                                "end": 2131,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: valores que serão passados para o context menu</p>\n"
                        }
                    ]
                },
                {
                    "name": "setItemList",
                    "args": [
                        {
                            "name": "itemList",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "description": "<p>Setta o novo item como selecionado</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1532,
                                "end": 1536,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 1526,
                                "end": 1531,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item novo</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewContainerRef} from '@angular/core';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {Overlay, OverlayRef} from '@angular/cdk/overlay';\n\n@Component({\n  selector: 'pm-draggable-list',\n  templateUrl: './draggable-list.component.html',\n  styleUrls: ['./draggable-list.component.scss']\n})\nexport class DraggableListComponent {\n\n  @Input('enableDragging') enableDragging = true;\n  @Input('enableSelection') enableSelection = true;\n  @Output() onSelectedChange = new EventEmitter();\n  private selectedItem: any;\n\n  @Input('showIndex') showIndex = true;\n  @Input('itemList') itemList: any[];\n  @Input('itemActionLabel') itemActionLabel;\n  @Input('itemMainLabel') itemMainLabel;\n  @Input('itemSubLabel') itemSubLabel;\n  @Input('actions') actions: any[];\n\n  @Input('roundedBorders') roundedBorders = true;\n\n  sub: Subscription;\n  overlayRef: OverlayRef | null;\n  @ViewChild('contextMenu') contextMenu: TemplateRef<any>;\n\n  constructor(\n    public overlay: Overlay,\n    public viewContainerRef: ViewContainerRef,\n  ) {\n  }\n\n  public getItemList(): any[] {\n    return this.itemList;\n  }\n\n  public setItemList(itemList: any[]): void {\n    this.itemList = itemList;\n  }\n\n  public getSelectedItem(): any {\n    return this.selectedItem;\n  }\n\n  /**\n   * Setta o novo item como selecionado\n   * @param item: item novo\n   */\n  public setSelectedItem(item: any): void {\n    if (this.enableSelection === true) {\n      this.selectedItem = item;\n      this.onSelectedChange.emit(item);\n    }\n  }\n\n  /**\n   * Evento de drop do cdkDragDrop\n   * @param event: evento de drop\n   * @param profileList: lista a ser dropado\n   */\n  public drop(event: CdkDragDrop<string[]>): void {\n    if (this.enableDragging) {\n      moveItemInArray(this.itemList, event.previousIndex, event.currentIndex);\n    }\n  }\n\n  /**\n   * Abre o context Menu\n   * @param x: posição x do mouse\n   * @param y: posição y do mouse\n   * @param context: valores que serão passados para o context menu\n   */\n  public openContextMenu({x, y}: MouseEvent, context): void {\n    this.closeContextMenu();\n    const positionStrategy = this.overlay.position()\n      .flexibleConnectedTo({x, y})\n      .withPositions([\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top',\n        }\n      ]);\n\n    this.overlayRef = this.overlay.create({\n      positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.close()\n    });\n\n    this.overlayRef.attach(new TemplatePortal(this.contextMenu, this.viewContainerRef, context));\n\n    this.sub = fromEvent<MouseEvent>(document, 'click')\n      .pipe(\n        filter(event => {\n          const clickTarget = event.target as HTMLElement;\n          return !!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget);\n        }),\n        take(1)\n      ).subscribe(() => this.closeContextMenu());\n  }\n\n  /**\n   * Fecha o context menu\n   */\n  public closeContextMenu(): void {\n    // tslint:disable-next-line:no-unused-expression\n    this.sub && this.sub.unsubscribe();\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.overlayRef = null;\n    }\n  }\n\n  /**\n   * Caso o originalString tenha {algumacoisa}, é substituído por ${item[algumacoisa]}\n   * Fazendo assim ser possível strings dinânimcas de acordo com o objeto\n   * Caso o item seja string, é possível ele ser dinâmico usando {this}\n   */\n  public formatItemStringParameters(originalString: string, item: any): string {\n    if (typeof item !== 'string' && originalString.indexOf('{') !== -1) {\n      let result = '';\n      for (const str of originalString.split('{')) {\n        if (str.indexOf('}') !== -1) {\n          result += `${item[str.substring(0, str.indexOf('}'))]}`;\n          result += str.substring(str.indexOf('}') + 1, str.length);\n        } else {\n          result += str;\n        }\n      }\n      return result;\n    } else {\n      return originalString.replace('{this}', item);\n    }\n  }\n\n  /**\n   * Verifica se o item é o atual selecionado\n   * @param item: item a ser comparado com o atual selecionado\n   */\n  public isSelectedItem(item: any): boolean {\n    if (typeof item !== 'undefined') {\n      return this.selectedItem === item;\n    } else {\n      return false;\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./draggable-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"d-flex w-100\">\n  <div *ngIf=\"showIndex\"\n       class=\"draggable-item-index-container\"\n       [ngClass]=\"{rounded: roundedBorders && !showIndex, 'rounded-left': roundedBorders && showIndex}\"\n  >\n    <div *ngFor=\"let item of itemList, let i = index;\" class=\"draggable-item-index\">\n      <p>{{ i + 1 }}</p>\n    </div>\n  </div>\n  <div (cdkDropListDropped)=\"drop($event)\" cdkDropList\n       class=\"table-item-container w-100\"\n       [ngClass]=\"{rounded: roundedBorders && !showIndex, 'rounded-right': roundedBorders && showIndex}\">\n    <div *ngFor=\"let item of itemList, let i = index;\" cdkDrag cdkDragBoundary=\".table-item-container\" [cdkDragDisabled]=\"enableDragging === false\"\n         class=\"draggable-item\" (contextmenu)=\"openContextMenu($event, {$implicit: item}); $event.preventDefault();\"\n         [ngClass]=\"{'draggable-item-selected': isSelectedItem(item)}\"\n         (click)=\"setSelectedItem(item)\"\n         [ngStyle]=\"{'cursor': enableDragging ? 'move' : (enableSelection ? 'pointer' : null)}\">\n      <div *cdkDragPlaceholder class=\"draggable-placeholder\"></div>\n      <div class=\"d-flex w-100\">\n        <!-- if IsMobile -> para poder reordenar os perfis apenas pelo ícone -->\n        <div *ngIf=\"false\" cdkDragHandle class=\"move-icon-container\">\n          <i class=\"uil uil-lg uil-draggabledots\"></i>\n        </div>\n        <div *ngIf=\"enableDragging\" class=\"move-icon-container\">\n          <i class=\"uil uil-lg uil-draggabledots\"></i>\n        </div>\n        <div class=\"w-100 align-self-center text-overflow\">\n          <p class=\"m-0\">{{ formatItemStringParameters(itemMainLabel, item) }}</p>\n          <p class=\"m-0 sub-p\">{{ formatItemStringParameters(itemSubLabel, item) }}</p>\n        </div>\n        <div class=\"d-flex ms-2\">\n          <button (click)=\"actionsSelect.toggle()\" class=\"btn btn-light btn-icon btn-sm ms-2\">\n            <i class=\"uil uil-md uil-ellipsis-h\"></i>\n          </button>\n          <mat-select #actionsSelect class=\"mat-select-btn-sm\">\n            <mat-option [hidden]=\"true\"></mat-option>\n            <ng-container *ngTemplateOutlet=\"contextActions; context: {$implicit: item}\"></ng-container>\n          </mat-select>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #contextActions let-item>\n  <mat-option *ngFor=\"let action of actions\" (click)=\"action.method(item)\">{{formatItemStringParameters(action.name, item)}}</mat-option>\n</ng-template>\n\n<ng-template #contextMenu let-item>\n  <div class=\"mat-menu-panel\">\n    <mat-optgroup [label]=\"formatItemStringParameters(itemActionLabel, item)\">\n      <ng-container *ngTemplateOutlet=\"contextActions; context: {$implicit: item}\"></ng-container>\n    </mat-optgroup>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "GridListComponent",
            "id": "component-GridListComponent-796e93fd8c33fa425fdeebddb952d7ac",
            "file": "projects/components/src/lib/grid-list/grid-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-grid-list",
            "styleUrls": [
                "./grid-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./grid-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionTemplate",
                    "line": 34,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "bodyBackgroundColor",
                    "line": 33
                },
                {
                    "name": "displayStyle",
                    "defaultValue": "'grid'",
                    "line": 29,
                    "type": "\"list\" | \"grid\" | \"gallery\""
                },
                {
                    "name": "gridHeaderReverse",
                    "defaultValue": "false",
                    "line": 32
                },
                {
                    "name": "items",
                    "line": 31,
                    "type": "GridListItem[]"
                },
                {
                    "name": "overflowGallery",
                    "defaultValue": "true",
                    "line": 30
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "galleryTemplateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'galleryTemplate', {static: true}"
                        }
                    ]
                },
                {
                    "name": "gridTemplateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'gridTemplate', {static: true}"
                        }
                    ]
                },
                {
                    "name": "listTemplateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'listTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "TemplateRef<any>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, TemplateRef, ViewChild} from '@angular/core';\nimport {MainColors} from '../../models/colors';\n\nexport interface GridListItem {\n  title: string;\n  subtitle?: string;\n  context?: any;\n  iconClass?: string;\n  iconColor?: MainColors | string;\n  iconOutline?: boolean;\n  thumbnailPicture?: string;\n  bodyPicture: string;\n  iconCallback?: void;\n  titleCallback?: void;\n  subtitleCallback?: void;\n  bodyCallback?: void;\n}\n\n@Component({\n  selector: 'pm-grid-list',\n  templateUrl: './grid-list.component.html',\n  styleUrls: ['./grid-list.component.scss']\n})\nexport class GridListComponent {\n\n  @ViewChild('gridTemplate', {static: true}) gridTemplateRef: TemplateRef<any>;\n  @ViewChild('listTemplate', {static: true}) listTemplateRef: TemplateRef<any>;\n  @ViewChild('galleryTemplate', {static: true}) galleryTemplateRef: TemplateRef<any>;\n  @Input() displayStyle: 'list' | 'grid' | 'gallery' = 'grid';\n  @Input() overflowGallery = true;\n  @Input() items: GridListItem[];\n  @Input() gridHeaderReverse = false;\n  @Input() bodyBackgroundColor;\n  @Input() actionTemplate: TemplateRef<any>;\n\n  constructor() { }\n\n  public getTemplate(): TemplateRef<any> {\n    switch (this.displayStyle) {\n      case 'grid':\n        return this.gridTemplateRef;\n      case 'gallery':\n        return this.galleryTemplateRef;\n      case 'list':\n        return this.listTemplateRef;\n      default:\n        return this.gridTemplateRef;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-grid-list {\n\n  .list-item {\n    height: 200px;\n    max-height: 160px;\n    border-bottom: 2px solid var(--color-gray-light);\n\n    .image-fluid-container {\n      width: 200px;\n\n      img {\n        max-height: 125px;\n      }\n    }\n\n    .title {\n      font-weight: 500;\n      font-size: 1.3rem;\n      color: var(--color-default-states);\n\n      &.bigger {\n        font-size: 1.4rem;\n        font-weight: 600;\n      }\n    }\n\n    .title-link {\n      @extend .title;\n      cursor: pointer;\n\n      &:hover {\n        color: var(--color-default-sat);\n      }\n\n      &:focus {\n        outline: none !important;\n        box-shadow: none;\n      }\n    }\n\n    .secondary {\n      font-size: 1.1rem;\n      color: var(--color-gray-dark);\n      font-weight: 400;\n      width: fit-content;\n\n      &:focus {\n        outline: none !important;\n      }\n\n      &.bigger {\n        font-size: 1.2rem;\n        font-weight: 600;\n      }\n    }\n\n    .secondary-link {\n      @extend .secondary;\n      cursor: pointer;\n\n      &:hover {\n        color: var(--color-default);\n      }\n\n      &:focus {\n        outline: none !important;\n      }\n    }\n  }\n\n  @media (max-width: 991px) {\n    .list-item {\n      height: 120px;\n      max-height: 90px;\n\n      .image-fluid-container {\n        width: 100px;\n\n        img {\n          max-height: 60px;\n        }\n      }\n\n      .title {\n        font-size: 1.1em;\n        margin-bottom: 0px;\n      }\n\n      .secondary {\n        font-size: 0.9em;\n      }\n\n    }\n  }\n}\n",
                    "styleUrl": "./grid-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "templateData": "<div class=\"pm-grid-list\">\n\n  <div class=\"d-flex justify-content-end\">\n    <button (click)=\"displayStyle = 'gallery'\" class=\"btn btn-icon-action color-primary\">\n      <i class=\"uil uil-md uil-table\"></i>\n    </button>\n    <button (click)=\"displayStyle = 'grid'\" class=\"btn btn-icon-action color-primary\">\n      <i class=\"uil uil-md uil-apps\"></i>\n    </button>\n    <button (click)=\"displayStyle = 'list'\" class=\"btn btn-icon-action color-primary\">\n      <i class=\"uil uil-md uil-grids rotate-90\"></i>\n    </button>\n  </div>\n\n  <div class=\"row g-0 d-flex justify-content-center\" [ngClass]=\"{'card-basic': displayStyle === 'list'}\">\n    <ng-container *ngFor=\"let item of items\">\n      <ng-container *ngTemplateOutlet=\"getTemplate(); context: {$implicit: item}\"></ng-container>\n    </ng-container>\n  </div>\n\n</div>\n\n<ng-template #actionButton let-item>\n  <button *ngIf=\"item.iconCallback && item.iconClass\"\n          (click)=\"item.iconCallback(item)\"\n          [className]=\"'btn btn-icon-action px-2 py-0 color-' + (item.iconColor ? item.iconColor : 'primary') + (item.iconOutline ? ' btn-outline-' + item.iconColor : '')\"\n          style=\"height: fit-content; align-self: center;\"\n  >\n    <i [className]=\"item.iconClass\"></i>\n  </button>\n</ng-template>\n\n<ng-template #gridTemplate let-item>\n  <div class=\"card-basic model-collection-card hoverable rad-md col-auto m-3\"\n       [ngClass]=\"{'reverse': gridHeaderReverse}\"\n       style=\"height: auto;\"\n  >\n    <div class=\"model-collection-card-header\">\n      <ng-container *ngIf=\"item.thumbnailPicture\">\n        <div [ngStyle]=\"{'background-image': 'url(' + item.thumbnailPicture + ')'}\" class=\"img-thumbnail align-self-center\"></div>\n      </ng-container>\n      <div class=\"d-flex flex-column justify-content-center flex-fill text-overflow ms-2\">\n        <ng-container *ngTemplateOutlet=\"titleSubtitle; context: {$implicit: item}\"></ng-container>\n      </div>\n      <ng-container *ngTemplateOutlet=\"actionTemplate ? actionTemplate : actionButton; context: {$implicit: item}\"></ng-container>\n    </div>\n    <div\n      (click)=\"item.bodyCallback ? item.bodyCallback(item) : null\"\n      [ngClass]=\"{'cursor-pointer': item.bodyCallback, 'rad-md-top': gridHeaderReverse, 'rad-md-bottom': !gridHeaderReverse}\"\n      class=\"model-collection-card-body fixed-height image-fluid-container\"\n      [ngStyle]=\"{'background-color': bodyBackgroundColor ? bodyBackgroundColor : null}\"\n    >\n      <img [attr.alt]=\"item.bodyPicture\" [attr.src]=\"item.bodyPicture\">\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #listTemplate let-item>\n  <div class=\"list-item d-flex py-3 pe-3 pe-lg-5\">\n    <div (click)=\"item.bodyCallback ? item.bodyCallback(item) : null\" class=\"image-fluid-container mx-3 mx-lg-4\">\n      <img [attr.alt]=\"item.bodyPicture\" [attr.src]=\"item.bodyPicture\">\n    </div>\n    <div class=\"d-block flex-fill text-overflow\">\n      <ng-container *ngTemplateOutlet=\"titleSubtitle; context: {$implicit: item}\"></ng-container>\n    </div>\n    <ng-container *ngTemplateOutlet=\"actionTemplate ? actionTemplate : actionButton; context: {$implicit: item}\"></ng-container>\n  </div>\n</ng-template>\n\n<ng-template #galleryTemplate let-item>\n  <div class=\"card-basic model-collection-card square-sm col-auto m-0 position-relative\" style=\"height: auto;\">\n    <div\n      (click)=\"item.bodyCallback ? item.bodyCallback(item) : null\"\n      [ngClass]=\"{'cursor-pointer': item.bodyCallback, 'image-fluid-container': !overflowGallery, 'overflow-hidden d-flex justify-content-center': overflowGallery}\"\n      class=\"model-collection-card-body square-sm\"\n      [ngStyle]=\"{'background-color': bodyBackgroundColor ? bodyBackgroundColor : null}\"\n    >\n      <img [attr.alt]=\"item.bodyPicture\" [attr.src]=\"item.bodyPicture\">\n    </div>\n    <div class=\"position-absolute\" style=\"bottom: 5px; right: 5px;\">\n      <ng-container *ngTemplateOutlet=\"actionTemplate ? actionTemplate : actionButton; context: {$implicit: item}\"></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #titleSubtitle let-item>\n  <p (click)=\"item.titleCallback ? item.titleCallback(item) : null\"\n     [ngClass]=\"{\n            'title-link': !!item.titleCallback === true,\n            'title': !!item.titleCallback === false,\n            'bigger': !!item.thumbnailPicture === false\n           }\"\n     class=\"align-self-start\">{{item.title}}\n  </p>\n  <p *ngIf=\"item.subtitle\"\n     (click)=\"item.subtitleCallback ? item.subtitleCallback(item) : null\"\n     class=\"secondary-link align-self-start\"\n     [ngClass]=\"{\n            'secondary-link': !!item.subtitleCallback === true,\n            'secondary': !!item.subtitleCallback === false\n           }\"\n  >\n    {{item.subtitle}}\n  </p>\n</ng-template>\n"
        },
        {
            "name": "MultiLevelDropdownMenuComponent",
            "id": "component-MultiLevelDropdownMenuComponent-2b9b9b0243b413be470996a51d629c6f",
            "file": "projects/components/src/lib/multi-level-dropdown-menu/multi-level-dropdown-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-multi-level-dropdown-menu",
            "styleUrls": [
                "./multi-level-dropdown-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-level-dropdown-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "line": 12
                },
                {
                    "name": "busy",
                    "defaultValue": "false",
                    "line": 18
                },
                {
                    "name": "busyText",
                    "defaultValue": "''",
                    "line": 19
                },
                {
                    "name": "buttonTemplate",
                    "line": 14,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "closeOnClick",
                    "defaultValue": "true",
                    "line": 13
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 22
                },
                {
                    "name": "iconClass",
                    "defaultValue": "'uil uil-md uil-ellipsis-h'",
                    "line": 20
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "line": 21
                },
                {
                    "name": "type",
                    "defaultValue": "MainColors.light",
                    "line": 17,
                    "type": "MainColors | string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "callMethod",
                    "args": [
                        {
                            "name": "action",
                            "type": "any"
                        },
                        {
                            "name": "actionsSelect",
                            "type": "MatSelect"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionsSelect",
                            "type": "MatSelect",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, TemplateRef} from '@angular/core';\nimport {MatSelect} from '@angular/material/select';\nimport {MainColors} from '../../models/colors';\n\n@Component({\n  selector: 'pm-multi-level-dropdown-menu',\n  templateUrl: './multi-level-dropdown-menu.component.html',\n  styleUrls: ['./multi-level-dropdown-menu.component.scss']\n})\nexport class MultiLevelDropdownMenuComponent implements OnInit {\n\n  @Input('actions') actions = [];\n  @Input() closeOnClick = true;\n  @Input() buttonTemplate: TemplateRef<any>;\n\n  // buttons input\n  @Input('type') type: MainColors | string = MainColors.light;\n  @Input('busy') busy = false;\n  @Input('busyText') busyText = '';\n  @Input('iconClass') iconClass = 'uil uil-md uil-ellipsis-h';\n  @Input('outline') outline = false;\n  @Input('disabled') disabled = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public callMethod(action: any, actionsSelect: MatSelect): void {\n    action.method();\n    if (this.closeOnClick) {\n      actionsSelect.close();\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./multi-level-dropdown-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngTemplateOutlet=\"buttonTemplate ? buttonTemplate : defaultButtonTemplate; context: {$implicit: actionsSelect}\"></ng-container>\n\n<mat-select #actionsSelect class=\"mat-select-btn-sm\">\n  <mat-option [hidden]=\"true\"></mat-option>\n  <mat-option *ngFor=\"let action of actions\" (click)=\"callMethod(action, actionsSelect)\">{{action.label}}</mat-option>\n</mat-select>\n\n<ng-template #defaultButtonTemplate let-select>\n  <pm-button (click)=\"select.toggle()\"\n             [type]=\"type\"\n             [busy]=\"busy\"\n             [busyText]=\"busyText\"\n             [iconClass]=\"iconClass\"\n             [outline]=\"outline\"\n             [disabled]=\"disabled\"\n  >\n  </pm-button>\n</ng-template>\n"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-649e524d48ab6ea267d839228e2b98d5",
            "file": "projects/components/src/lib/radio-button/radio-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 16
                },
                {
                    "name": "orientation",
                    "defaultValue": "OrientationEnum.Y",
                    "line": 15,
                    "type": "OrientationEnum"
                },
                {
                    "name": "selectedValue",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "line": 17,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 19,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "favoriteSeason",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport const enum OrientationEnum {\n  X = 'horizontal',\n  Y = 'vertical',\n}\n\n@Component({\n  selector: 'pm-radio-button',\n  templateUrl: './radio-button.component.html',\n  styleUrls: ['./radio-button.component.scss']\n})\nexport class RadioButtonComponent {\n\n  @Input() orientation: OrientationEnum = OrientationEnum.Y;\n  @Input() disabled = false;\n  @Input() values: string[] = [];\n  @Input() selectedValue: string;\n  @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n  public favoriteSeason: string;\n\n  constructor() {\n  }\n\n  public setValue(value: string): void {\n    this.selectedValue = value;\n    this.selectedChange.emit(this.selectedValue);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "templateData": "<mat-radio-group\n  [(ngModel)]=\"selectedValue\"\n  [disabled]=\"disabled\"\n  (change)=\"setValue($event.value)\"\n  [ngClass]=\"{'d-flex flex-column': orientation === 'vertical'}\">\n  <mat-radio-button *ngFor=\"let value of values\" [value]=\"value\">\n    {{value}}\n  </mat-radio-button>\n</mat-radio-group>\n"
        },
        {
            "name": "StepperComponent",
            "id": "component-StepperComponent-3da625f623e2a5940f942c81f06d1447",
            "file": "projects/components/src/lib/stepper/stepper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: CdkStepper, useExisting: StepperComponent }",
                    "type": "component"
                }
            ],
            "selector": "pm-stepper",
            "styleUrls": [
                "./stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stepper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "selectStepByIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {CdkStepper} from '@angular/cdk/stepper';\n\n@Component({\n  selector: 'pm-stepper',\n  templateUrl: './stepper.component.html',\n  styleUrls: ['./stepper.component.scss'],\n  providers: [{provide: CdkStepper, useExisting: StepperComponent}]\n})\nexport class StepperComponent extends CdkStepper {\n\n  selectStepByIndex(index: number): void {\n    this.selectedIndex = index;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-container {\n  border: 1px solid;\n  padding: 10px;\n  margin: 10px;\n}\n\n.example-step-navigation-bar {\n  display: flex;\n  justify-content: flex-start;\n  margin-top: 10px;\n}\n\n.example-step {\n  background: transparent;\n  border: 0;\n  margin: 0 10px;\n  padding: 10px;\n  color: inherit;\n}\n\n.example-step.example-active {\n  border-bottom: 1px solid;\n  font-weight: 600;\n}\n\n.example-nav-button {\n  background: transparent;\n  border: 0;\n  color: inherit;\n}\n",
                    "styleUrl": "./stepper.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "CdkStepper",
            "templateData": "<section class=\"example-container\">\n  <header>\n    <ng-container *ngTemplateOutlet=\"headerActions\"></ng-container>\n    <h2>Step {{ selectedIndex + 1 }}/{{ steps.length }}</h2>\n  </header>\n\n  <div [ngTemplateOutlet]=\"selected ? selected.content : null\"></div>\n\n  <footer class=\"example-step-navigation-bar\">\n    <ng-container *ngTemplateOutlet=\"footerActions\"></ng-container>\n  </footer>\n</section>\n\n<ng-template #headerActions>\n  <button class=\"example-nav-button\" cdkStepperPrevious>&larr;</button>\n  <button\n    class=\"example-step\"\n    [class.example-active]=\"selectedIndex === i\"\n    *ngFor=\"let step of steps; let i = index\"\n    (click)=\"selectStepByIndex(i)\"\n  >\n    Step {{ i + 1 }}\n  </button>\n  <button class=\"example-nav-button\" cdkStepperNext>&rarr;</button>\n</ng-template>\n\n<ng-template #footerActions>\n  <div class=\"w-100 d-flex justify-content-between\">\n    <pm-button (click)=\"previous()\" [type]=\"'light'\">Retornar</pm-button>\n    <pm-button (click)=\"next()\" [type]=\"'primary'\">Retornar</pm-button>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-8e8b08ecc80f40d3ab1ba626f509c321",
            "file": "projects/components/src/lib/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsTemplate",
                    "line": 38,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "backgroundColor",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "borderRadius",
                    "line": 40,
                    "type": "Sizes"
                },
                {
                    "name": "columnNames",
                    "defaultValue": "[]",
                    "line": 32,
                    "type": "string[]"
                },
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "line": 31,
                    "type": "string[]"
                },
                {
                    "name": "disableExpandedOnDisabledRow",
                    "defaultValue": "true",
                    "line": 44
                },
                {
                    "name": "expandedDetailTemplate",
                    "line": 43,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "imageColumns",
                    "defaultValue": "[]",
                    "line": 33,
                    "type": "string[]"
                },
                {
                    "name": "imageHeight",
                    "line": 34,
                    "type": ""
                },
                {
                    "name": "itemList",
                    "defaultValue": "[]",
                    "line": 39,
                    "type": "any"
                },
                {
                    "name": "numberFormat",
                    "defaultValue": "'1.2-2'",
                    "line": 36
                },
                {
                    "name": "numberPrefix",
                    "defaultValue": "''",
                    "line": 37
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "line": 35
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemListChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "doubleLabelCell",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'doubleLabelCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "expandedRow",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formattedNumberCell",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formattedNumberCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "imageCell",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imageCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "isExpansionDetailRow",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isNormalRow",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "singleLabelCell",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'singleLabelCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "table",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'table', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disableHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "description": "<p>Some com a linha de header</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "enableHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "description": "<p>Mostra a linha de header</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getCellTemplate",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        },
                        {
                            "name": "column",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "TemplateRef<any>",
                    "typeParameters": [],
                    "line": 146,
                    "description": "<p>Retorna o template que será renderizada a celula de acordo com o input de item e coluna</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4093,
                                "end": 4097,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 4087,
                                "end": 4092,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item da lista de itens</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4134,
                                "end": 4140,
                                "flags": 0,
                                "escapedText": "column"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 4128,
                                "end": 4133,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: propriedade do item</p>\n"
                        }
                    ]
                },
                {
                    "name": "getItemList",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 114,
                    "description": "<p>Retorna a lista atual de itens na tabela</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSelectedRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 96,
                    "description": "<p>Verifica se a row é igual à selecionada</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2950,
                                "end": 2953,
                                "flags": 0,
                                "escapedText": "row"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 2944,
                                "end": 2949,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "reloadExpandedDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "description": "<p>Reconstroi os elementos da tabela para incluir o &quot;detail row&quot; e deixar ela expansível</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3157,
                                "end": 3164,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setItemList",
                    "args": [
                        {
                            "name": "itemList",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "description": "<p>Troca a lista de itens da tabela</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "description": "<p>dá como selecionada a row atual CASO exista um template de expandedDetailTemplate</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2470,
                                "end": 2473,
                                "flags": 0,
                                "escapedText": "row"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 2464,
                                "end": 2469,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {Sizes} from '../../models/sizes';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {MatTable, MatTableDataSource} from '@angular/material/table';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'pm-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class TableComponent implements AfterViewInit {\n\n  @Output() onItemListChange = new EventEmitter();\n  @Input() columns: string[] = [];\n  @Input() columnNames: string[] = [];\n  @Input() imageColumns: string[] = [];\n  @Input() imageHeight: '50px';\n  @Input() showHeader = true;\n  @Input() numberFormat = '1.2-2';\n  @Input() numberPrefix = '';\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() itemList: any = [];\n  @Input() borderRadius: Sizes;\n  @Input() backgroundColor: string;\n\n  @Input() expandedDetailTemplate: TemplateRef<any>;\n  @Input() disableExpandedOnDisabledRow = true;\n\n  @ViewChild('table', {static: true}) table: MatTable<any>;\n  @ViewChild('singleLabelCell', {static: true}) singleLabelCell: TemplateRef<any>;\n  @ViewChild('doubleLabelCell', {static: true}) doubleLabelCell: TemplateRef<any>;\n  @ViewChild('imageCell', {static: true}) imageCell: TemplateRef<any>;\n  @ViewChild('formattedNumberCell', {static: true}) formattedNumberCell: TemplateRef<any>;\n\n  public expandedRow: any;\n  // tslint:disable-next-line:ban-types\n  isExpansionDetailRow = (i: number, row: Object) => row.hasOwnProperty('detailRow');\n  // tslint:disable-next-line:ban-types\n  isNormalRow = (i: number, row: Object) => true;\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n  }\n\n  ngAfterViewInit(): void {\n    if (typeof this.actionsTemplate !== 'undefined') {\n      if (this.columns.includes('ACTIONS') === false) {\n        this.columns.push('ACTIONS');\n        this.columnNames.push('');\n      }\n    }\n    this.reloadExpandedDetail();\n  }\n\n  /**\n   * dá como selecionada a row atual CASO exista um template de expandedDetailTemplate\n   * @param row\n   */\n  public setSelectedRow(row: any): void {\n    if (!_.isNil(this.expandedDetailTemplate)) {\n      if (row.hasOwnProperty('detailRow') === false) {\n        row = { detailRow: true, element: row };\n      }\n      if (row.element?.disabled) {\n        if (this.disableExpandedOnDisabledRow === false) {\n          this.expandedRow = row;\n        }\n      } else {\n        this.expandedRow = row;\n      }\n    }\n  }\n\n  /**\n   * Verifica se a row é igual à selecionada\n   * @param row\n   */\n  public isSelectedRow(row: any): boolean {\n    return _.isEqual(row, this.expandedRow);\n  }\n\n  /**\n   * Reconstroi os elementos da tabela para incluir o \"detail row\" e deixar ela expansível\n   * @private\n   */\n  private reloadExpandedDetail(): void {\n    const newItems = [];\n    this.itemList.forEach(element => newItems.push(element, { detailRow: true, element }));\n    this.itemList = new MatTableDataSource(newItems);\n    this.changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Retorna a lista atual de itens na tabela\n   */\n  public getItemList(): any[] {\n    return this.itemList;\n  }\n\n  /**\n   * Troca a lista de itens da tabela\n   */\n  public setItemList(itemList: any[]): void {\n    this.itemList = itemList;\n    this.reloadExpandedDetail();\n    this.onItemListChange.emit(this.itemList);\n  }\n\n  /**\n   * Mostra a linha de header\n   */\n  public enableHeader(): void {\n    this.showHeader = true;\n  }\n\n  /**\n   * Some com a linha de header\n   */\n  public disableHeader(): void {\n    this.showHeader = false;\n  }\n\n  /**\n   * Retorna o template que será renderizada a celula de acordo com o input de item e coluna\n   * @param item: item da lista de itens\n   * @param column: propriedade do item\n   */\n  public getCellTemplate(item: any, column: string): TemplateRef<any> {\n    if (column === 'ACTIONS') {\n      return this.actionsTemplate;\n    } else if (Array.isArray(item[column])) {\n      return this.doubleLabelCell;\n    } else {\n      if (this.imageColumns.includes(column)) {\n        return this.imageCell;\n      } else {\n        if (typeof item[column] === 'number') {\n          return this.formattedNumberCell;\n        } else {\n          return this.singleLabelCell;\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".prisma-table {\n  width: 100%;\n  border-collapse: collapse;\n  overflow:hidden !important;\n\n  &.mat-table {\n    background-color: transparent;\n  }\n\n  mat-header-cell {\n    font-size: 16px;\n    font-weight: 600;\n  }\n\n  mat-cell {\n    &.disabled {\n      background-color: var(--color-gray-light);\n\n      * {\n        color: var(--color-gray-dark) !important;\n      }\n    }\n  }\n\n  .main-label {\n    margin: 0px;\n    color: rgba(0, 0, 0, 0.87);\n    font-size: 14px;\n  }\n\n  .sub-label {\n    margin: 0px;\n    color: #c0c0c0;\n  }\n\n  .element-row {\n    position: relative;\n  }\n\n  .element-row:not(.expanded) {\n    cursor: pointer;\n  }\n\n  .element-row.expanded {\n    border-bottom-color: transparent;\n  }\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<mat-table #table [dataSource]=\"itemList\" class=\"prisma-table\"\n       [ngStyle]=\"{'border-radius': borderRadius ? 'var(--border-radius-' + borderRadius + ')' : null, 'background-color': backgroundColor ? backgroundColor : null}\"\n>\n\n  <ng-container *ngFor=\"let column of columns; let i = index;\">\n    <ng-container matColumnDef=\"{{column}}\">\n      <mat-header-cell *matHeaderCellDef>{{columnNames ? columnNames[i] : column}}</mat-header-cell>\n      <mat-cell *matCellDef=\"let item\" [ngClass]=\"{'disabled': item?.disabled === true}\">\n        <ng-container\n          *ngTemplateOutlet=\"getCellTemplate(item, column);\n          context: {$implicit: item, column: column}\">\n        </ng-container>\n      </mat-cell>\n    </ng-container>\n  </ng-container>\n\n  <ng-container matColumnDef=\"expandedDetail\">\n    <mat-cell *matCellDef=\"let item\" [ngClass]=\"{'disabled': item?.disabled === true}\">\n      <ng-container *ngTemplateOutlet=\"expandedDetailTemplate; context: {$implicit: item.element}\"></ng-container>\n    </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"columns\" [ngClass]=\"{'d-none': !showHeader}\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: columns\"\n           [ngClass]=\"{'element-row': expandedDetailTemplate}\"\n           [class.expanded]=\"expandedRow == row\"\n           (click)=\"setSelectedRow(row)\"\n  ></mat-row>\n  <mat-row *matRowDef=\"let row; columns: ['expandedDetail']; when: isExpansionDetailRow\"\n           [@detailExpand]=\"isSelectedRow(row) ? 'expanded' : 'collapsed'\"\n           (click)=\"setSelectedRow(row)\"\n           style=\"overflow: hidden\"\n  >\n  </mat-row>\n</mat-table>\n\n<ng-template #imageCell let-item let-column=\"column\">\n  <img [attr.src]=\"item[column]\" [attr.alt]=\"item[column]\"\n  class=\"img-fluid my-2\" [ngStyle]=\"{'height': imageHeight ? imageHeight : '50px', 'max-height': imageHeight ? imageHeight : '50px'}\">\n</ng-template>\n\n<ng-template #singleLabelCell let-item let-column=\"column\">\n  <p class=\"main-label\">{{item[column]}}</p>\n</ng-template>\n\n<ng-template #doubleLabelCell let-item let-column=\"column\">\n  <div class=\"d-block\">\n    <p class=\"main-label\">{{item[column][0]}}</p>\n    <p class=\"sub-label\">{{item[column][1]}}</p>\n  </div>\n</ng-template>\n\n<ng-template #formattedNumberCell let-item let-column=\"column\">\n  <p class=\"main-label\">{{numberPrefix}}{{item[column] | number: numberFormat}}</p>\n</ng-template>\n"
        }
    ],
    "modules": [
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComboBoxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComboBoxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ComboBoxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CopyContentInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CopyContentInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CopyContentInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DraggableListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DraggableListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DraggableListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GridListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GridListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GridListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MultiLevelDropdownMenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MultiLevelDropdownMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MultiLevelDropdownMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrismaComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComponentsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "ComboBoxModule"
                        },
                        {
                            "name": "DraggableListModule"
                        },
                        {
                            "name": "GridListModule"
                        },
                        {
                            "name": "MultiLevelDropdownMenuModule"
                        },
                        {
                            "name": "StepperModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ComponentsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RadioButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StepperModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ActionsTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "ActionsTableTemplate.bind({})"
            },
            {
                "name": "ActionsTableTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\n  component: TableComponent,\n  props: args,\n  template: `\n    <ng-template #actionsTemplate let-item let-column=\"column\">\n      <div [ngClass]=\"{'disabled': item?.disabled === true}\">\n        <button class=\"btn btn-primary\" [disabled]=\"item?.disabled\">Actions (id: {{item.id}})</button>\n      </div>\n    </ng-template>\n\n    <pm-table\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [actionsTemplate]=\"actionsTemplate\"\n    ></pm-table>\n`\n})"
            },
            {
                "name": "BusyButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ColorTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DangerButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "object",
                "defaultValue": "{\n  label: '',\n  type: MainColors.default,\n  busy: false,\n  busyText: '',\n  iconClass: '',\n  outline: false,\n  disabled: false,\n}"
            },
            {
                "name": "DefaultButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/Checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultComboBox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/ComboBox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultGridList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/GridList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/CopyContentInput.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultMultiLevelDropdownMenu",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/multi-level-dropdown-menu.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultRadioButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/RadioButton.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultStepper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Stepper.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisabledButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisabledCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/Checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "disabledDragging",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ExampleList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ExampleTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ExpandedDetailsTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "ExpandedDetailsTableTemplate.bind({})"
            },
            {
                "name": "ExpandedDetailsTableTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\n  component: TableComponent,\n  props: args,\n  template: `\n    <ng-template #dummyExpandedItem let-item>\n      <div class=\"d-block\">\n        <p>{{item.name}} - {{item.price}}</p>\n        <p>Here is an example item</p>\n        <p>Here is an example item</p>\n      </div>\n    </ng-template>\n\n    <pm-table\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [expandedDetailTemplate]=\"dummyExpandedItem\"\n      [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n    ></pm-table>\n`\n})"
            },
            {
                "name": "getColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/GridList.stories.ts",
                "type": "",
                "defaultValue": "() => MainColors.primary"
            },
            {
                "name": "IconButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "IconButtonTemplate.bind({})"
            },
            {
                "name": "IconButtonTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n        [iconClass]=\"iconClass\"\n        [outline]=\"outline\"\n    >\n        Download\n    </pm-button>`\n})"
            },
            {
                "name": "InfoButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LightButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoIndexStringList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SecondaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Card.stories.ts",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\n  component: CardComponent,\n  props: args,\n  template: `\n    <pm-card\n        [hoverable]=\"hoverable\"\n        [borderRadius]=\"borderRadius\"\n    >\n      conteudo\n    </pm-card>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "Story<DraggableListComponent>",
                "defaultValue": "(args: DraggableListComponent) => ({\n  component: DraggableListComponent,\n  props: args,\n  template: `\n    <pm-draggable-list\n        [showIndex]=\"showIndex\"\n        [itemActionLabel]=\"itemActionLabel\"\n        [itemMainLabel]=\"itemMainLabel\"\n        [itemSubLabel]=\"itemSubLabel\"\n        [actions]=\"actions\"\n        [itemList]=\"itemList\"\n        [roundedBorders]=\"roundedBorders\"\n        [enableDragging]=\"enableDragging\"\n        [enableSelection]=\"enableSelection\"\n    >\n      conteudo\n    </pm-draggable-list>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/GridList.stories.ts",
                "type": "Story<GridListComponent>",
                "defaultValue": "(args: GridListComponent) => ({\n  component: GridListComponent,\n  props: args,\n  template: `\n    <pm-grid-list\n        [items]=\"items\"\n        [displayStyle]=\"displayStyle\"\n        [gridHeaderReverse]=\"gridHeaderReverse\"\n        [bodyBackgroundColor]=\"bodyBackgroundColor\"\n        [actionTemplate]=\"undefined\"\n        [overflowGallery]=\"overflowGallery\"\n    >\n      conteudo\n    </pm-grid-list>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Stepper.stories.ts",
                "type": "Story<StepperComponent>",
                "defaultValue": "(args: StepperComponent) => ({\n  component: StepperComponent,\n  props: args,\n  template: `\n    <pm-stepper>\n      <cdk-step> <p>This is any content of \"Step 1\"</p> </cdk-step>\n      <cdk-step> <p>This is any content of \"Step 2\"</p> </cdk-step>\n    </pm-stepper>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\n  component: TableComponent,\n  props: args,\n  template: `\n    <pm-table\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [expandedDetailTemplate]=\"expandedDetailTemplate\"\n      [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n    ></pm-table>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/multi-level-dropdown-menu.stories.ts",
                "type": "Story<MultiLevelDropdownMenuComponent>",
                "defaultValue": "(args: MultiLevelDropdownMenuComponent) => ({\n  component: MultiLevelDropdownMenuComponent,\n  props: args,\n  template: `\n    <pm-multi-level-dropdown-menu>\n    </pm-multi-level-dropdown-menu>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/Checkbox.stories.ts",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => ({\n  component: CheckboxComponent,\n  props: args,\n  template: `\n    <pm-checkbox\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    >\n        Checkbox\n    </pm-checkbox>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/ComboBox.stories.ts",
                "type": "Story<ComboBoxComponent>",
                "defaultValue": "(args: ComboBoxComponent) => ({\n  component: ComboBoxComponent,\n  props: args,\n  template: `\n    <pm-combo-box\n        [items]=\"items\"\n    >\n        Conteúdo\n    </pm-combo-box>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/CopyContentInput.stories.ts",
                "type": "Story<CopyContentInputComponent>",
                "defaultValue": "(args: CopyContentInputComponent) => ({\n  component: CopyContentInputComponent,\n  props: args,\n  template: `\n    <pm-copy-content-input\n        [text]=\"text\"\n        [disabled]=\"disabled\"\n    >\n        Conteúdo\n    </pm-copy-content-input>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/RadioButton.stories.ts",
                "type": "Story<RadioButtonComponent>",
                "defaultValue": "(args: RadioButtonComponent) => ({\n  component: RadioButtonComponent,\n  props: args,\n  template: `\n    <pm-radio-button\n        [values]=\"values\"\n        [selectedValue]=\"selectedValue\"\n    >\n        Conteúdo\n    </pm-radio-button>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n        [iconClass]=\"iconClass\"\n        [outline]=\"outline\"\n        [disabled]=\"disabled\"\n    >\n        Button Content\n    </pm-button>\n  `\n})"
            },
            {
                "name": "ThumbnailTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WarningButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/inputs/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MainColors",
                "childs": [
                    {
                        "name": "primary",
                        "value": "primary"
                    },
                    {
                        "name": "secondary",
                        "value": "secondary"
                    },
                    {
                        "name": "success",
                        "value": "success"
                    },
                    {
                        "name": "info",
                        "value": "info"
                    },
                    {
                        "name": "warning",
                        "value": "warning"
                    },
                    {
                        "name": "danger",
                        "value": "danger"
                    },
                    {
                        "name": "light",
                        "value": "light"
                    },
                    {
                        "name": "default",
                        "value": "default"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "OrientationEnum",
                "childs": [
                    {
                        "name": "X",
                        "value": "horizontal"
                    },
                    {
                        "name": "Y",
                        "value": "vertical"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/lib/radio-button/radio-button.component.ts"
            },
            {
                "name": "PaleColors",
                "childs": [
                    {
                        "name": "primaryPale",
                        "value": "primary-pale"
                    },
                    {
                        "name": "secondaryPale",
                        "value": "secondary-pale"
                    },
                    {
                        "name": "successPale",
                        "value": "success-pale"
                    },
                    {
                        "name": "infoPale",
                        "value": "info-pale"
                    },
                    {
                        "name": "warningPale",
                        "value": "warning-pale"
                    },
                    {
                        "name": "dangerPale",
                        "value": "danger-pale"
                    },
                    {
                        "name": "lightPale",
                        "value": "light-pale"
                    },
                    {
                        "name": "defaultPale",
                        "value": "default-pale"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "SaturatedColors",
                "childs": [
                    {
                        "name": "primarySat",
                        "value": "primary-sat"
                    },
                    {
                        "name": "secondarySat",
                        "value": "secondary-sat"
                    },
                    {
                        "name": "successSat",
                        "value": "success-sat"
                    },
                    {
                        "name": "infoSat",
                        "value": "info-sat"
                    },
                    {
                        "name": "warningSat",
                        "value": "warning-sat"
                    },
                    {
                        "name": "dangerSat",
                        "value": "danger-sat"
                    },
                    {
                        "name": "lightSat",
                        "value": "light-sat"
                    },
                    {
                        "name": "defaultSat",
                        "value": "default-sat"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "Sizes",
                "childs": [
                    {
                        "name": "xs",
                        "value": "xs"
                    },
                    {
                        "name": "sm",
                        "value": "sm"
                    },
                    {
                        "name": "md",
                        "value": "md"
                    },
                    {
                        "name": "lg",
                        "value": "lg"
                    },
                    {
                        "name": "xl",
                        "value": "xl"
                    },
                    {
                        "name": "xxl",
                        "value": "xxl"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/sizes.ts"
            },
            {
                "name": "StateColors",
                "childs": [
                    {
                        "name": "primaryStates",
                        "value": "primary-states"
                    },
                    {
                        "name": "secondaryStates",
                        "value": "secondary-states"
                    },
                    {
                        "name": "successStates",
                        "value": "success-states"
                    },
                    {
                        "name": "infoStates",
                        "value": "info-states"
                    },
                    {
                        "name": "warningStates",
                        "value": "warning-states"
                    },
                    {
                        "name": "dangerStates",
                        "value": "danger-states"
                    },
                    {
                        "name": "lightStates",
                        "value": "light-states"
                    },
                    {
                        "name": "defaultStates",
                        "value": "default-states"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            }
        ],
        "groupedVariables": {
            "stories/Table.stories.ts": [
                {
                    "name": "ActionsTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "ActionsTableTemplate.bind({})"
                },
                {
                    "name": "ActionsTableTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\n  component: TableComponent,\n  props: args,\n  template: `\n    <ng-template #actionsTemplate let-item let-column=\"column\">\n      <div [ngClass]=\"{'disabled': item?.disabled === true}\">\n        <button class=\"btn btn-primary\" [disabled]=\"item?.disabled\">Actions (id: {{item.id}})</button>\n      </div>\n    </ng-template>\n\n    <pm-table\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [actionsTemplate]=\"actionsTemplate\"\n    ></pm-table>\n`\n})"
                },
                {
                    "name": "ColorTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ExampleTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ExpandedDetailsTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "ExpandedDetailsTableTemplate.bind({})"
                },
                {
                    "name": "ExpandedDetailsTableTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\n  component: TableComponent,\n  props: args,\n  template: `\n    <ng-template #dummyExpandedItem let-item>\n      <div class=\"d-block\">\n        <p>{{item.name}} - {{item.price}}</p>\n        <p>Here is an example item</p>\n        <p>Here is an example item</p>\n      </div>\n    </ng-template>\n\n    <pm-table\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [expandedDetailTemplate]=\"dummyExpandedItem\"\n      [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n    ></pm-table>\n`\n})"
                },
                {
                    "name": "NoHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\n  component: TableComponent,\n  props: args,\n  template: `\n    <pm-table\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [expandedDetailTemplate]=\"expandedDetailTemplate\"\n      [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n    ></pm-table>`\n})"
                },
                {
                    "name": "ThumbnailTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/inputs/button.stories.ts": [
                {
                    "name": "BusyButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DangerButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  label: '',\n  type: MainColors.default,\n  busy: false,\n  busyText: '',\n  iconClass: '',\n  outline: false,\n  disabled: false,\n}"
                },
                {
                    "name": "DefaultButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DisabledButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "IconButtonTemplate.bind({})"
                },
                {
                    "name": "IconButtonTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n        [iconClass]=\"iconClass\"\n        [outline]=\"outline\"\n    >\n        Download\n    </pm-button>`\n})"
                },
                {
                    "name": "InfoButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LightButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SecondaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n        [iconClass]=\"iconClass\"\n        [outline]=\"outline\"\n        [disabled]=\"disabled\"\n    >\n        Button Content\n    </pm-button>\n  `\n})"
                },
                {
                    "name": "WarningButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "type": "literal type"
                }
            ],
            "stories/Card.stories.ts": [
                {
                    "name": "DefaultCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Card.stories.ts",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\n  component: CardComponent,\n  props: args,\n  template: `\n    <pm-card\n        [hoverable]=\"hoverable\"\n        [borderRadius]=\"borderRadius\"\n    >\n      conteudo\n    </pm-card>`\n})"
                }
            ],
            "stories/inputs/Checkbox.stories.ts": [
                {
                    "name": "DefaultCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/Checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DisabledCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/Checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/Checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => ({\n  component: CheckboxComponent,\n  props: args,\n  template: `\n    <pm-checkbox\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    >\n        Checkbox\n    </pm-checkbox>`\n})"
                }
            ],
            "stories/inputs/ComboBox.stories.ts": [
                {
                    "name": "DefaultComboBox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/ComboBox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/ComboBox.stories.ts",
                    "type": "Story<ComboBoxComponent>",
                    "defaultValue": "(args: ComboBoxComponent) => ({\n  component: ComboBoxComponent,\n  props: args,\n  template: `\n    <pm-combo-box\n        [items]=\"items\"\n    >\n        Conteúdo\n    </pm-combo-box>`\n})"
                }
            ],
            "stories/GridList.stories.ts": [
                {
                    "name": "DefaultGridList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/GridList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "getColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/GridList.stories.ts",
                    "type": "",
                    "defaultValue": "() => MainColors.primary"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/GridList.stories.ts",
                    "type": "Story<GridListComponent>",
                    "defaultValue": "(args: GridListComponent) => ({\n  component: GridListComponent,\n  props: args,\n  template: `\n    <pm-grid-list\n        [items]=\"items\"\n        [displayStyle]=\"displayStyle\"\n        [gridHeaderReverse]=\"gridHeaderReverse\"\n        [bodyBackgroundColor]=\"bodyBackgroundColor\"\n        [actionTemplate]=\"undefined\"\n        [overflowGallery]=\"overflowGallery\"\n    >\n      conteudo\n    </pm-grid-list>`\n})"
                }
            ],
            "stories/inputs/CopyContentInput.stories.ts": [
                {
                    "name": "DefaultInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/CopyContentInput.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/CopyContentInput.stories.ts",
                    "type": "Story<CopyContentInputComponent>",
                    "defaultValue": "(args: CopyContentInputComponent) => ({\n  component: CopyContentInputComponent,\n  props: args,\n  template: `\n    <pm-copy-content-input\n        [text]=\"text\"\n        [disabled]=\"disabled\"\n    >\n        Conteúdo\n    </pm-copy-content-input>`\n})"
                }
            ],
            "stories/multi-level-dropdown-menu.stories.ts": [
                {
                    "name": "DefaultMultiLevelDropdownMenu",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/multi-level-dropdown-menu.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/multi-level-dropdown-menu.stories.ts",
                    "type": "Story<MultiLevelDropdownMenuComponent>",
                    "defaultValue": "(args: MultiLevelDropdownMenuComponent) => ({\n  component: MultiLevelDropdownMenuComponent,\n  props: args,\n  template: `\n    <pm-multi-level-dropdown-menu>\n    </pm-multi-level-dropdown-menu>`\n})"
                }
            ],
            "stories/inputs/RadioButton.stories.ts": [
                {
                    "name": "DefaultRadioButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/RadioButton.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/inputs/RadioButton.stories.ts",
                    "type": "Story<RadioButtonComponent>",
                    "defaultValue": "(args: RadioButtonComponent) => ({\n  component: RadioButtonComponent,\n  props: args,\n  template: `\n    <pm-radio-button\n        [values]=\"values\"\n        [selectedValue]=\"selectedValue\"\n    >\n        Conteúdo\n    </pm-radio-button>`\n})"
                }
            ],
            "stories/Stepper.stories.ts": [
                {
                    "name": "DefaultStepper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Stepper.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Stepper.stories.ts",
                    "type": "Story<StepperComponent>",
                    "defaultValue": "(args: StepperComponent) => ({\n  component: StepperComponent,\n  props: args,\n  template: `\n    <pm-stepper>\n      <cdk-step> <p>This is any content of \"Step 1\"</p> </cdk-step>\n      <cdk-step> <p>This is any content of \"Step 2\"</p> </cdk-step>\n    </pm-stepper>`\n})"
                }
            ],
            "stories/DraggableList.stories.ts": [
                {
                    "name": "disabledDragging",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ExampleList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoIndexStringList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "Story<DraggableListComponent>",
                    "defaultValue": "(args: DraggableListComponent) => ({\n  component: DraggableListComponent,\n  props: args,\n  template: `\n    <pm-draggable-list\n        [showIndex]=\"showIndex\"\n        [itemActionLabel]=\"itemActionLabel\"\n        [itemMainLabel]=\"itemMainLabel\"\n        [itemSubLabel]=\"itemSubLabel\"\n        [actions]=\"actions\"\n        [itemList]=\"itemList\"\n        [roundedBorders]=\"roundedBorders\"\n        [enableDragging]=\"enableDragging\"\n        [enableSelection]=\"enableSelection\"\n    >\n      conteudo\n    </pm-draggable-list>`\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/components/src/models/colors.ts": [
                {
                    "name": "MainColors",
                    "childs": [
                        {
                            "name": "primary",
                            "value": "primary"
                        },
                        {
                            "name": "secondary",
                            "value": "secondary"
                        },
                        {
                            "name": "success",
                            "value": "success"
                        },
                        {
                            "name": "info",
                            "value": "info"
                        },
                        {
                            "name": "warning",
                            "value": "warning"
                        },
                        {
                            "name": "danger",
                            "value": "danger"
                        },
                        {
                            "name": "light",
                            "value": "light"
                        },
                        {
                            "name": "default",
                            "value": "default"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "PaleColors",
                    "childs": [
                        {
                            "name": "primaryPale",
                            "value": "primary-pale"
                        },
                        {
                            "name": "secondaryPale",
                            "value": "secondary-pale"
                        },
                        {
                            "name": "successPale",
                            "value": "success-pale"
                        },
                        {
                            "name": "infoPale",
                            "value": "info-pale"
                        },
                        {
                            "name": "warningPale",
                            "value": "warning-pale"
                        },
                        {
                            "name": "dangerPale",
                            "value": "danger-pale"
                        },
                        {
                            "name": "lightPale",
                            "value": "light-pale"
                        },
                        {
                            "name": "defaultPale",
                            "value": "default-pale"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "SaturatedColors",
                    "childs": [
                        {
                            "name": "primarySat",
                            "value": "primary-sat"
                        },
                        {
                            "name": "secondarySat",
                            "value": "secondary-sat"
                        },
                        {
                            "name": "successSat",
                            "value": "success-sat"
                        },
                        {
                            "name": "infoSat",
                            "value": "info-sat"
                        },
                        {
                            "name": "warningSat",
                            "value": "warning-sat"
                        },
                        {
                            "name": "dangerSat",
                            "value": "danger-sat"
                        },
                        {
                            "name": "lightSat",
                            "value": "light-sat"
                        },
                        {
                            "name": "defaultSat",
                            "value": "default-sat"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "StateColors",
                    "childs": [
                        {
                            "name": "primaryStates",
                            "value": "primary-states"
                        },
                        {
                            "name": "secondaryStates",
                            "value": "secondary-states"
                        },
                        {
                            "name": "successStates",
                            "value": "success-states"
                        },
                        {
                            "name": "infoStates",
                            "value": "info-states"
                        },
                        {
                            "name": "warningStates",
                            "value": "warning-states"
                        },
                        {
                            "name": "dangerStates",
                            "value": "danger-states"
                        },
                        {
                            "name": "lightStates",
                            "value": "light-states"
                        },
                        {
                            "name": "defaultStates",
                            "value": "default-states"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                }
            ],
            "projects/components/src/lib/radio-button/radio-button.component.ts": [
                {
                    "name": "OrientationEnum",
                    "childs": [
                        {
                            "name": "X",
                            "value": "horizontal"
                        },
                        {
                            "name": "Y",
                            "value": "vertical"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/lib/radio-button/radio-button.component.ts"
                }
            ],
            "projects/components/src/models/sizes.ts": [
                {
                    "name": "Sizes",
                    "childs": [
                        {
                            "name": "xs",
                            "value": "xs"
                        },
                        {
                            "name": "sm",
                            "value": "sm"
                        },
                        {
                            "name": "md",
                            "value": "md"
                        },
                        {
                            "name": "lg",
                            "value": "lg"
                        },
                        {
                            "name": "xl",
                            "value": "xl"
                        },
                        {
                            "name": "xxl",
                            "value": "xxl"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/sizes.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/components/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 60,
                "coverageCount": "6/10",
                "status": "good"
            },
            {
                "filePath": "projects/components/src/lib/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/combo-box/combo-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComboBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/combo-box/combo-box.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComboItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ComponentsService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/copy-content-input/copy-content-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CopyContentInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/draggable-list/draggable-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DraggableListComponent",
                "coveragePercent": 22,
                "coverageCount": "6/27",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/grid-list/grid-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/grid-list/grid-list.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GridListItem",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/multi-level-dropdown-menu/multi-level-dropdown-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiLevelDropdownMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/stepper/stepper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StepperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 24,
                "coverageCount": "8/33",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabledDragging",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExampleList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoIndexStringList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/GridList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultGridList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/GridList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/GridList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultStepper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActionsTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActionsTableTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExampleTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExpandedDetailsTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExpandedDetailsTableTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThumbnailTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/ComboBox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultComboBox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/ComboBox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/CopyContentInput.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/CopyContentInput.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultRadioButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BusyButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DangerButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButtonTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InfoButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LightButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/inputs/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/multi-level-dropdown-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultMultiLevelDropdownMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/multi-level-dropdown-menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}