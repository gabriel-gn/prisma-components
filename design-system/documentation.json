{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "ComponentsService",
            "id": "injectable-ComponentsService-b7227a2afcbe83ba2f5742aac484e6d1",
            "file": "projects/components/src/lib/components.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentsService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-18a4d08ee181600b68f5a15890d16e21",
            "file": "projects/components/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "busy",
                    "defaultValue": "false",
                    "line": 12
                },
                {
                    "name": "busyText",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 10,
                    "type": "string | null"
                },
                {
                    "name": "type",
                    "defaultValue": "MainColors.default",
                    "line": 11,
                    "type": "MainColors"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, Output, EventEmitter} from '@angular/core';\nimport {MainColors} from '../../models/colors';\n\n@Component({\n  selector: 'pm-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n  @Input('label') label: string | null = '';  // Usada s√≥ pra aparecer no storybook\n  @Input('type') type: MainColors = MainColors.default;\n  @Input('busy') busy = false;\n  @Input('busyText') busyText: string;\n  // @Output() onClick = new EventEmitter<any>();\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "//button {\n//  background: blue;\n//  padding: 1rem 2rem;\n//  border-radius: 3px;\n//  appearance: none;\n//  border: 0;\n//  -webkit-appearance: none;\n//  -moz-appearance: none;\n//  font-size: 1.5rem;\n//  letter-spacing: 1px;\n//  color: white;\n//  box-shadow: 0 4px 10px rgba(55, 55, 55, 0.3),\n//  0 6px 35px rgba(55, 55, 200, 0.7);\n//  cursor: pointer;\n//\n//  &.make-pink {\n//    background: #ff00a2;\n//    box-shadow: 0 4px 10px rgba(55, 55, 55, 0.3), 0 6px 35px rgb(200 55 150 / 70%);\n//  }\n//}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "templateData": "<button [className]=\"type ? 'btn btn-' + type : 'btn'\" [disabled]=\"busy\">\n  <ng-container *ngIf=\"busy; else buttonContent\">\n    <span  class=\"spinner-border spinner-border-sm mx-2\" role=\"status\" aria-hidden=\"true\"></span>\n    {{busyText ? busyText : ''}}\n  </ng-container>\n</button>\n\n<ng-template #buttonContent>\n  <ng-container *ngIf=\"label; else noLabel\">\n    {{label}}\n  </ng-container>\n</ng-template>\n\n<ng-template #noLabel>\n  <ng-content></ng-content>\n</ng-template>\n\n"
        },
        {
            "name": "ComponentsComponent",
            "id": "component-ComponentsComponent-b10d994f930dcdc791bfa10ecd8f2428",
            "file": "projects/components/src/lib/components.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-components",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  components works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'pm-components',\n  template: `\n    <p>\n      components works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class ComponentsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DraggableListComponent",
            "id": "component-DraggableListComponent-fdd1dba7c4c2f90209f6213426c0ded4",
            "file": "projects/components/src/lib/draggable-list/draggable-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-draggable-list",
            "styleUrls": [
                "./draggable-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./draggable-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "line": 21,
                    "type": "any[]"
                },
                {
                    "name": "itemActionLabel",
                    "line": 18
                },
                {
                    "name": "itemList",
                    "line": 17,
                    "type": "any[]"
                },
                {
                    "name": "itemMainLabel",
                    "line": 19
                },
                {
                    "name": "itemSubLabel",
                    "line": 20
                },
                {
                    "name": "showIndex",
                    "defaultValue": "true",
                    "line": 16
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contextMenu",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contextMenu'"
                        }
                    ]
                },
                {
                    "name": "overlay",
                    "type": "Overlay",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "overlayRef",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "viewContainerRef",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeContextMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "description": "<p>Fecha o context menu</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "description": "<p>Evento de drop do cdkDragDrop</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1202,
                                "end": 1207,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "pos": 1196,
                                "end": 1201,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: evento de drop</p>\n"
                        }
                    ]
                },
                {
                    "name": "formatItemStringParameters",
                    "args": [
                        {
                            "name": "originalString",
                            "type": "string"
                        },
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 97,
                    "description": "<p>Caso o &#39;originalString&#39; tenha &#39;{algumacoisa}&#39;, √© substitu√≠do por &#39;${item[algumacoisa]}&#39;\nFazendo assim ser poss√≠vel strings din√¢nimcas de acordo com o objeto\nCaso o &#39;item&#39; seja string, √© poss√≠vel ele ser din√¢mico usando {this}</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "originalString",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemList",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "openContextMenu",
                    "args": [
                        {
                            "type": "MouseEvent"
                        },
                        {
                            "name": "context",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItemList",
                    "args": [
                        {
                            "name": "itemList",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, TemplateRef, ViewChild, ViewContainerRef} from '@angular/core';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {Overlay, OverlayRef} from '@angular/cdk/overlay';\n\n@Component({\n  selector: 'pm-draggable-list',\n  templateUrl: './draggable-list.component.html',\n  styleUrls: ['./draggable-list.component.scss']\n})\nexport class DraggableListComponent {\n\n  @Input('showIndex') showIndex = true;\n  @Input('itemList') itemList: any[];\n  @Input('itemActionLabel') itemActionLabel;\n  @Input('itemMainLabel') itemMainLabel;\n  @Input('itemSubLabel') itemSubLabel;\n  @Input('actions') actions: any[];\n\n  sub: Subscription;\n  overlayRef: OverlayRef | null;\n  @ViewChild('contextMenu') contextMenu: TemplateRef<any>;\n\n  constructor(\n    public overlay: Overlay,\n    public viewContainerRef: ViewContainerRef,\n  ) {\n  }\n\n  public getItemList(): any[] {\n    return this.itemList;\n  }\n\n  public setItemList(itemList: any[]): void {\n    this.itemList = itemList;\n  }\n\n  /**\n   * Evento de drop do cdkDragDrop\n   * @param event: evento de drop\n   * @param profileList: lista a ser dropado\n   */\n  public drop(event: CdkDragDrop<string[]>): void {\n    moveItemInArray(this.itemList, event.previousIndex, event.currentIndex);\n  }\n\n  public openContextMenu({x, y}: MouseEvent, context): void {\n    this.closeContextMenu();\n    const positionStrategy = this.overlay.position()\n      .flexibleConnectedTo({x, y})\n      .withPositions([\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top',\n        }\n      ]);\n\n    this.overlayRef = this.overlay.create({\n      positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.close()\n    });\n\n    this.overlayRef.attach(new TemplatePortal(this.contextMenu, this.viewContainerRef, context));\n\n    this.sub = fromEvent<MouseEvent>(document, 'click')\n      .pipe(\n        filter(event => {\n          const clickTarget = event.target as HTMLElement;\n          return !!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget);\n        }),\n        take(1)\n      ).subscribe(() => this.closeContextMenu());\n  }\n\n  /**\n   * Fecha o context menu\n   */\n  public closeContextMenu(): void {\n    // tslint:disable-next-line:no-unused-expression\n    this.sub && this.sub.unsubscribe();\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.overlayRef = null;\n    }\n  }\n\n  /**\n   * Caso o 'originalString' tenha '{algumacoisa}', √© substitu√≠do por '${item[algumacoisa]}'\n   * Fazendo assim ser poss√≠vel strings din√¢nimcas de acordo com o objeto\n   * Caso o 'item' seja string, √© poss√≠vel ele ser din√¢mico usando {this}\n   */\n  public formatItemStringParameters(originalString: string, item: any): string {\n    if (typeof item !== 'string' && originalString.indexOf('{') !== -1) {\n      let result = '';\n      for (const str of originalString.split('{')) {\n        if (str.indexOf('}') !== -1) {\n          result += `${item[str.substring(0, str.indexOf('}'))]}`;\n          result += str.substring(str.indexOf('}') + 1, str.length);\n        } else {\n          result += str;\n        }\n      }\n      return result;\n    } else {\n      return originalString.replace('{this}', item);\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./draggable-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"d-flex w-100\">\n  <div *ngIf=\"showIndex\" class=\"draggable-item-index-container\">\n    <div *ngFor=\"let item of itemList, let i = index;\" class=\"draggable-item-index\">\n      <p>{{ i + 1 }}</p>\n    </div>\n  </div>\n  <div (cdkDropListDropped)=\"drop($event)\" cdkDropList class=\"table-item-container w-100\">\n    <div *ngFor=\"let item of itemList, let i = index;\" cdkDrag cdkDragBoundary=\".table-item-container\"\n         class=\"draggable-item\" (contextmenu)=\"openContextMenu($event, {$implicit: item}); $event.preventDefault();\"\n         style=\"cursor: move;\">\n      <div *cdkDragPlaceholder class=\"draggable-placeholder\"></div>\n      <div class=\"d-flex w-100\">\n        <!-- if IsMobile -> para poder reordenar os perfis apenas pelo √≠cone -->\n        <div *ngIf=\"false\" cdkDragHandle class=\"move-icon-container\">\n          <i class=\"uil uil-lg uil-draggabledots\"></i>\n        </div>\n        <div *ngIf=\"true\" class=\"move-icon-container\">\n          <i class=\"uil uil-lg uil-draggabledots\"></i>\n        </div>\n        <div class=\"w-100 align-self-center text-overflow\">\n          <p class=\"m-0\">{{ formatItemStringParameters(itemMainLabel, item) }}</p>\n          <p class=\"m-0 sub-p\">{{ formatItemStringParameters(itemSubLabel, item) }}</p>\n        </div>\n        <div class=\"d-flex ms-2\">\n          <button (click)=\"profileActionsSelect.toggle()\" class=\"btn btn-light btn-icon btn-sm ms-2\">\n            <i class=\"uil uil-md uil-ellipsis-h\"></i>\n          </button>\n          <mat-select #profileActionsSelect class=\"mat-select-btn-sm\">\n            <mat-option [hidden]=\"true\"></mat-option>\n            <ng-container *ngTemplateOutlet=\"contextActions; context: {$implicit: item}\"></ng-container>\n          </mat-select>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #contextActions let-item>\n  <mat-option *ngFor=\"let action of actions\" (click)=\"action.method(item)\">{{action.name}}</mat-option>\n</ng-template>\n\n<ng-template #contextMenu let-item>\n  <div class=\"mat-menu-panel\">\n    <mat-optgroup [label]=\"formatItemStringParameters(itemActionLabel, item)\">\n      <ng-container *ngTemplateOutlet=\"contextActions; context: {$implicit: item}\"></ng-container>\n    </mat-optgroup>\n  </div>\n</ng-template>\n"
        }
    ],
    "modules": [
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DraggableListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DraggableListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DraggableListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrismaComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComponentsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DraggableListModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ComponentsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BusyButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DefaultButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ExampleList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoIndexStringList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n    >\n        Bot√£o\n    </pm-button>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "Story<DraggableListComponent>",
                "defaultValue": "(args: DraggableListComponent) => ({\n  component: DraggableListComponent,\n  props: args,\n  template: `\n    <pm-draggable-list\n        [showIndex]=\"showIndex\"\n    >\n      conteudo\n    </pm-draggable-list>`\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MainColors",
                "childs": [
                    {
                        "name": "primary",
                        "value": "primary"
                    },
                    {
                        "name": "secondary",
                        "value": "secondary"
                    },
                    {
                        "name": "success",
                        "value": "success"
                    },
                    {
                        "name": "info",
                        "value": "info"
                    },
                    {
                        "name": "warning",
                        "value": "warning"
                    },
                    {
                        "name": "danger",
                        "value": "danger"
                    },
                    {
                        "name": "light",
                        "value": "light"
                    },
                    {
                        "name": "default",
                        "value": "default"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "PaleColors",
                "childs": [
                    {
                        "name": "primaryPale",
                        "value": "primary-pale"
                    },
                    {
                        "name": "secondaryPale",
                        "value": "secondary-pale"
                    },
                    {
                        "name": "successPale",
                        "value": "success-pale"
                    },
                    {
                        "name": "infoPale",
                        "value": "info-pale"
                    },
                    {
                        "name": "warningPale",
                        "value": "warning-pale"
                    },
                    {
                        "name": "dangerPale",
                        "value": "danger-pale"
                    },
                    {
                        "name": "lightPale",
                        "value": "light-pale"
                    },
                    {
                        "name": "defaultPale",
                        "value": "default-pale"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "SaturatedColors",
                "childs": [
                    {
                        "name": "primarySat",
                        "value": "primary-sat"
                    },
                    {
                        "name": "secondarySat",
                        "value": "secondary-sat"
                    },
                    {
                        "name": "successSat",
                        "value": "success-sat"
                    },
                    {
                        "name": "infoSat",
                        "value": "info-sat"
                    },
                    {
                        "name": "warningSat",
                        "value": "warning-sat"
                    },
                    {
                        "name": "dangerSat",
                        "value": "danger-sat"
                    },
                    {
                        "name": "lightSat",
                        "value": "light-sat"
                    },
                    {
                        "name": "defaultSat",
                        "value": "default-sat"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "StateColors",
                "childs": [
                    {
                        "name": "primaryStates",
                        "value": "primary-states"
                    },
                    {
                        "name": "secondaryStates",
                        "value": "secondary-states"
                    },
                    {
                        "name": "successStates",
                        "value": "success-states"
                    },
                    {
                        "name": "infoStates",
                        "value": "info-states"
                    },
                    {
                        "name": "warningStates",
                        "value": "warning-states"
                    },
                    {
                        "name": "dangerStates",
                        "value": "danger-states"
                    },
                    {
                        "name": "lightStates",
                        "value": "light-states"
                    },
                    {
                        "name": "defaultStates",
                        "value": "default-states"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            }
        ],
        "groupedVariables": {
            "stories/Button.stories.ts": [
                {
                    "name": "BusyButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DefaultButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n    >\n        Bot√£o\n    </pm-button>`\n})"
                }
            ],
            "projects/components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "type": "literal type"
                }
            ],
            "stories/DraggableList.stories.ts": [
                {
                    "name": "ExampleList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoIndexStringList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "Story<DraggableListComponent>",
                    "defaultValue": "(args: DraggableListComponent) => ({\n  component: DraggableListComponent,\n  props: args,\n  template: `\n    <pm-draggable-list\n        [showIndex]=\"showIndex\"\n    >\n      conteudo\n    </pm-draggable-list>`\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/components/src/models/colors.ts": [
                {
                    "name": "MainColors",
                    "childs": [
                        {
                            "name": "primary",
                            "value": "primary"
                        },
                        {
                            "name": "secondary",
                            "value": "secondary"
                        },
                        {
                            "name": "success",
                            "value": "success"
                        },
                        {
                            "name": "info",
                            "value": "info"
                        },
                        {
                            "name": "warning",
                            "value": "warning"
                        },
                        {
                            "name": "danger",
                            "value": "danger"
                        },
                        {
                            "name": "light",
                            "value": "light"
                        },
                        {
                            "name": "default",
                            "value": "default"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "PaleColors",
                    "childs": [
                        {
                            "name": "primaryPale",
                            "value": "primary-pale"
                        },
                        {
                            "name": "secondaryPale",
                            "value": "secondary-pale"
                        },
                        {
                            "name": "successPale",
                            "value": "success-pale"
                        },
                        {
                            "name": "infoPale",
                            "value": "info-pale"
                        },
                        {
                            "name": "warningPale",
                            "value": "warning-pale"
                        },
                        {
                            "name": "dangerPale",
                            "value": "danger-pale"
                        },
                        {
                            "name": "lightPale",
                            "value": "light-pale"
                        },
                        {
                            "name": "defaultPale",
                            "value": "default-pale"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "SaturatedColors",
                    "childs": [
                        {
                            "name": "primarySat",
                            "value": "primary-sat"
                        },
                        {
                            "name": "secondarySat",
                            "value": "secondary-sat"
                        },
                        {
                            "name": "successSat",
                            "value": "success-sat"
                        },
                        {
                            "name": "infoSat",
                            "value": "info-sat"
                        },
                        {
                            "name": "warningSat",
                            "value": "warning-sat"
                        },
                        {
                            "name": "dangerSat",
                            "value": "danger-sat"
                        },
                        {
                            "name": "lightSat",
                            "value": "light-sat"
                        },
                        {
                            "name": "defaultSat",
                            "value": "default-sat"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "StateColors",
                    "childs": [
                        {
                            "name": "primaryStates",
                            "value": "primary-states"
                        },
                        {
                            "name": "secondaryStates",
                            "value": "secondary-states"
                        },
                        {
                            "name": "successStates",
                            "value": "success-states"
                        },
                        {
                            "name": "infoStates",
                            "value": "info-states"
                        },
                        {
                            "name": "warningStates",
                            "value": "warning-states"
                        },
                        {
                            "name": "dangerStates",
                            "value": "danger-states"
                        },
                        {
                            "name": "lightStates",
                            "value": "light-states"
                        },
                        {
                            "name": "defaultStates",
                            "value": "default-states"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/components/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ComponentsService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/draggable-list/draggable-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DraggableListComponent",
                "coveragePercent": 15,
                "coverageCount": "3/19",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BusyButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExampleList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoIndexStringList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}