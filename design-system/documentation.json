{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "ComponentsService",
            "id": "injectable-ComponentsService-b7227a2afcbe83ba2f5742aac484e6d1",
            "file": "projects/components/src/lib/components.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentsService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-18a4d08ee181600b68f5a15890d16e21",
            "file": "projects/components/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "busy",
                    "defaultValue": "false",
                    "line": 12
                },
                {
                    "name": "busyText",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 10,
                    "type": "string | null"
                },
                {
                    "name": "type",
                    "defaultValue": "MainColors.default",
                    "line": 11,
                    "type": "MainColors"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, Output, EventEmitter} from '@angular/core';\nimport {MainColors} from '../../models/colors';\n\n@Component({\n  selector: 'pm-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n  @Input('label') label: string | null = '';  // Usada s√≥ pra aparecer no storybook\n  @Input('type') type: MainColors = MainColors.default;\n  @Input('busy') busy = false;\n  @Input('busyText') busyText: string;\n  // @Output() onClick = new EventEmitter<any>();\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "//button {\n//  background: blue;\n//  padding: 1rem 2rem;\n//  border-radius: 3px;\n//  appearance: none;\n//  border: 0;\n//  -webkit-appearance: none;\n//  -moz-appearance: none;\n//  font-size: 1.5rem;\n//  letter-spacing: 1px;\n//  color: white;\n//  box-shadow: 0 4px 10px rgba(55, 55, 55, 0.3),\n//  0 6px 35px rgba(55, 55, 200, 0.7);\n//  cursor: pointer;\n//\n//  &.make-pink {\n//    background: #ff00a2;\n//    box-shadow: 0 4px 10px rgba(55, 55, 55, 0.3), 0 6px 35px rgb(200 55 150 / 70%);\n//  }\n//}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "templateData": "<button [className]=\"type ? 'btn btn-' + type : 'btn'\" [disabled]=\"busy\">\n  <ng-container *ngIf=\"busy; else buttonContent\">\n    <span  class=\"spinner-border spinner-border-sm mx-2\" role=\"status\" aria-hidden=\"true\"></span>\n    {{busyText ? busyText : ''}}\n  </ng-container>\n</button>\n\n<ng-template #buttonContent>\n  <ng-container *ngIf=\"label; else noLabel\">\n    {{label}}\n  </ng-container>\n</ng-template>\n\n<ng-template #noLabel>\n  <ng-content></ng-content>\n</ng-template>\n\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-51774af61e4b842886e893ae3df7b183",
            "file": "projects/components/src/lib/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "line": 10
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 13
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 11,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "disabledChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 14,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "onCheckedChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'pm-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent {\n\n  @Input() checked = false;\n  @Output() checkedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() onCheckedChange = new EventEmitter();\n  @Input() disabled = false;\n  @Output() disabledChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor() {\n  }\n\n  public setValue(value: boolean): void {\n    this.checked = value;\n    this.checkedChange.emit(this.checked);\n    this.onCheckedChange.emit(this.checked);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "templateData": "<div class=\"form-check\" [ngClass]=\"{'disabled': disabled}\" (click)=\"$event.stopPropagation();\">\n  <label class=\"form-check-label\">\n    <input (change)=\"setValue($event.target['checked'])\"\n           [(ngModel)]=\"checked\"\n           [ngModelOptions]=\"{standalone: true}\"\n           [disabled]=\"disabled\"\n           class=\"form-check-input\" type=\"checkbox\">\n    <span class=\"form-check-sign\"></span>\n    <ng-content></ng-content>\n  </label>\n</div>\n"
        },
        {
            "name": "ComponentsComponent",
            "id": "component-ComponentsComponent-b10d994f930dcdc791bfa10ecd8f2428",
            "file": "projects/components/src/lib/components.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-components",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  components works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'pm-components',\n  template: `\n    <p>\n      components works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class ComponentsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DraggableListComponent",
            "id": "component-DraggableListComponent-7f67272b7828fde27164e5bba92460c2",
            "file": "projects/components/src/lib/draggable-list/draggable-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-draggable-list",
            "styleUrls": [
                "./draggable-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./draggable-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "line": 26,
                    "type": "any[]"
                },
                {
                    "name": "enableDragging",
                    "defaultValue": "true",
                    "line": 16
                },
                {
                    "name": "enableSelection",
                    "defaultValue": "true",
                    "line": 17
                },
                {
                    "name": "itemActionLabel",
                    "line": 23
                },
                {
                    "name": "itemList",
                    "line": 22,
                    "type": "any[]"
                },
                {
                    "name": "itemMainLabel",
                    "line": 24
                },
                {
                    "name": "itemSubLabel",
                    "line": 25
                },
                {
                    "name": "roundedBorders",
                    "defaultValue": "true",
                    "line": 28
                },
                {
                    "name": "showIndex",
                    "defaultValue": "true",
                    "line": 21
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelectedChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenu",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contextMenu'"
                        }
                    ]
                },
                {
                    "name": "overlay",
                    "type": "Overlay",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "overlayRef",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedItem",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "viewContainerRef",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeContextMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "description": "<p>Fecha o context menu</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "description": "<p>Evento de drop do cdkDragDrop</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1775,
                                "end": 1780,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "pos": 1769,
                                "end": 1774,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: evento de drop</p>\n"
                        }
                    ]
                },
                {
                    "name": "formatItemStringParameters",
                    "args": [
                        {
                            "name": "originalString",
                            "type": "string"
                        },
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "description": "<p>Caso o originalString tenha {algumacoisa}, √© substitu√≠do por ${item[algumacoisa]}\nFazendo assim ser poss√≠vel strings din√¢nimcas de acordo com o objeto\nCaso o item seja string, √© poss√≠vel ele ser din√¢mico usando {this}</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "originalString",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemList",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getSelectedItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSelectedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>Verifica se o item √© o atual selecionado</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4243,
                                "end": 4247,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 4237,
                                "end": 4242,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item a ser comparado com o atual selecionado</p>\n"
                        }
                    ]
                },
                {
                    "name": "openContextMenu",
                    "args": [
                        {
                            "type": "MouseEvent"
                        },
                        {
                            "name": "context",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "description": "<p>Abre o context Menu</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 2132,
                                "end": 2139,
                                "flags": 0,
                                "escapedText": "context"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 2126,
                                "end": 2131,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: valores que ser√£o passados para o context menu</p>\n"
                        }
                    ]
                },
                {
                    "name": "setItemList",
                    "args": [
                        {
                            "name": "itemList",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "description": "<p>Setta o novo item como selecionado</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1532,
                                "end": 1536,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 1526,
                                "end": 1531,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item novo</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewContainerRef} from '@angular/core';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {Overlay, OverlayRef} from '@angular/cdk/overlay';\n\n@Component({\n  selector: 'pm-draggable-list',\n  templateUrl: './draggable-list.component.html',\n  styleUrls: ['./draggable-list.component.scss']\n})\nexport class DraggableListComponent {\n\n  @Input('enableDragging') enableDragging = true;\n  @Input('enableSelection') enableSelection = true;\n  @Output() onSelectedChange = new EventEmitter();\n  private selectedItem: any;\n\n  @Input('showIndex') showIndex = true;\n  @Input('itemList') itemList: any[];\n  @Input('itemActionLabel') itemActionLabel;\n  @Input('itemMainLabel') itemMainLabel;\n  @Input('itemSubLabel') itemSubLabel;\n  @Input('actions') actions: any[];\n\n  @Input('roundedBorders') roundedBorders = true;\n\n  sub: Subscription;\n  overlayRef: OverlayRef | null;\n  @ViewChild('contextMenu') contextMenu: TemplateRef<any>;\n\n  constructor(\n    public overlay: Overlay,\n    public viewContainerRef: ViewContainerRef,\n  ) {\n  }\n\n  public getItemList(): any[] {\n    return this.itemList;\n  }\n\n  public setItemList(itemList: any[]): void {\n    this.itemList = itemList;\n  }\n\n  public getSelectedItem(): any {\n    return this.selectedItem;\n  }\n\n  /**\n   * Setta o novo item como selecionado\n   * @param item: item novo\n   */\n  public setSelectedItem(item: any): void {\n    if (this.enableSelection === true) {\n      this.selectedItem = item;\n      this.onSelectedChange.emit(item);\n    }\n  }\n\n  /**\n   * Evento de drop do cdkDragDrop\n   * @param event: evento de drop\n   * @param profileList: lista a ser dropado\n   */\n  public drop(event: CdkDragDrop<string[]>): void {\n    if (this.enableDragging) {\n      moveItemInArray(this.itemList, event.previousIndex, event.currentIndex);\n    }\n  }\n\n  /**\n   * Abre o context Menu\n   * @param x: posi√ß√£o x do mouse\n   * @param y: posi√ß√£o y do mouse\n   * @param context: valores que ser√£o passados para o context menu\n   */\n  public openContextMenu({x, y}: MouseEvent, context): void {\n    this.closeContextMenu();\n    const positionStrategy = this.overlay.position()\n      .flexibleConnectedTo({x, y})\n      .withPositions([\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top',\n        }\n      ]);\n\n    this.overlayRef = this.overlay.create({\n      positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.close()\n    });\n\n    this.overlayRef.attach(new TemplatePortal(this.contextMenu, this.viewContainerRef, context));\n\n    this.sub = fromEvent<MouseEvent>(document, 'click')\n      .pipe(\n        filter(event => {\n          const clickTarget = event.target as HTMLElement;\n          return !!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget);\n        }),\n        take(1)\n      ).subscribe(() => this.closeContextMenu());\n  }\n\n  /**\n   * Fecha o context menu\n   */\n  public closeContextMenu(): void {\n    // tslint:disable-next-line:no-unused-expression\n    this.sub && this.sub.unsubscribe();\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.overlayRef = null;\n    }\n  }\n\n  /**\n   * Caso o originalString tenha {algumacoisa}, √© substitu√≠do por ${item[algumacoisa]}\n   * Fazendo assim ser poss√≠vel strings din√¢nimcas de acordo com o objeto\n   * Caso o item seja string, √© poss√≠vel ele ser din√¢mico usando {this}\n   */\n  public formatItemStringParameters(originalString: string, item: any): string {\n    if (typeof item !== 'string' && originalString.indexOf('{') !== -1) {\n      let result = '';\n      for (const str of originalString.split('{')) {\n        if (str.indexOf('}') !== -1) {\n          result += `${item[str.substring(0, str.indexOf('}'))]}`;\n          result += str.substring(str.indexOf('}') + 1, str.length);\n        } else {\n          result += str;\n        }\n      }\n      return result;\n    } else {\n      return originalString.replace('{this}', item);\n    }\n  }\n\n  /**\n   * Verifica se o item √© o atual selecionado\n   * @param item: item a ser comparado com o atual selecionado\n   */\n  public isSelectedItem(item: any): boolean {\n    if (typeof item !== 'undefined') {\n      return this.selectedItem === item;\n    } else {\n      return false;\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./draggable-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"d-flex w-100\">\n  <div *ngIf=\"showIndex\"\n       class=\"draggable-item-index-container\"\n       [ngClass]=\"{rounded: roundedBorders && !showIndex, 'rounded-left': roundedBorders && showIndex}\"\n  >\n    <div *ngFor=\"let item of itemList, let i = index;\" class=\"draggable-item-index\">\n      <p>{{ i + 1 }}</p>\n    </div>\n  </div>\n  <div (cdkDropListDropped)=\"drop($event)\" cdkDropList\n       class=\"table-item-container w-100\"\n       [ngClass]=\"{rounded: roundedBorders && !showIndex, 'rounded-right': roundedBorders && showIndex}\">\n    <div *ngFor=\"let item of itemList, let i = index;\" cdkDrag cdkDragBoundary=\".table-item-container\" [cdkDragDisabled]=\"enableDragging === false\"\n         class=\"draggable-item\" (contextmenu)=\"openContextMenu($event, {$implicit: item}); $event.preventDefault();\"\n         [ngClass]=\"{'draggable-item-selected': isSelectedItem(item)}\"\n         (click)=\"setSelectedItem(item)\"\n         [ngStyle]=\"{'cursor': enableDragging ? 'move' : (enableSelection ? 'pointer' : null)}\">\n      <div *cdkDragPlaceholder class=\"draggable-placeholder\"></div>\n      <div class=\"d-flex w-100\">\n        <!-- if IsMobile -> para poder reordenar os perfis apenas pelo √≠cone -->\n        <div *ngIf=\"false\" cdkDragHandle class=\"move-icon-container\">\n          <i class=\"uil uil-lg uil-draggabledots\"></i>\n        </div>\n        <div *ngIf=\"enableDragging\" class=\"move-icon-container\">\n          <i class=\"uil uil-lg uil-draggabledots\"></i>\n        </div>\n        <div class=\"w-100 align-self-center text-overflow\">\n          <p class=\"m-0\">{{ formatItemStringParameters(itemMainLabel, item) }}</p>\n          <p class=\"m-0 sub-p\">{{ formatItemStringParameters(itemSubLabel, item) }}</p>\n        </div>\n        <div class=\"d-flex ms-2\">\n          <button (click)=\"actionsSelect.toggle()\" class=\"btn btn-light btn-icon btn-sm ms-2\">\n            <i class=\"uil uil-md uil-ellipsis-h\"></i>\n          </button>\n          <mat-select #actionsSelect class=\"mat-select-btn-sm\">\n            <mat-option [hidden]=\"true\"></mat-option>\n            <ng-container *ngTemplateOutlet=\"contextActions; context: {$implicit: item}\"></ng-container>\n          </mat-select>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #contextActions let-item>\n  <mat-option *ngFor=\"let action of actions\" (click)=\"action.method(item)\">{{formatItemStringParameters(action.name, item)}}</mat-option>\n</ng-template>\n\n<ng-template #contextMenu let-item>\n  <div class=\"mat-menu-panel\">\n    <mat-optgroup [label]=\"formatItemStringParameters(itemActionLabel, item)\">\n      <ng-container *ngTemplateOutlet=\"contextActions; context: {$implicit: item}\"></ng-container>\n    </mat-optgroup>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-b9d11a0a4c3498fddea93172759d6c56",
            "file": "projects/components/src/lib/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsTemplate",
                    "line": 37,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "backgroundColor",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "borderRadius",
                    "line": 39,
                    "type": "Sizes"
                },
                {
                    "name": "columnNames",
                    "defaultValue": "[]",
                    "line": 31,
                    "type": "string[]"
                },
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "line": 30,
                    "type": "string[]"
                },
                {
                    "name": "imageColumns",
                    "defaultValue": "[]",
                    "line": 32,
                    "type": "string[]"
                },
                {
                    "name": "imageHeight",
                    "line": 33,
                    "type": ""
                },
                {
                    "name": "itemList",
                    "defaultValue": "[]",
                    "line": 38,
                    "type": "any"
                },
                {
                    "name": "numberFormat",
                    "defaultValue": "'1.2-2'",
                    "line": 35
                },
                {
                    "name": "numberPrefix",
                    "defaultValue": "''",
                    "line": 36
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "line": 34
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemListChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "doubleLabelCell",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'doubleLabelCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "expandedRow",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formattedNumberCell",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formattedNumberCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "imageCell",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imageCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "isExpansionDetailRow",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "singleLabelCell",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'singleLabelCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "table",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'table', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disableHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "description": "<p>Some com a linha de header</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "enableHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "description": "<p>Mostra a linha de header</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getCellTemplate",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        },
                        {
                            "name": "column",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "TemplateRef<any>",
                    "typeParameters": [],
                    "line": 116,
                    "description": "<p>Retorna o template que ser√° renderizada a celula de acordo com o input de item e coluna</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3222,
                                "end": 3226,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 3216,
                                "end": 3221,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item da lista de itens</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3263,
                                "end": 3269,
                                "flags": 0,
                                "escapedText": "column"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3257,
                                "end": 3262,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: propriedade do item</p>\n"
                        }
                    ]
                },
                {
                    "name": "getItemList",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 84,
                    "description": "<p>Retorna a lista atual de itens na tabela</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "reloadExpandedDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "description": "<p>Reconstroi os elementos da tabela para incluir o &quot;detail row&quot; e deixar ela expans√≠vel</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2286,
                                "end": 2293,
                                "flags": 0,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setItemList",
                    "args": [
                        {
                            "name": "itemList",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "description": "<p>Troca a lista de itens da tabela</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {Sizes} from '../../models/sizes';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {MatTable, MatTableDataSource} from '@angular/material/table';\n\n@Component({\n  selector: 'pm-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '10px', visibility: 'visible'})),\n      state('expanded', style({height: '50px', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class TableComponent implements AfterViewInit {\n\n  @Output() onItemListChange = new EventEmitter();\n  @Input() columns: string[] = [];\n  @Input() columnNames: string[] = [];\n  @Input() imageColumns: string[] = [];\n  @Input() imageHeight: '50px';\n  @Input() showHeader = true;\n  @Input() numberFormat = '1.2-2';\n  @Input() numberPrefix = '';\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() itemList: any = [];\n  @Input() borderRadius: Sizes;\n  @Input() backgroundColor: string;\n\n  @ViewChild('table', {static: true}) table: MatTable<any>;\n  @ViewChild('singleLabelCell', {static: true}) singleLabelCell: TemplateRef<any>;\n  @ViewChild('doubleLabelCell', {static: true}) doubleLabelCell: TemplateRef<any>;\n  @ViewChild('imageCell', {static: true}) imageCell: TemplateRef<any>;\n  @ViewChild('formattedNumberCell', {static: true}) formattedNumberCell: TemplateRef<any>;\n\n  public expandedRow: any;\n  // tslint:disable-next-line:ban-types\n  isExpansionDetailRow = (i: number, row: Object) => row.hasOwnProperty('detailRow');\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n  }\n\n  ngAfterViewInit(): void {\n    if (typeof this.actionsTemplate !== 'undefined') {\n      this.columns.push('ACTIONS');\n      this.columnNames.push('');\n    }\n    this.reloadExpandedDetail();\n  }\n\n  public setSelectedRow(row: any): void {\n    console.log(row);\n    this.expandedRow = row;\n  }\n\n  /**\n   * Reconstroi os elementos da tabela para incluir o \"detail row\" e deixar ela expans√≠vel\n   * @private\n   */\n  private reloadExpandedDetail(): void {\n    const newItems = [];\n    this.itemList.forEach(element => newItems.push(element, { detailRow: true, element }));\n    this.itemList = new MatTableDataSource(newItems);\n    this.changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Retorna a lista atual de itens na tabela\n   */\n  public getItemList(): any[] {\n    return this.itemList;\n  }\n\n  /**\n   * Troca a lista de itens da tabela\n   */\n  public setItemList(itemList: any[]): void {\n    this.itemList = itemList;\n    this.reloadExpandedDetail();\n    this.onItemListChange.emit(this.itemList);\n  }\n\n  /**\n   * Mostra a linha de header\n   */\n  public enableHeader(): void {\n    this.showHeader = true;\n  }\n\n  /**\n   * Some com a linha de header\n   */\n  public disableHeader(): void {\n    this.showHeader = false;\n  }\n\n  /**\n   * Retorna o template que ser√° renderizada a celula de acordo com o input de item e coluna\n   * @param item: item da lista de itens\n   * @param column: propriedade do item\n   */\n  public getCellTemplate(item: any, column: string): TemplateRef<any> {\n    if (column === 'ACTIONS') {\n      return this.actionsTemplate;\n    } else if (Array.isArray(item[column])) {\n      return this.doubleLabelCell;\n    } else {\n      if (this.imageColumns.includes(column)) {\n        return this.imageCell;\n      } else {\n        if (!isNaN(item[column])) {\n          return this.formattedNumberCell;\n        } else {\n          return this.singleLabelCell;\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".prisma-table {\n  width: 100%;\n  border-collapse: collapse;\n  overflow:hidden !important;\n\n  &.mat-table {\n    background-color: transparent;\n  }\n\n  mat-header-cell {\n    font-size: 16px;\n    font-weight: 600;\n  }\n\n  mat-cell {\n    &.disabled {\n      background-color: var(--color-gray-light);\n\n      * {\n        color: var(--color-gray-dark) !important;\n      }\n    }\n  }\n\n  .main-label {\n    margin: 0px;\n    color: rgba(0, 0, 0, 0.87);\n    font-size: 14px;\n  }\n\n  .sub-label {\n    margin: 0px;\n    color: #c0c0c0;\n  }\n}\n\n.element-row {\n  position: relative;\n}\n\n.element-row:not(.expanded) {\n  cursor: pointer;\n}\n\n.element-row:not(.expanded):hover {\n  background: #f5f5f5;\n}\n\n.element-row.expanded {\n  border-bottom-color: transparent;\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<mat-table #table [dataSource]=\"itemList\" class=\"prisma-table\"\n       [ngStyle]=\"{'border-radius': borderRadius ? 'var(--border-radius-' + borderRadius + ')' : null, 'background-color': backgroundColor ? backgroundColor : null}\"\n>\n\n  <ng-container *ngFor=\"let column of columns; let i = index;\">\n    <ng-container matColumnDef=\"{{column}}\">\n      <mat-header-cell *matHeaderCellDef>{{columnNames ? columnNames[i] : column}}</mat-header-cell>\n      <mat-cell *matCellDef=\"let item\" [ngClass]=\"{'disabled': item?.disabled === true}\">\n        <ng-container\n          *ngTemplateOutlet=\"getCellTemplate(item, column);\n          context: {$implicit: item, column: column}\">\n        </ng-container>\n      </mat-cell>\n    </ng-container>\n  </ng-container>\n\n  <ng-container matColumnDef=\"expandedDetail\">\n    <mat-cell *matCellDef=\"let item\">\n      <ng-container *ngTemplateOutlet=\"dummyExpandedItem; context: {$implicit: item}\"></ng-container>\n    </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"columns\" [ngClass]=\"{'d-none': !showHeader}\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: columns;\"\n           class=\"element-row\"\n           [class.expanded]=\"expandedRow == row\"\n           (click)=\"setSelectedRow(row)\"\n  ></mat-row>\n  <mat-row *matRowDef=\"let row; columns: ['expandedDetail']; when: isExpansionDetailRow\"\n           [@detailExpand]=\"row == expandedRow ? 'expanded' : 'collapsed'\"\n           (click)=\"setSelectedRow(row)\"\n  >\n  </mat-row>\n</mat-table>\n\n<ng-template #dummyExpandedItem let-item>\n  <p>{{item.price}}</p>\n  <p>xD</p>\n</ng-template>\n\n<ng-template #imageCell let-item let-column=\"column\">\n  <img [attr.src]=\"item[column]\" [attr.alt]=\"item[column]\"\n  class=\"img-fluid my-2\" [ngStyle]=\"{'height': imageHeight ? imageHeight : '50px', 'max-height': imageHeight ? imageHeight : '50px'}\">\n</ng-template>\n\n<ng-template #singleLabelCell let-item let-column=\"column\">\n  <p class=\"main-label\">{{item[column]}}</p>\n</ng-template>\n\n<ng-template #doubleLabelCell let-item let-column=\"column\">\n  <div class=\"d-block\">\n    <p class=\"main-label\">{{item[column][0]}}</p>\n    <p class=\"sub-label\">{{item[column][1]}}</p>\n  </div>\n</ng-template>\n\n<ng-template #formattedNumberCell let-item let-column=\"column\">\n  <p class=\"main-label\">{{numberPrefix}}{{item[column] | number: numberFormat}}</p>\n</ng-template>\n"
        }
    ],
    "modules": [
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DraggableListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DraggableListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DraggableListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrismaComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComponentsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DraggableListModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ComponentsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BusyButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ColorTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DefaultButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisabledCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Checkbox.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "disabledDragging",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ExampleList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ExampleTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoIndexStringList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n    >\n        Bot√£o\n    </pm-button>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Checkbox.stories.ts",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => ({\n  component: CheckboxComponent,\n  props: args,\n  template: `\n    <pm-checkbox\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    >\n        Checkbox\n    </pm-checkbox>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/DraggableList.stories.ts",
                "type": "Story<DraggableListComponent>",
                "defaultValue": "(args: DraggableListComponent) => ({\n  component: DraggableListComponent,\n  props: args,\n  template: `\n    <pm-draggable-list\n        [showIndex]=\"showIndex\"\n        [itemActionLabel]=\"itemActionLabel\"\n        [itemMainLabel]=\"itemMainLabel\"\n        [itemSubLabel]=\"itemSubLabel\"\n        [actions]=\"actions\"\n        [itemList]=\"itemList\"\n        [roundedBorders]=\"roundedBorders\"\n        [enableDragging]=\"enableDragging\"\n        [enableSelection]=\"enableSelection\"\n    >\n      conteudo\n    </pm-draggable-list>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\n  component: TableComponent,\n  props: args,\n  template: `\n    <pm-table\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n    ></pm-table>`\n})"
            },
            {
                "name": "ThumbnailTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MainColors",
                "childs": [
                    {
                        "name": "primary",
                        "value": "primary"
                    },
                    {
                        "name": "secondary",
                        "value": "secondary"
                    },
                    {
                        "name": "success",
                        "value": "success"
                    },
                    {
                        "name": "info",
                        "value": "info"
                    },
                    {
                        "name": "warning",
                        "value": "warning"
                    },
                    {
                        "name": "danger",
                        "value": "danger"
                    },
                    {
                        "name": "light",
                        "value": "light"
                    },
                    {
                        "name": "default",
                        "value": "default"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "PaleColors",
                "childs": [
                    {
                        "name": "primaryPale",
                        "value": "primary-pale"
                    },
                    {
                        "name": "secondaryPale",
                        "value": "secondary-pale"
                    },
                    {
                        "name": "successPale",
                        "value": "success-pale"
                    },
                    {
                        "name": "infoPale",
                        "value": "info-pale"
                    },
                    {
                        "name": "warningPale",
                        "value": "warning-pale"
                    },
                    {
                        "name": "dangerPale",
                        "value": "danger-pale"
                    },
                    {
                        "name": "lightPale",
                        "value": "light-pale"
                    },
                    {
                        "name": "defaultPale",
                        "value": "default-pale"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "SaturatedColors",
                "childs": [
                    {
                        "name": "primarySat",
                        "value": "primary-sat"
                    },
                    {
                        "name": "secondarySat",
                        "value": "secondary-sat"
                    },
                    {
                        "name": "successSat",
                        "value": "success-sat"
                    },
                    {
                        "name": "infoSat",
                        "value": "info-sat"
                    },
                    {
                        "name": "warningSat",
                        "value": "warning-sat"
                    },
                    {
                        "name": "dangerSat",
                        "value": "danger-sat"
                    },
                    {
                        "name": "lightSat",
                        "value": "light-sat"
                    },
                    {
                        "name": "defaultSat",
                        "value": "default-sat"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            },
            {
                "name": "Sizes",
                "childs": [
                    {
                        "name": "xs",
                        "value": "xs"
                    },
                    {
                        "name": "sm",
                        "value": "sm"
                    },
                    {
                        "name": "md",
                        "value": "md"
                    },
                    {
                        "name": "lg",
                        "value": "lg"
                    },
                    {
                        "name": "xl",
                        "value": "xl"
                    },
                    {
                        "name": "xxl",
                        "value": "xxl"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/sizes.ts"
            },
            {
                "name": "StateColors",
                "childs": [
                    {
                        "name": "primaryStates",
                        "value": "primary-states"
                    },
                    {
                        "name": "secondaryStates",
                        "value": "secondary-states"
                    },
                    {
                        "name": "successStates",
                        "value": "success-states"
                    },
                    {
                        "name": "infoStates",
                        "value": "info-states"
                    },
                    {
                        "name": "warningStates",
                        "value": "warning-states"
                    },
                    {
                        "name": "dangerStates",
                        "value": "danger-states"
                    },
                    {
                        "name": "lightStates",
                        "value": "light-states"
                    },
                    {
                        "name": "defaultStates",
                        "value": "default-states"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/components/src/models/colors.ts"
            }
        ],
        "groupedVariables": {
            "stories/Button.stories.ts": [
                {
                    "name": "BusyButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DefaultButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n    >\n        Bot√£o\n    </pm-button>`\n})"
                }
            ],
            "stories/Table.stories.ts": [
                {
                    "name": "ColorTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ExampleTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\n  component: TableComponent,\n  props: args,\n  template: `\n    <pm-table\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n    ></pm-table>`\n})"
                },
                {
                    "name": "ThumbnailTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "type": "literal type"
                }
            ],
            "stories/Checkbox.stories.ts": [
                {
                    "name": "DefaultCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DisabledCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => ({\n  component: CheckboxComponent,\n  props: args,\n  template: `\n    <pm-checkbox\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    >\n        Checkbox\n    </pm-checkbox>`\n})"
                }
            ],
            "stories/DraggableList.stories.ts": [
                {
                    "name": "disabledDragging",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ExampleList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoIndexStringList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/DraggableList.stories.ts",
                    "type": "Story<DraggableListComponent>",
                    "defaultValue": "(args: DraggableListComponent) => ({\n  component: DraggableListComponent,\n  props: args,\n  template: `\n    <pm-draggable-list\n        [showIndex]=\"showIndex\"\n        [itemActionLabel]=\"itemActionLabel\"\n        [itemMainLabel]=\"itemMainLabel\"\n        [itemSubLabel]=\"itemSubLabel\"\n        [actions]=\"actions\"\n        [itemList]=\"itemList\"\n        [roundedBorders]=\"roundedBorders\"\n        [enableDragging]=\"enableDragging\"\n        [enableSelection]=\"enableSelection\"\n    >\n      conteudo\n    </pm-draggable-list>`\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/components/src/models/colors.ts": [
                {
                    "name": "MainColors",
                    "childs": [
                        {
                            "name": "primary",
                            "value": "primary"
                        },
                        {
                            "name": "secondary",
                            "value": "secondary"
                        },
                        {
                            "name": "success",
                            "value": "success"
                        },
                        {
                            "name": "info",
                            "value": "info"
                        },
                        {
                            "name": "warning",
                            "value": "warning"
                        },
                        {
                            "name": "danger",
                            "value": "danger"
                        },
                        {
                            "name": "light",
                            "value": "light"
                        },
                        {
                            "name": "default",
                            "value": "default"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "PaleColors",
                    "childs": [
                        {
                            "name": "primaryPale",
                            "value": "primary-pale"
                        },
                        {
                            "name": "secondaryPale",
                            "value": "secondary-pale"
                        },
                        {
                            "name": "successPale",
                            "value": "success-pale"
                        },
                        {
                            "name": "infoPale",
                            "value": "info-pale"
                        },
                        {
                            "name": "warningPale",
                            "value": "warning-pale"
                        },
                        {
                            "name": "dangerPale",
                            "value": "danger-pale"
                        },
                        {
                            "name": "lightPale",
                            "value": "light-pale"
                        },
                        {
                            "name": "defaultPale",
                            "value": "default-pale"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "SaturatedColors",
                    "childs": [
                        {
                            "name": "primarySat",
                            "value": "primary-sat"
                        },
                        {
                            "name": "secondarySat",
                            "value": "secondary-sat"
                        },
                        {
                            "name": "successSat",
                            "value": "success-sat"
                        },
                        {
                            "name": "infoSat",
                            "value": "info-sat"
                        },
                        {
                            "name": "warningSat",
                            "value": "warning-sat"
                        },
                        {
                            "name": "dangerSat",
                            "value": "danger-sat"
                        },
                        {
                            "name": "lightSat",
                            "value": "light-sat"
                        },
                        {
                            "name": "defaultSat",
                            "value": "default-sat"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                },
                {
                    "name": "StateColors",
                    "childs": [
                        {
                            "name": "primaryStates",
                            "value": "primary-states"
                        },
                        {
                            "name": "secondaryStates",
                            "value": "secondary-states"
                        },
                        {
                            "name": "successStates",
                            "value": "success-states"
                        },
                        {
                            "name": "infoStates",
                            "value": "info-states"
                        },
                        {
                            "name": "warningStates",
                            "value": "warning-states"
                        },
                        {
                            "name": "dangerStates",
                            "value": "danger-states"
                        },
                        {
                            "name": "lightStates",
                            "value": "light-states"
                        },
                        {
                            "name": "defaultStates",
                            "value": "default-states"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/colors.ts"
                }
            ],
            "projects/components/src/models/sizes.ts": [
                {
                    "name": "Sizes",
                    "childs": [
                        {
                            "name": "xs",
                            "value": "xs"
                        },
                        {
                            "name": "sm",
                            "value": "sm"
                        },
                        {
                            "name": "md",
                            "value": "md"
                        },
                        {
                            "name": "lg",
                            "value": "lg"
                        },
                        {
                            "name": "xl",
                            "value": "xl"
                        },
                        {
                            "name": "xxl",
                            "value": "xxl"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/components/src/models/sizes.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/components/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComponentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ComponentsService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/draggable-list/draggable-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DraggableListComponent",
                "coveragePercent": 22,
                "coverageCount": "6/27",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 20,
                "coverageCount": "6/29",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BusyButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabledDragging",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExampleList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoIndexStringList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/DraggableList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExampleTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThumbnailTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}