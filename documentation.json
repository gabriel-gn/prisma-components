{
    "pipes": [],
    "interfaces": [
        {
            "name": "ColorThemeModuleConfig",
            "id": "interface-ColorThemeModuleConfig-0ab1c36753218132c82678b8c01e942874376d662555270dd5b2165e8827c12110da955e3bcd224817c36fb78557b70b634a00c4f5f451414c7fd1eb8d9de934",
            "file": "src/services/color-theme/color-theme.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {ColorThemeService} from './color-theme.service';\nimport {colorThemeToken, defaultColorTheme} from './injection';\n\nexport interface ColorThemeModuleConfig {\n  theme?: string;\n}\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  exports: [],\n})\nexport class ColorThemeModule {\n  public static forRoot(options: ColorThemeModuleConfig = {}): ModuleWithProviders<ColorThemeModule> {\n    return {\n      ngModule: ColorThemeModule,\n      providers: [\n        ColorThemeService,\n        {provide: colorThemeToken, useValue: options.theme || defaultColorTheme},\n      ]\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ComboItem",
            "id": "interface-ComboItem-096522349c0a00b804b11ad25e08293efe4c567256728f6f5d82288d4cf39b88905098e87b8a0d64b69cd3b5f364fa5e3d2e7c16e0ea0727c55ff55db444ecc5",
            "file": "src/components/inputs/combo-box/combo-box.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nexport interface ComboItem {\n  label: string;\n  value: any;\n}\n\n@Component({\n  selector: 'pm-combo-box',\n  templateUrl: './combo-box.component.html',\n  styleUrls: ['./combo-box.component.scss']\n})\nexport class ComboBoxComponent implements OnInit {\n\n  /**\n   * Itens que serão exibidos na combo box.\n   * Devem ser obrigatoriamente do tipo `ComboItem[]`\n   */\n  @Input() items: ComboItem[] = [];\n  /**\n   * Item selecionado da combobox. Pode ser carregado previamente\n   */\n  @Input() selectedItem: any;\n  /**\n   * Desabilita a interação com os valores da combo box.\n   */\n  @Input() disabled: boolean = false;\n  /**\n   * Emite um valor booleano com o novo valor do item selecionado na combo box.\n   */\n  @Output() selectionChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private ref: ChangeDetectorRef) {\n  }\n\n  ngOnInit(): void {\n    this.ref.detectChanges();\n  }\n\n  public setSelected(item: any): void {\n    this.selectedItem = item;\n    this.selectionChange.emit(item);\n  }\n\n  private selectionChanged(event: any): void {\n    this.selectionChange.emit(event.value);\n    this.ref.detectChanges();\n  }\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GridListItem",
            "id": "interface-GridListItem-a7ba2302da3bc5706771661a31a8290a6a330d143953414f702a45a08bb636da215a9b259f0ba96187cf872f32ec2a97a7cbe9cdfb33d9131f8dd9662f99c819",
            "file": "src/components/lists/grid-list/grid-list.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, TemplateRef, ViewChild} from '@angular/core';\nimport {MainColors} from '../../../models/colors';\n\nexport interface GridListItem {\n  title: string;\n  subtitle?: string;\n  context?: any;\n  iconClass?: string;\n  iconColor?: MainColors | string;\n  iconOutline?: boolean;\n  thumbnailPicture?: string;\n  bodyPicture: string;\n  iconCallback?: void;\n  titleCallback?: void;\n  subtitleCallback?: void;\n  bodyCallback?: void;\n}\n\n@Component({\n  selector: 'pm-grid-list',\n  templateUrl: './grid-list.component.html',\n  styleUrls: ['./grid-list.component.scss']\n})\nexport class GridListComponent {\n\n  @ViewChild('gridTemplate', {static: true}) gridTemplateRef: TemplateRef<any>;\n  @ViewChild('listTemplate', {static: true}) listTemplateRef: TemplateRef<any>;\n  @ViewChild('galleryTemplate', {static: true}) galleryTemplateRef: TemplateRef<any>;\n  @Input() displayStyle: 'list' | 'grid' | 'gallery' = 'grid';\n  @Input() overflowGallery: boolean = true;\n  @Input() items: GridListItem[];\n  @Input() gridHeaderReverse: boolean = false;\n  @Input() bodyBackgroundColor: string;\n  @Input() actionTemplate: TemplateRef<any>;\n\n  constructor() { }\n\n  public getTemplate(): TemplateRef<any> {\n    switch (this.displayStyle) {\n      case 'grid':\n        return this.gridTemplateRef;\n      case 'gallery':\n        return this.galleryTemplateRef;\n      case 'list':\n        return this.listTemplateRef;\n      default:\n        return this.gridTemplateRef;\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "bodyCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "bodyPicture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "iconCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "iconClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "iconColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MainColors | string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "iconOutline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subtitleCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "thumbnailPicture",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "titleCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IconCardArrayItem",
            "id": "interface-IconCardArrayItem-c7da09732accd344db173afb858627ea60948b40041d8c4810a1d1d2476e41fffa275c48426b2055596590351730c1912e474c02d4e64575dc269b270f69104f",
            "file": "src/components/cards/icon-card/icon-card.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {OrientationEnum} from '../../../models/orientation';\n\nexport interface IconCardArrayItem {\n  title: string;\n  subtitle: string;\n  iconClass: string;\n}\n\n@Component({\n  selector: 'pm-icon-card',\n  templateUrl: './icon-card.component.html',\n  styleUrls: ['./icon-card.component.scss']\n})\nexport class IconCardComponent {\n\n  @Input('textPosition') textPosition: 'start' | 'end' | 'center' = 'center';\n  @Input('paddingClass') paddingClass: string = 'p-3';\n  @Input('hoverable') hoverable: boolean = true;\n  @Input('orientation') orientation: OrientationEnum = OrientationEnum.Y;\n  @Input('iconClass') iconClass: string = 'uil uil-star';\n  @Input('title') title: string = '';\n  @Input('subtitle') subtitle: string = '';\n  @Input('iconCardArray') iconCardArray: IconCardArrayItem[] = [];\n\n  constructor() { }\n\n}\n",
            "properties": [
                {
                    "name": "iconClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MultiSelectOption",
            "id": "interface-MultiSelectOption-ab39014a26986ec1856db0f54bf0e99b655412f6ef27cce65a6a07fe722591bba3b00f957292d93d7b3bf44477c021b7af9609187e2f2a5e30d3e81656463583",
            "file": "src/components/inputs/multi-select/multi-select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport _ from 'lodash';\nimport {MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocompleteTrigger} from '@angular/material/autocomplete';\nimport {Sizes} from '../../../models/sizes';\n\nexport interface MultiSelectOption {\n  label: string;\n  value: any;\n  thumbnail: string;\n}\n\n@Component({\n  selector: 'pm-multi-select',\n  templateUrl: './multi-select.component.html',\n  styleUrls: ['./multi-select.component.scss'],\n  providers: [\n    {\n      provide: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,\n      useValue: {\n        autoActiveFirstOption: false,\n        overlayPanelClass: 'pm-multi-select-autocomplete-panel'\n      }\n    }\n  ]\n})\nexport class MultiSelectComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('inputBox') inputBoxEl: ElementRef;\n  @ViewChild('trigger') trigger: MatAutocompleteTrigger;\n  /**\n   * Ao ser selecionada uma opção nova, emite\n   */\n  @Output() selectedOptionsChanged = new EventEmitter<MultiSelectOption[]>();\n  /**\n   * Texto a ser exibido no input\n   */\n  @Input() placeholder: string = '';\n  /**\n   * opções a serem exibidas no input\n   */\n  @Input() options: MultiSelectOption[] = [];\n  @Input() borderRadius: Sizes = Sizes.md;\n  /**\n   * se as thumbnails serão arredondadas\n   */\n  @Input() roundedThumbnail: boolean = true;\n  /**\n   * limite máximo de seleções de itens\n   */\n  @Input() limit: number = 0;\n  /**\n   * Opções que ja vem selecionadas\n   */\n  @Input() selectedOptions: MultiSelectOption[] = [];\n  myControl = new FormControl();\n  filteredOptions: Observable<MultiSelectOption[]>;\n\n  constructor(\n    private cdr: ChangeDetectorRef\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => (typeof value === 'string' ? value : `${value.label}`)),\n      map(label => this._filter(label)),\n    );\n  }\n\n  ngAfterViewInit(): void {\n    this.clearInput();\n  }\n\n  displayFn(user: MultiSelectOption): string {\n    return user && user.label ? user.label : '';\n  }\n\n  private _filter(label: string): MultiSelectOption[] {\n    const filterValue = label.toLowerCase();\n\n    return _.difference(\n      this.options.filter(option => option.label.toLowerCase().includes(filterValue)),\n      this.selectedOptions\n    );\n  }\n\n  public selectOption(option: any): void {\n    this.selectedOptions.push(option);\n    this.selectedOptionsChanged.emit(this.selectedOptions);\n    this.clearInput();\n  }\n\n  private clearInput(): void {\n    this.myControl.setValue('');\n    try { this.inputBoxEl.nativeElement.blur(); } catch (e) {}\n    this.cdr.detectChanges();\n  }\n\n  public removeSelectedOption(option: MultiSelectOption): void {\n    _.remove(this.selectedOptions, option);\n    this.clearInput();\n  }\n\n  public isOptionSelected(option: MultiSelectOption): boolean {\n    return !!this.selectedOptions.find(sOptions => _.isEqual(sOptions, option));\n  }\n\n  public openSelect(): void {\n    setTimeout(() => {\n      try { this.inputBoxEl.nativeElement.focus(); } catch (e) {}\n    }, 0);\n  }\n\n  public clearSelected(): void {\n    this.selectedOptions = [];\n    this.selectedOptionsChanged.emit(this.selectedOptions);\n    this.clearInput();\n  }\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "thumbnail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ColorThemeService",
            "id": "injectable-ColorThemeService-0148c2d84ad8af31ecdb06765a85e139adf55d5e53de2ffb19e59adda3d2f619fd779ea54438bbba8d3328bbc5233e341107d9aef666263e952a5c997874b8e8",
            "file": "src/services/color-theme/color-theme.service.ts",
            "properties": [
                {
                    "name": "_theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable} from '@angular/core';\nimport {colorThemeToken} from './injection';\n\nexport const defaultTheme = {\n  'color-primary': '#455363',\n  'color-default': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n};\n\nexport const lightTheme = {\n  'color-primary': '#fff',\n  'color-default': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n};\n\nexport const darkTheme = {\n  'color-primary': '#455363',\n  'color-default': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n};\n\n@Injectable()\nexport class ColorThemeService {\n\n  private _theme: string;\n\n  constructor(\n    @Inject(colorThemeToken) initialTheme: any\n  ) {\n    this.theme = initialTheme;\n  }\n\n  public get theme(): string {\n    return this._theme;\n  }\n\n  public set theme(theme: string) {\n    this._theme = theme;\n\n    let themeObj;\n    switch (theme) {\n      case 'default':\n        themeObj = defaultTheme;\n        break;\n      case 'light':\n        themeObj = lightTheme;\n        break;\n      case 'dark':\n        themeObj = darkTheme;\n        break;\n      default:\n        themeObj = defaultTheme;\n        break;\n    }\n    Object.keys(themeObj).forEach(key =>\n      document.documentElement.style.setProperty(`--${key}`, `${themeObj[key]}`, 'important')\n    );\n  }\n\n  public toggle(): void {\n    this.theme = this._theme === 'dark' ? 'light' : 'dark';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialTheme",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "initialTheme",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "theme": {
                    "name": "theme",
                    "setSignature": {
                        "name": "theme",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "theme",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "theme",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "theme",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "NgIfLoadedDirective",
            "id": "directive-NgIfLoadedDirective-399f3b536ddc1a722722ced33acc0930dbb08c1698f7d538658c648f41d6eb98b1c1d6110fc8cde7d305a56075967a99627bc6f7a65c033ede90b48404394773",
            "file": "src/directives/ng-if-loaded/ng-if-loaded.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  Input,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\nimport {IF_LOADED_SPINNER} from './injection';\nimport {ComponentType} from '@angular/cdk/overlay';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngIfLoaded]'\n})\nexport class NgIfLoadedDirective {\n\n  spinner: ComponentType<any>;\n\n  constructor(\n    @Inject(IF_LOADED_SPINNER) spinnerComponent: ComponentType<any>,\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private resolver: ComponentFactoryResolver\n  ) {\n    this.spinner = spinnerComponent;\n  }\n\n\n  @Input()\n  set ngIfLoaded(value) {\n    if (value) {\n      this.viewContainer.clear();\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n      const factory = this.resolver.resolveComponentFactory(this.spinner);\n      this.viewContainer.createComponent(factory);\n    }\n  }\n\n}\n",
            "selector": "[ngIfLoaded]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "ngIfLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "spinner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentType<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spinnerComponent",
                        "type": "ComponentType<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "spinnerComponent",
                        "type": "ComponentType<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "ngIfLoaded": {
                    "name": "ngIfLoaded",
                    "setSignature": {
                        "name": "ngIfLoaded",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "BasicCardComponent",
            "id": "component-BasicCardComponent-0e69c39b231aba26950c6359e503431447a62bdc9c0bf7b548bb8130d1a8d3bad08deac3c3da5d49b6b3057eceb3fa508a2e95a20f684da2164fa7dac35e3e3f",
            "file": "src/components/cards/basic-card/basic-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-basic-card",
            "styleUrls": [
                "./basic-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./basic-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "borderRadius",
                    "defaultValue": "Sizes.md",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Sizes",
                    "decorators": []
                },
                {
                    "name": "hoverable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "paddingClass",
                    "defaultValue": "'p-3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {Sizes} from '../../../models/sizes';\n\n@Component({\n  selector: 'pm-basic-card',\n  templateUrl: './basic-card.component.html',\n  styleUrls: ['./basic-card.component.scss']\n})\nexport class BasicCardComponent {\n\n  @Input('hoverable') hoverable = false;\n  @Input('borderRadius') borderRadius: Sizes = Sizes.md;\n  @Input('paddingClass') paddingClass: string = 'p-3';\n\n  constructor() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-basic-card {\n\n}\n",
                    "styleUrl": "./basic-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "templateData": "<div class=\"pm-basic-card\">\n  <div\n    [ngClass]=\"{'hoverable': hoverable}\"\n    class=\"card-basic {{paddingClass}} {{borderRadius ? 'rad-' + borderRadius : ''}} w-100\"\n    style=\"height: auto;\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d80e8a9ef21ddcb6d72a77b33b9c90142f57ded3e9675705b699a5b2ec77528f2d15cf6a7b76127014a9031a4c4e6f0f138fd54a1c3bfea715decb71d795a38e",
            "file": "src/components/inputs/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "busy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExibe botão de \"carregamento\" e desabilita o botão.\nPara alterar o texto, utilizar a propriedade `busyText`\n",
                    "description": "<p>Exibe botão de &quot;carregamento&quot; e desabilita o botão.\nPara alterar o texto, utilizar a propriedade <code>busyText</code></p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "busyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTexto exibido junto ao botão de \"carregando\" quando a propriedade `busy` está como `true`\n",
                    "description": "<p>Texto exibido junto ao botão de &quot;carregando&quot; quando a propriedade <code>busy</code> está como <code>true</code></p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPropriedade de habilitado ou desabilitado\n",
                    "description": "<p>Propriedade de habilitado ou desabilitado</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fillWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFaz ou não o botão preencher a largura do container. (classe w-100)\n",
                    "description": "<p>Faz ou não o botão preencher a largura do container. (classe w-100)</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nÍcone que será exibido no botão junto ao texto. Ex: `uil uil-md uil-tabs`\n",
                    "description": "<p>Ícone que será exibido no botão junto ao texto. Ex: <code>uil uil-md uil-tabs</code></p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCaso tenha ícone, indica se o ícone estará no começo ou fim do botão\n",
                    "description": "<p>Caso tenha ícone, indica se o ícone estará no começo ou fim do botão</p>\n",
                    "line": 32,
                    "type": "\"start\" | \"end\"",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe o botão será cheio ou apenas contornado pela borda\n",
                    "description": "<p>Se o botão será cheio ou apenas contornado pela borda</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTamanho do botão\n",
                    "description": "<p>Tamanho do botão</p>\n",
                    "line": 44,
                    "type": "\"sm\" | \"md\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "`${MainColors.default}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCor do botão que será exibido.\nUtilizar as propriedades do tipo \"MainColors\"\n",
                    "description": "<p>Cor do botão que será exibido.\nUtilizar as propriedades do tipo &quot;MainColors&quot;</p>\n",
                    "line": 15,
                    "type": "MainColors | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {MainColors} from '../../../models/colors';\n\n@Component({\n  selector: 'pm-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n  @Input('label') label: string | null = '';  // Usada só pra aparecer no storybook\n  /**\n   * Cor do botão que será exibido.\n   * Utilizar as propriedades do tipo \"MainColors\"\n   */\n  @Input('type') type: MainColors | string = `${MainColors.default}`;\n  /**\n   * Exibe botão de \"carregamento\" e desabilita o botão.\n   * Para alterar o texto, utilizar a propriedade `busyText`\n   */\n  @Input('busy') busy: boolean = false;\n  /**\n   * Texto exibido junto ao botão de \"carregando\" quando a propriedade `busy` está como `true`\n   */\n  @Input('busyText') busyText: string;\n  /**\n   * Ícone que será exibido no botão junto ao texto. Ex: `uil uil-md uil-tabs`\n   */\n  @Input('iconClass') iconClass: string;\n  /**\n   * Caso tenha ícone, indica se o ícone estará no começo ou fim do botão\n   */\n  @Input('iconPosition') iconPosition: 'start' | 'end' = 'start';\n  /**\n   * Se o botão será cheio ou apenas contornado pela borda\n   */\n  @Input('outline') outline: boolean = false;\n  /**\n   * Propriedade de habilitado ou desabilitado\n   */\n  @Input('disabled') disabled: boolean = false;\n  /**\n   * Tamanho do botão\n   */\n  @Input('size') size: 'sm' | 'md' = 'md';\n  /**\n   * Faz ou não o botão preencher a largura do container. (classe w-100)\n   */\n  @Input('fillWidth') fillWidth: boolean = false;\n\n  constructor() { }\n\n  public getClassName(): string {\n    let name = 'pm-button btn';\n    if (this.size !== 'md') {\n      name += ` ${this.size}`;\n    }\n    if (this.fillWidth) {\n      name += ' w-100';\n    }\n    if (this.type) {\n      if (this.outline) {\n        name += ` btn-outline-${this.type}`;\n      } else {\n        name += ` btn-${this.type}`;\n      }\n    }\n    if (this.iconClass) {\n      name += ` d-flex flex-row`;\n    }\n    return name;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  &.pm-button {\n    &:disabled {\n      cursor: not-allowed;\n      pointer-events: none;\n    }\n\n    &.sm {\n      font-size: 0.7rem !important;\n      padding: 0.2rem 0.5rem !important;\n    }\n  }\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 48
            },
            "templateData": "<button [className]=\"getClassName()\" [disabled]=\"busy || disabled\">\n  <ng-container *ngIf=\"busy; else buttonContent\">\n    <span class=\"spinner-border spinner-border-sm mx-2\" role=\"status\" aria-hidden=\"true\"></span>\n    {{busyText ? busyText : ''}}\n  </ng-container>\n</button>\n\n<ng-template #buttonContent>\n  <i *ngIf=\"iconClass && busy === false && iconPosition === 'start'\" class=\"{{iconClass}}\"></i>\n  <ng-container *ngIf=\"label; else noLabel\">\n    <span class=\"align-self-center\" [ngClass]=\"{'ms-2': !!label && iconPosition === 'start', 'me-2': !!label && iconPosition === 'end'}\">\n      {{label}}\n    </span>\n  </ng-container>\n  <i *ngIf=\"iconClass && busy === false && iconPosition === 'end'\" class=\"{{iconClass}}\"></i>\n</ng-template>\n\n<ng-template #noLabel>\n  <ng-content></ng-content>\n</ng-template>\n\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-438de8761442bd29e7962abb8d2f88e904237e58321b36632bfbbd335e4023ae081dc0d528939d747a2ad343999b25eaa5612066c1534bf4debd088dcad31c84",
            "file": "src/components/inputs/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHabilita ou desabilita a marcação da checkbox\n",
                    "description": "<p>Habilita ou desabilita a marcação da checkbox</p>\n",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNão permite alterar a marcação da checkbox\n",
                    "description": "<p>Não permite alterar a marcação da checkbox</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedChange",
                    "defaultValue": "new EventEmitter<boolean>(this.checked)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "disabledChange",
                    "defaultValue": "new EventEmitter<boolean>(this.disabled)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "onCheckedChange",
                    "defaultValue": "new EventEmitter<boolean>(this.checked)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'pm-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent {\n\n  /**\n   * Habilita ou desabilita a marcação da checkbox\n   */\n  @Input() checked: boolean = false;\n  /**\n   * Não permite alterar a marcação da checkbox\n   */\n  @Input() disabled: boolean = false;\n  @Output() checkedChange: EventEmitter<boolean> = new EventEmitter<boolean>(this.checked);\n  @Output() onCheckedChange: EventEmitter<boolean> = new EventEmitter<boolean>(this.checked);\n  @Output() disabledChange: EventEmitter<boolean> = new EventEmitter<boolean>(this.disabled);\n\n  constructor() {\n  }\n\n  public setValue(value: boolean): void {\n    this.checked = value;\n    this.checkedChange.emit(this.checked);\n    this.onCheckedChange.emit(this.checked);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "templateData": "<div class=\"form-check\" [ngClass]=\"{'disabled': disabled}\" (click)=\"$event.stopPropagation();\">\n  <label class=\"form-check-label\">\n    <input (change)=\"setValue($event.target['checked'])\"\n           [(ngModel)]=\"checked\"\n           [ngModelOptions]=\"{standalone: true}\"\n           [disabled]=\"disabled\"\n           class=\"form-check-input\" type=\"checkbox\">\n    <span class=\"form-check-sign\"></span>\n    <ng-content></ng-content>\n  </label>\n</div>\n"
        },
        {
            "name": "ComboBoxComponent",
            "id": "component-ComboBoxComponent-096522349c0a00b804b11ad25e08293efe4c567256728f6f5d82288d4cf39b88905098e87b8a0d64b69cd3b5f364fa5e3d2e7c16e0ea0727c55ff55db444ecc5",
            "file": "src/components/inputs/combo-box/combo-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-combo-box",
            "styleUrls": [
                "./combo-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./combo-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDesabilita a interação com os valores da combo box.\n",
                    "description": "<p>Desabilita a interação com os valores da combo box.</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nItens que serão exibidos na combo box.\nDevem ser obrigatoriamente do tipo `ComboItem[]`\n",
                    "description": "<p>Itens que serão exibidos na combo box.\nDevem ser obrigatoriamente do tipo <code>ComboItem[]</code></p>\n",
                    "line": 19,
                    "type": "ComboItem[]",
                    "decorators": []
                },
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nItem selecionado da combobox. Pode ser carregado previamente\n",
                    "description": "<p>Item selecionado da combobox. Pode ser carregado previamente</p>\n",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmite um valor booleano com o novo valor do item selecionado na combo box.\n",
                    "description": "<p>Emite um valor booleano com o novo valor do item selecionado na combo box.</p>\n",
                    "line": 31,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectionChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nexport interface ComboItem {\n  label: string;\n  value: any;\n}\n\n@Component({\n  selector: 'pm-combo-box',\n  templateUrl: './combo-box.component.html',\n  styleUrls: ['./combo-box.component.scss']\n})\nexport class ComboBoxComponent implements OnInit {\n\n  /**\n   * Itens que serão exibidos na combo box.\n   * Devem ser obrigatoriamente do tipo `ComboItem[]`\n   */\n  @Input() items: ComboItem[] = [];\n  /**\n   * Item selecionado da combobox. Pode ser carregado previamente\n   */\n  @Input() selectedItem: any;\n  /**\n   * Desabilita a interação com os valores da combo box.\n   */\n  @Input() disabled: boolean = false;\n  /**\n   * Emite um valor booleano com o novo valor do item selecionado na combo box.\n   */\n  @Output() selectionChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(private ref: ChangeDetectorRef) {\n  }\n\n  ngOnInit(): void {\n    this.ref.detectChanges();\n  }\n\n  public setSelected(item: any): void {\n    this.selectedItem = item;\n    this.selectionChange.emit(item);\n  }\n\n  private selectionChanged(event: any): void {\n    this.selectionChange.emit(event.value);\n    this.ref.detectChanges();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./combo-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field class=\"w-100\">\n  <mat-select\n    [disabled]=\"disabled\"\n    [disableRipple]=\"true\"\n    [(ngModel)]=\"selectedItem\" disableOptionCentering\n    (selectionChange)=\"selectionChanged($event)\"\n  >\n    <mat-option *ngFor=\"let item of items\" [value]=\"item.value\">\n      {{item.label}}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n"
        },
        {
            "name": "CopyContentInputComponent",
            "id": "component-CopyContentInputComponent-b13c398bd09d8f246b2103a5efb0642f756ad7be87f4f4c35a0fb3e07e114e312c0e2bd64d87e684b4b1ec24bdccf9d8bd5bcb9eac93895ee27f66089117d57f",
            "file": "src/components/inputs/copy-content-input/copy-content-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-copy-content-input",
            "styleUrls": [
                "./copy-content-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./copy-content-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "borderRadius",
                    "defaultValue": "Sizes.md",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRaio da borda\n",
                    "description": "<p>Raio da borda</p>\n",
                    "line": 35,
                    "type": "Sizes",
                    "decorators": []
                },
                {
                    "name": "btnColor",
                    "defaultValue": "MainColors.primary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFaz o input ter altura 100%\n",
                    "description": "<p>Faz o input ter altura 100%</p>\n",
                    "line": 31,
                    "type": "MainColors",
                    "decorators": []
                },
                {
                    "name": "copyCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExecuta um comando ao copiar para a área de transferência\n",
                    "description": "<p>Executa um comando ao copiar para a área de transferência</p>\n",
                    "line": 23,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDesabilita a interação o input.\n",
                    "description": "<p>Desabilita a interação o input.</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fillHeight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFaz o input ter altura 100%\n",
                    "description": "<p>Faz o input ter altura 100%</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntexto a ser exibido como conteúdo\n",
                    "description": "<p>texto a ser exibido como conteúdo</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "copyCallbackExecute",
                    "args": [
                        {
                            "name": "inputText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {MainColors} from '../../../models/colors';\nimport {Sizes} from '../../../models/sizes';\n\n@Component({\n  selector: 'pm-copy-content-input',\n  templateUrl: './copy-content-input.component.html',\n  styleUrls: ['./copy-content-input.component.scss']\n})\nexport class CopyContentInputComponent implements OnInit {\n\n  /**\n   * texto a ser exibido como conteúdo\n   */\n  @Input() text = '';\n  /**\n   * Desabilita a interação o input.\n   */\n  @Input() disabled = true;\n  /**\n   * Executa um comando ao copiar para a área de transferência\n   */\n  @Input() copyCallback: (inputText: string) => void;\n  /**\n   * Faz o input ter altura 100%\n   */\n  @Input() fillHeight: boolean = false;\n  /**\n   * Faz o input ter altura 100%\n   */\n  @Input() btnColor: MainColors = MainColors.primary;\n  /**\n   * Raio da borda\n   */\n  @Input() borderRadius: Sizes = Sizes.md;\n\n\n  constructor(\n  ) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  public copyCallbackExecute(inputText: string): void {\n    if (this.copyCallback) {\n      this.copyCallback(inputText);\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".btn-copy {\n  min-width: 40px !important;\n  max-width: 40px !important;\n  display: flex !important;\n  justify-content: center !important;\n  padding: 3px !important;\n}\n",
                    "styleUrl": "./copy-content-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 35
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"text\">\n  <div class=\"d-flex\" [ngClass]=\"{'h-100': fillHeight}\">\n    <input [attr.disabled]=\"disabled\" [attr.readonly]=\"disabled\" [value]=\"text\" class=\"form-control\" [title]=\"text\"\n           style=\"border-radius: var(--border-radius-{{borderRadius}}) 0px 0px var(--border-radius-{{borderRadius}}) !important;\"\n           type=\"text\"\n    >\n    <button\n      [cdkCopyToClipboard]=\"text\"\n      (click)=\"copyCallbackExecute(text)\"\n      class=\"btn btn-copy btn-{{btnColor}}\"\n      style=\"border-radius: 0 var(--border-radius-{{borderRadius}}) var(--border-radius-{{borderRadius}}) 0 !important;\"\n    >\n      <i class=\"uil uil-lg uil-copy d-flex justify-content-center align-items-center align-self-center\"></i>\n    </button>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "DraggableListComponent",
            "id": "component-DraggableListComponent-1d0a4738f1b26bb31bc09ae099064b4bec43daa26805c0a1dd54d3729b75c57b90f45265daaed3071c622ca983193fe732628ba9d826909c78787b4eefe39ae2",
            "file": "src/components/lists/draggable-list/draggable-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-draggable-list",
            "styleUrls": [
                "./draggable-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./draggable-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "enableDragging",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableSelection",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemActionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "itemList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "itemMainLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "itemSubLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "roundedBorders",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showIndex",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelectedChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contextMenu'"
                        }
                    ]
                },
                {
                    "name": "overlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Overlay",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "overlayRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayRef | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeContextMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFecha o context menu\n",
                    "description": "<p>Fecha o context menu</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvento de drop do cdkDragDrop\n",
                    "description": "<p>Evento de drop do cdkDragDrop</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1811,
                                "end": 1816,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "CdkDragDrop<string[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1805,
                                "end": 1810,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>: evento de drop</p>\n"
                        }
                    ]
                },
                {
                    "name": "formatItemStringParameters",
                    "args": [
                        {
                            "name": "originalString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCaso o originalString tenha {algumacoisa}, é substituído por ${item[algumacoisa]}\nFazendo assim ser possível strings dinânimcas de acordo com o objeto\nCaso o item seja string, é possível ele ser dinâmico usando {this}\n",
                    "description": "<p>Caso o originalString tenha {algumacoisa}, é substituído por ${item[algumacoisa]}\nFazendo assim ser possível strings dinânimcas de acordo com o objeto\nCaso o item seja string, é possível ele ser dinâmico usando {this}</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "originalString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemList",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSelectedItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSelectedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVerifica se o item é o atual selecionado\n",
                    "description": "<p>Verifica se o item é o atual selecionado</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4279,
                                "end": 4283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4273,
                                "end": 4278,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item a ser comparado com o atual selecionado</p>\n"
                        }
                    ]
                },
                {
                    "name": "openContextMenu",
                    "args": [
                        {
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAbre o context Menu\n",
                    "description": "<p>Abre o context Menu</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 2168,
                                "end": 2175,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "context"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2162,
                                "end": 2167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>: valores que serão passados para o context menu</p>\n"
                        }
                    ]
                },
                {
                    "name": "setItemList",
                    "args": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSetta o novo item como selecionado\n",
                    "description": "<p>Setta o novo item como selecionado</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1568,
                                "end": 1572,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1562,
                                "end": 1567,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item novo</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewContainerRef} from '@angular/core';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {Overlay, OverlayRef} from '@angular/cdk/overlay';\n\n@Component({\n  selector: 'pm-draggable-list',\n  templateUrl: './draggable-list.component.html',\n  styleUrls: ['./draggable-list.component.scss']\n})\nexport class DraggableListComponent {\n\n  @Input('enableDragging') enableDragging: boolean = true;\n  @Input('enableSelection') enableSelection: boolean = true;\n  @Output() onSelectedChange = new EventEmitter();\n  private selectedItem: any;\n\n  @Input('showIndex') showIndex: boolean = true;\n  @Input('itemList') itemList: any[];\n  @Input('itemActionLabel') itemActionLabel;\n  @Input('itemMainLabel') itemMainLabel;\n  @Input('itemSubLabel') itemSubLabel;\n  @Input('actions') actions: any[];\n\n  @Input('roundedBorders') roundedBorders: boolean = true;\n\n  sub: Subscription;\n  overlayRef: OverlayRef | null;\n  @ViewChild('contextMenu') contextMenu: TemplateRef<any>;\n\n  constructor(\n    public overlay: Overlay,\n    public viewContainerRef: ViewContainerRef,\n  ) {\n  }\n\n  public getItemList(): any[] {\n    return this.itemList;\n  }\n\n  public setItemList(itemList: any[]): void {\n    this.itemList = itemList;\n  }\n\n  public getSelectedItem(): any {\n    return this.selectedItem;\n  }\n\n  /**\n   * Setta o novo item como selecionado\n   * @param item: item novo\n   */\n  public setSelectedItem(item: any): void {\n    if (this.enableSelection === true) {\n      this.selectedItem = item;\n      this.onSelectedChange.emit(item);\n    }\n  }\n\n  /**\n   * Evento de drop do cdkDragDrop\n   * @param event: evento de drop\n   * @param profileList: lista a ser dropado\n   */\n  public drop(event: CdkDragDrop<string[]>): void {\n    if (this.enableDragging) {\n      moveItemInArray(this.itemList, event.previousIndex, event.currentIndex);\n    }\n  }\n\n  /**\n   * Abre o context Menu\n   * @param x: posição x do mouse\n   * @param y: posição y do mouse\n   * @param context: valores que serão passados para o context menu\n   */\n  public openContextMenu({x, y}: MouseEvent, context): void {\n    this.closeContextMenu();\n    const positionStrategy = this.overlay.position()\n      .flexibleConnectedTo({x, y})\n      .withPositions([\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top',\n        }\n      ]);\n\n    this.overlayRef = this.overlay.create({\n      positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.close()\n    });\n\n    this.overlayRef.attach(new TemplatePortal(this.contextMenu, this.viewContainerRef, context));\n\n    this.sub = fromEvent<MouseEvent>(document, 'click')\n      .pipe(\n        filter(event => {\n          const clickTarget = event.target as HTMLElement;\n          return !!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget);\n        }),\n        take(1)\n      ).subscribe(() => this.closeContextMenu());\n  }\n\n  /**\n   * Fecha o context menu\n   */\n  public closeContextMenu(): void {\n    // tslint:disable-next-line:no-unused-expression\n    this.sub && this.sub.unsubscribe();\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.overlayRef = null;\n    }\n  }\n\n  /**\n   * Caso o originalString tenha {algumacoisa}, é substituído por ${item[algumacoisa]}\n   * Fazendo assim ser possível strings dinânimcas de acordo com o objeto\n   * Caso o item seja string, é possível ele ser dinâmico usando {this}\n   */\n  public formatItemStringParameters(originalString: string, item: any): string {\n    if (typeof item !== 'string' && originalString.indexOf('{') !== -1) {\n      let result = '';\n      for (const str of originalString.split('{')) {\n        if (str.indexOf('}') !== -1) {\n          result += `${item[str.substring(0, str.indexOf('}'))]}`;\n          result += str.substring(str.indexOf('}') + 1, str.length);\n        } else {\n          result += str;\n        }\n      }\n      return result;\n    } else {\n      return originalString.replace('{this}', item);\n    }\n  }\n\n  /**\n   * Verifica se o item é o atual selecionado\n   * @param item: item a ser comparado com o atual selecionado\n   */\n  public isSelectedItem(item: any): boolean {\n    if (typeof item !== 'undefined') {\n      return this.selectedItem === item;\n    } else {\n      return false;\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./draggable-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"d-flex w-100\">\n  <div *ngIf=\"showIndex\"\n       class=\"draggable-item-index-container\"\n       [ngClass]=\"{rounded: roundedBorders && !showIndex, 'rounded-left': roundedBorders && showIndex}\"\n  >\n    <div *ngFor=\"let item of itemList, let i = index;\" class=\"draggable-item-index\">\n      <p>{{ i + 1 }}</p>\n    </div>\n  </div>\n  <div (cdkDropListDropped)=\"drop($event)\" cdkDropList\n       class=\"table-item-container w-100\"\n       [ngClass]=\"{rounded: roundedBorders && !showIndex, 'rounded-right': roundedBorders && showIndex}\">\n    <div *ngFor=\"let item of itemList, let i = index;\" cdkDrag cdkDragBoundary=\".table-item-container\" [cdkDragDisabled]=\"enableDragging === false\"\n         class=\"draggable-item\" (contextmenu)=\"openContextMenu($event, {$implicit: item}); $event.preventDefault();\"\n         [ngClass]=\"{'draggable-item-selected': isSelectedItem(item)}\"\n         (click)=\"setSelectedItem(item)\"\n         [ngStyle]=\"{'cursor': enableDragging ? 'move' : (enableSelection ? 'pointer' : null)}\">\n      <div *cdkDragPlaceholder class=\"draggable-placeholder\"></div>\n      <div class=\"d-flex w-100\">\n        <!-- if IsMobile -> para poder reordenar os perfis apenas pelo ícone -->\n        <div *ngIf=\"false\" cdkDragHandle class=\"move-icon-container\">\n          <i class=\"uil uil-lg uil-draggabledots\"></i>\n        </div>\n        <div *ngIf=\"enableDragging\" class=\"move-icon-container\">\n          <i class=\"uil uil-lg uil-draggabledots\"></i>\n        </div>\n        <div class=\"w-100 align-self-center text-overflow\">\n          <p class=\"m-0\">{{ formatItemStringParameters(itemMainLabel, item) }}</p>\n          <p class=\"m-0 sub-p\">{{ formatItemStringParameters(itemSubLabel, item) }}</p>\n        </div>\n        <div class=\"d-flex ms-2\">\n          <button (click)=\"actionsSelect.toggle()\" class=\"btn btn-light btn-icon btn-sm ms-2\">\n            <i class=\"uil uil-md uil-ellipsis-h\"></i>\n          </button>\n          <mat-select #actionsSelect class=\"mat-select-btn-sm\">\n            <mat-option [hidden]=\"true\"></mat-option>\n            <ng-container *ngTemplateOutlet=\"contextActions; context: {$implicit: item}\"></ng-container>\n          </mat-select>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #contextActions let-item>\n  <mat-option *ngFor=\"let action of actions\" (click)=\"action.method(item)\">{{formatItemStringParameters(action.name, item)}}</mat-option>\n</ng-template>\n\n<ng-template #contextMenu let-item>\n  <div class=\"mat-menu-panel\">\n    <mat-optgroup [label]=\"formatItemStringParameters(itemActionLabel, item)\">\n      <ng-container *ngTemplateOutlet=\"contextActions; context: {$implicit: item}\"></ng-container>\n    </mat-optgroup>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "DropdownActionsComponent",
            "id": "component-DropdownActionsComponent-fa887f88447d37b97020729dc89ce93edc8a80ecf2f136579197cf8c3b3670efd073ef2084d1ec6c17045aa4f01cb7af7a0d1685a9b846b8d5ec2de8f1a69959",
            "file": "src/components/inputs/dropdown-actions/dropdown-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-dropdown-actions",
            "styleUrls": [
                "./dropdown-actions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-actions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "buttonTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "closeOnClick",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconClass",
                    "defaultValue": "'uil uil-md uil-ellipsis-h'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "MainColors.light",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "MainColors | string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "busy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExibe botão de \"carregamento\" e desabilita o botão.\nPara alterar o texto, utilizar a propriedade `busyText`\n",
                    "description": "<p>Exibe botão de &quot;carregamento&quot; e desabilita o botão.\nPara alterar o texto, utilizar a propriedade <code>busyText</code></p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "busyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTexto exibido junto ao botão de \"carregando\" quando a propriedade `busy` está como `true`\n",
                    "description": "<p>Texto exibido junto ao botão de &quot;carregando&quot; quando a propriedade <code>busy</code> está como <code>true</code></p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPropriedade de habilitado ou desabilitado\n",
                    "description": "<p>Propriedade de habilitado ou desabilitado</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "fillWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFaz ou não o botão preencher a largura do container. (classe w-100)\n",
                    "description": "<p>Faz ou não o botão preencher a largura do container. (classe w-100)</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCaso tenha ícone, indica se o ícone estará no começo ou fim do botão\n",
                    "description": "<p>Caso tenha ícone, indica se o ícone estará no começo ou fim do botão</p>\n",
                    "line": 32,
                    "type": "\"start\" | \"end\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSe o botão será cheio ou apenas contornado pela borda\n",
                    "description": "<p>Se o botão será cheio ou apenas contornado pela borda</p>\n",
                    "line": 36,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTamanho do botão\n",
                    "description": "<p>Tamanho do botão</p>\n",
                    "line": 44,
                    "type": "\"sm\" | \"md\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "callMethod",
                    "args": [
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionsSelect",
                            "type": "MatSelect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionsSelect",
                            "type": "MatSelect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClassName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, TemplateRef} from '@angular/core';\nimport {MatSelect} from '@angular/material/select';\nimport {MainColors} from '../../../models/colors';\nimport {ButtonComponent} from '../button/button.component';\n\n@Component({\n  selector: 'pm-dropdown-actions',\n  templateUrl: './dropdown-actions.component.html',\n  styleUrls: ['./dropdown-actions.component.scss']\n})\nexport class DropdownActionsComponent extends ButtonComponent {\n\n  @Input('actions') actions: {label: string, method: any}[] = [];\n  @Input() closeOnClick = true;\n  @Input() buttonTemplate: TemplateRef<any>;\n\n  // buttons input\n  @Input('type') override type: MainColors | string = MainColors.light;\n  @Input('iconClass') override iconClass = 'uil uil-md uil-ellipsis-h';\n\n  constructor() {\n    super();\n  }\n\n  public callMethod(action: any, actionsSelect: MatSelect): void {\n    action.method();\n    if (this.closeOnClick) {\n      actionsSelect.close();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown-actions.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": "ButtonComponent",
            "templateData": "<ng-container *ngTemplateOutlet=\"buttonTemplate ? buttonTemplate : defaultButtonTemplate; context: {$implicit: actionsSelect}\"></ng-container>\n\n<mat-select #actionsSelect class=\"mat-select-btn-sm\">\n  <mat-option [hidden]=\"true\"></mat-option>\n  <mat-option *ngFor=\"let action of actions\" (click)=\"callMethod(action, actionsSelect)\">{{action.label}}</mat-option>\n</mat-select>\n\n<ng-template #defaultButtonTemplate let-select>\n  <pm-button (click)=\"(disabled || busy) === false ? select.toggle() : null\"\n             [type]=\"type\"\n             [busy]=\"busy\"\n             [busyText]=\"busyText\"\n             [iconClass]=\"iconClass\"\n             [outline]=\"outline\"\n             [disabled]=\"disabled\"\n  >\n  </pm-button>\n</ng-template>\n"
        },
        {
            "name": "ExpansionPanelComponent",
            "id": "component-ExpansionPanelComponent-9f8acf351830e59c5ecb3e74da7fb20f2898098db711f03ca6096d5594acd662cb3a5a71fe5cfeb8571e783bde08a39aea0a254ca8929b1625ecabf9238f47a1",
            "file": "src/components/containers/expansion-panel/expansion-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-expansion-panel",
            "styleUrls": [
                "./expansion-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expansion-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'pm-expansion-panel',\n  templateUrl: './expansion-panel.component.html',\n  styleUrls: ['./expansion-panel.component.scss']\n})\nexport class ExpansionPanelComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-expansion-panel {\n\n}\n",
                    "styleUrl": "./expansion-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"pm-expansion-panel\">\n  <mat-expansion-panel>\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        Personal data\n      </mat-panel-title>\n      <mat-panel-description>\n        Type your name and age\n        <i>hehe</i>\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n    <ng-content></ng-content>\n  </mat-expansion-panel>\n</div>\n"
        },
        {
            "name": "GridListComponent",
            "id": "component-GridListComponent-a7ba2302da3bc5706771661a31a8290a6a330d143953414f702a45a08bb636da215a9b259f0ba96187cf872f32ec2a97a7cbe9cdfb33d9131f8dd9662f99c819",
            "file": "src/components/lists/grid-list/grid-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-grid-list",
            "styleUrls": [
                "./grid-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./grid-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "bodyBackgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "displayStyle",
                    "defaultValue": "'grid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "\"list\" | \"grid\" | \"gallery\"",
                    "decorators": []
                },
                {
                    "name": "gridHeaderReverse",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "GridListItem[]",
                    "decorators": []
                },
                {
                    "name": "overflowGallery",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "galleryTemplateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'galleryTemplate', {static: true}"
                        }
                    ]
                },
                {
                    "name": "gridTemplateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'gridTemplate', {static: true}"
                        }
                    ]
                },
                {
                    "name": "listTemplateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'listTemplate', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "TemplateRef<any>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, TemplateRef, ViewChild} from '@angular/core';\nimport {MainColors} from '../../../models/colors';\n\nexport interface GridListItem {\n  title: string;\n  subtitle?: string;\n  context?: any;\n  iconClass?: string;\n  iconColor?: MainColors | string;\n  iconOutline?: boolean;\n  thumbnailPicture?: string;\n  bodyPicture: string;\n  iconCallback?: void;\n  titleCallback?: void;\n  subtitleCallback?: void;\n  bodyCallback?: void;\n}\n\n@Component({\n  selector: 'pm-grid-list',\n  templateUrl: './grid-list.component.html',\n  styleUrls: ['./grid-list.component.scss']\n})\nexport class GridListComponent {\n\n  @ViewChild('gridTemplate', {static: true}) gridTemplateRef: TemplateRef<any>;\n  @ViewChild('listTemplate', {static: true}) listTemplateRef: TemplateRef<any>;\n  @ViewChild('galleryTemplate', {static: true}) galleryTemplateRef: TemplateRef<any>;\n  @Input() displayStyle: 'list' | 'grid' | 'gallery' = 'grid';\n  @Input() overflowGallery: boolean = true;\n  @Input() items: GridListItem[];\n  @Input() gridHeaderReverse: boolean = false;\n  @Input() bodyBackgroundColor: string;\n  @Input() actionTemplate: TemplateRef<any>;\n\n  constructor() { }\n\n  public getTemplate(): TemplateRef<any> {\n    switch (this.displayStyle) {\n      case 'grid':\n        return this.gridTemplateRef;\n      case 'gallery':\n        return this.galleryTemplateRef;\n      case 'list':\n        return this.listTemplateRef;\n      default:\n        return this.gridTemplateRef;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-grid-list {\n\n  .list-item {\n    height: 200px;\n    max-height: 160px;\n    border-bottom: 2px solid var(--color-gray-light);\n\n    .image-fluid-container {\n      width: 200px;\n\n      img {\n        max-height: 125px;\n      }\n    }\n\n    .title {\n      font-weight: 500;\n      font-size: 1.3rem;\n      color: var(--color-default-states);\n\n      &.bigger {\n        font-size: 1.4rem;\n        font-weight: 600;\n      }\n    }\n\n    .title-link {\n      @extend .title;\n      cursor: pointer;\n\n      &:hover {\n        color: var(--color-default-sat);\n      }\n\n      &:focus {\n        outline: none !important;\n        box-shadow: none;\n      }\n    }\n\n    .secondary {\n      font-size: 1.1rem;\n      color: var(--color-gray-dark);\n      font-weight: 400;\n      width: fit-content;\n\n      &:focus {\n        outline: none !important;\n      }\n\n      &.bigger {\n        font-size: 1.2rem;\n        font-weight: 600;\n      }\n    }\n\n    .secondary-link {\n      @extend .secondary;\n      cursor: pointer;\n\n      &:hover {\n        color: var(--color-default);\n      }\n\n      &:focus {\n        outline: none !important;\n      }\n    }\n  }\n\n  @media (max-width: 991px) {\n    .list-item {\n      height: 120px;\n      max-height: 90px;\n\n      .image-fluid-container {\n        width: 100px;\n\n        img {\n          max-height: 60px;\n        }\n      }\n\n      .title {\n        font-size: 1.1em;\n        margin-bottom: 0px;\n      }\n\n      .secondary {\n        font-size: 0.9em;\n      }\n\n    }\n  }\n}\n",
                    "styleUrl": "./grid-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "templateData": "<div class=\"pm-grid-list\">\n\n  <div class=\"d-flex justify-content-end\">\n    <button (click)=\"displayStyle = 'gallery'\" class=\"btn btn-icon-action color-primary\">\n      <i class=\"uil uil-md uil-table\"></i>\n    </button>\n    <button (click)=\"displayStyle = 'grid'\" class=\"btn btn-icon-action color-primary\">\n      <i class=\"uil uil-md uil-apps\"></i>\n    </button>\n    <button (click)=\"displayStyle = 'list'\" class=\"btn btn-icon-action color-primary\">\n      <i class=\"uil uil-md uil-grids rotate-90\"></i>\n    </button>\n  </div>\n\n  <div class=\"row g-0 d-flex justify-content-center\" [ngClass]=\"{'card-basic': displayStyle === 'list'}\">\n    <ng-container *ngFor=\"let item of items\">\n      <ng-container *ngTemplateOutlet=\"getTemplate(); context: {$implicit: item}\"></ng-container>\n    </ng-container>\n  </div>\n\n</div>\n\n<ng-template #actionButton let-item>\n  <button *ngIf=\"item.iconCallback && item.iconClass\"\n          (click)=\"item.iconCallback(item)\"\n          [className]=\"'btn btn-icon-action px-2 py-0 color-' + (item.iconColor ? item.iconColor : 'primary') + (item.iconOutline ? ' btn-outline-' + item.iconColor : '')\"\n          style=\"height: fit-content; align-self: center;\"\n  >\n    <i [className]=\"item.iconClass\"></i>\n  </button>\n</ng-template>\n\n<ng-template #gridTemplate let-item>\n  <div class=\"card-basic model-collection-card hoverable rad-md col-auto m-3\"\n       [ngClass]=\"{'reverse': gridHeaderReverse}\"\n       style=\"height: auto;\"\n  >\n    <div class=\"model-collection-card-header\">\n      <ng-container *ngIf=\"item.thumbnailPicture\">\n        <div [ngStyle]=\"{'background-image': 'url(' + item.thumbnailPicture + ')'}\" class=\"img-thumbnail align-self-center\"></div>\n      </ng-container>\n      <div class=\"d-flex flex-column justify-content-center flex-fill text-overflow ms-2\">\n        <ng-container *ngTemplateOutlet=\"titleSubtitle; context: {$implicit: item}\"></ng-container>\n      </div>\n      <ng-container *ngTemplateOutlet=\"actionTemplate ? actionTemplate : actionButton; context: {$implicit: item}\"></ng-container>\n    </div>\n    <div\n      (click)=\"item.bodyCallback ? item.bodyCallback(item) : null\"\n      [ngClass]=\"{'cursor-pointer': item.bodyCallback, 'rad-md-top': gridHeaderReverse, 'rad-md-bottom': !gridHeaderReverse}\"\n      class=\"model-collection-card-body fixed-height image-fluid-container\"\n      [ngStyle]=\"{'background-color': bodyBackgroundColor ? bodyBackgroundColor : null}\"\n    >\n      <img [attr.alt]=\"item.bodyPicture\" [attr.src]=\"item.bodyPicture\">\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #listTemplate let-item>\n  <div class=\"list-item d-flex py-3 pe-3 pe-lg-5\">\n    <div (click)=\"item.bodyCallback ? item.bodyCallback(item) : null\" class=\"image-fluid-container mx-3 mx-lg-4\">\n      <img [attr.alt]=\"item.bodyPicture\" [attr.src]=\"item.bodyPicture\">\n    </div>\n    <div class=\"d-block flex-fill text-overflow\">\n      <ng-container *ngTemplateOutlet=\"titleSubtitle; context: {$implicit: item}\"></ng-container>\n    </div>\n    <ng-container *ngTemplateOutlet=\"actionTemplate ? actionTemplate : actionButton; context: {$implicit: item}\"></ng-container>\n  </div>\n</ng-template>\n\n<ng-template #galleryTemplate let-item>\n  <div class=\"card-basic model-collection-card square-sm col-auto m-0 position-relative\" style=\"height: auto;\">\n    <div\n      (click)=\"item.bodyCallback ? item.bodyCallback(item) : null\"\n      [ngClass]=\"{'cursor-pointer': item.bodyCallback, 'image-fluid-container': !overflowGallery, 'overflow-hidden d-flex justify-content-center': overflowGallery}\"\n      class=\"model-collection-card-body square-sm\"\n      [ngStyle]=\"{'background-color': bodyBackgroundColor ? bodyBackgroundColor : null}\"\n    >\n      <img [attr.alt]=\"item.bodyPicture\" [attr.src]=\"item.bodyPicture\">\n    </div>\n    <div class=\"position-absolute\" style=\"bottom: 5px; right: 5px;\">\n      <ng-container *ngTemplateOutlet=\"actionTemplate ? actionTemplate : actionButton; context: {$implicit: item}\"></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #titleSubtitle let-item>\n  <p (click)=\"item.titleCallback ? item.titleCallback(item) : null\"\n     [ngClass]=\"{\n            'title-link': !!item.titleCallback === true,\n            'title': !!item.titleCallback === false,\n            'bigger': !!item.thumbnailPicture === false\n           }\"\n     class=\"align-self-start\">{{item.title}}\n  </p>\n  <p *ngIf=\"item.subtitle\"\n     (click)=\"item.subtitleCallback ? item.subtitleCallback(item) : null\"\n     class=\"secondary-link align-self-start\"\n     [ngClass]=\"{\n            'secondary-link': !!item.subtitleCallback === true,\n            'secondary': !!item.subtitleCallback === false\n           }\"\n  >\n    {{item.subtitle}}\n  </p>\n</ng-template>\n"
        },
        {
            "name": "IconCardComponent",
            "id": "component-IconCardComponent-c7da09732accd344db173afb858627ea60948b40041d8c4810a1d1d2476e41fffa275c48426b2055596590351730c1912e474c02d4e64575dc269b270f69104f",
            "file": "src/components/cards/icon-card/icon-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-icon-card",
            "styleUrls": [
                "./icon-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hoverable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconCardArray",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "IconCardArrayItem[]",
                    "decorators": []
                },
                {
                    "name": "iconClass",
                    "defaultValue": "'uil uil-star'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "orientation",
                    "defaultValue": "OrientationEnum.Y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "OrientationEnum",
                    "decorators": []
                },
                {
                    "name": "paddingClass",
                    "defaultValue": "'p-3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textPosition",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"start\" | \"end\" | \"center\"",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {OrientationEnum} from '../../../models/orientation';\n\nexport interface IconCardArrayItem {\n  title: string;\n  subtitle: string;\n  iconClass: string;\n}\n\n@Component({\n  selector: 'pm-icon-card',\n  templateUrl: './icon-card.component.html',\n  styleUrls: ['./icon-card.component.scss']\n})\nexport class IconCardComponent {\n\n  @Input('textPosition') textPosition: 'start' | 'end' | 'center' = 'center';\n  @Input('paddingClass') paddingClass: string = 'p-3';\n  @Input('hoverable') hoverable: boolean = true;\n  @Input('orientation') orientation: OrientationEnum = OrientationEnum.Y;\n  @Input('iconClass') iconClass: string = 'uil uil-star';\n  @Input('title') title: string = '';\n  @Input('subtitle') subtitle: string = '';\n  @Input('iconCardArray') iconCardArray: IconCardArrayItem[] = [];\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-icon-card {\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.35);\n\n  h4 {\n    font-size: 1.5rem;\n    color: var(--color-default);\n    margin-bottom: 15px;\n  }\n\n  p {\n    font-size: 1.1rem;\n    margin-bottom: 0;\n    color: var(--color-gray-darker);\n  }\n\n  i {\n    font-size: 36px;\n    color: var(--color-primary);\n    margin-bottom: 1rem;\n  }\n\n}\n",
                    "styleUrl": "./icon-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "templateData": "<ng-container *ngTemplateOutlet=\"iconCardArray.length > 0 ? cardArray : baseIconCard\"></ng-container>\n\n<ng-template #cardArray>\n  <div class=\"row\">\n    <div *ngFor=\"let card of iconCardArray; let first = first;\"\n         class=\"col-12 col-md-{{12/iconCardArray.length}}\"\n         [ngClass]=\"{'mt-3 mt-sm-0': !first}\"\n    >\n      <ng-container *ngTemplateOutlet=\"baseIconCard; context: {$implicit: card}\"></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #baseIconCard let-card>\n  <div class=\"pm-icon-card\">\n    <pm-basic-card\n      [className]=\"' text-' + textPosition\"\n      [hoverable]=\"hoverable\"\n      [paddingClass]=\"paddingClass\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"orientation === 'vertical' ? verticalTemplate : horizontalTemplate;\n        context: {$implicit: card}\"\n      ></ng-container>\n    </pm-basic-card>\n  </div>\n</ng-template>\n\n<ng-template #verticalTemplate let-card>\n  <i aria-hidden=\"true\" [className]=\"card ? card.iconClass : iconClass\"></i>\n  <h4>{{card ? card.title : title}}</h4>\n  <p>{{card ? card.subtitle : subtitle}}</p>\n</ng-template>\n\n<ng-template #horizontalTemplate let-card>\n  <div class=\"d-flex\">\n    <i aria-hidden=\"true\" [className]=\"'d-flex h-100 align-self-start' + card ? card.iconClass : iconClass\"></i>\n    <div class=\"text-start ms-3\">\n      <h4>{{card ? card.title : title}}</h4>\n      <p>{{card ? card.subtitle : subtitle}}</p>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-ab39014a26986ec1856db0f54bf0e99b655412f6ef27cce65a6a07fe722591bba3b00f957292d93d7b3bf44477c021b7af9609187e2f2a5e30d3e81656463583",
            "file": "src/components/inputs/multi-select/multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, useValue: {\n        autoActiveFirstOption: false, overlayPanelClass: \n    }\n}"
                }
            ],
            "selector": "pm-multi-select",
            "styleUrls": [
                "./multi-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "borderRadius",
                    "defaultValue": "Sizes.md",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "Sizes",
                    "decorators": []
                },
                {
                    "name": "limit",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlimite máximo de seleções de itens\n",
                    "description": "<p>limite máximo de seleções de itens</p>\n",
                    "line": 63,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopções a serem exibidas no input\n",
                    "description": "<p>opções a serem exibidas no input</p>\n",
                    "line": 54,
                    "type": "MultiSelectOption[]",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTexto a ser exibido no input\n",
                    "description": "<p>Texto a ser exibido no input</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "roundedThumbnail",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nse as thumbnails serão arredondadas\n",
                    "description": "<p>se as thumbnails serão arredondadas</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectedOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpções que ja vem selecionadas\n",
                    "description": "<p>Opções que ja vem selecionadas</p>\n",
                    "line": 67,
                    "type": "MultiSelectOption[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionsChanged",
                    "defaultValue": "new EventEmitter<MultiSelectOption[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAo ser selecionada uma opção nova, emite\n",
                    "description": "<p>Ao ser selecionada uma opção nova, emite</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MultiSelectOption[]>",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "inputBoxEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputBox'"
                        }
                    ]
                },
                {
                    "name": "myControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "trigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatAutocompleteTrigger",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'trigger'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MultiSelectOption[]",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clearSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayFn",
                    "args": [
                        {
                            "name": "user",
                            "type": "MultiSelectOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "MultiSelectOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isOptionSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "MultiSelectOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "MultiSelectOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeSelectedOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "MultiSelectOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "MultiSelectOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport _ from 'lodash';\nimport {MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocompleteTrigger} from '@angular/material/autocomplete';\nimport {Sizes} from '../../../models/sizes';\n\nexport interface MultiSelectOption {\n  label: string;\n  value: any;\n  thumbnail: string;\n}\n\n@Component({\n  selector: 'pm-multi-select',\n  templateUrl: './multi-select.component.html',\n  styleUrls: ['./multi-select.component.scss'],\n  providers: [\n    {\n      provide: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,\n      useValue: {\n        autoActiveFirstOption: false,\n        overlayPanelClass: 'pm-multi-select-autocomplete-panel'\n      }\n    }\n  ]\n})\nexport class MultiSelectComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('inputBox') inputBoxEl: ElementRef;\n  @ViewChild('trigger') trigger: MatAutocompleteTrigger;\n  /**\n   * Ao ser selecionada uma opção nova, emite\n   */\n  @Output() selectedOptionsChanged = new EventEmitter<MultiSelectOption[]>();\n  /**\n   * Texto a ser exibido no input\n   */\n  @Input() placeholder: string = '';\n  /**\n   * opções a serem exibidas no input\n   */\n  @Input() options: MultiSelectOption[] = [];\n  @Input() borderRadius: Sizes = Sizes.md;\n  /**\n   * se as thumbnails serão arredondadas\n   */\n  @Input() roundedThumbnail: boolean = true;\n  /**\n   * limite máximo de seleções de itens\n   */\n  @Input() limit: number = 0;\n  /**\n   * Opções que ja vem selecionadas\n   */\n  @Input() selectedOptions: MultiSelectOption[] = [];\n  myControl = new FormControl();\n  filteredOptions: Observable<MultiSelectOption[]>;\n\n  constructor(\n    private cdr: ChangeDetectorRef\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => (typeof value === 'string' ? value : `${value.label}`)),\n      map(label => this._filter(label)),\n    );\n  }\n\n  ngAfterViewInit(): void {\n    this.clearInput();\n  }\n\n  displayFn(user: MultiSelectOption): string {\n    return user && user.label ? user.label : '';\n  }\n\n  private _filter(label: string): MultiSelectOption[] {\n    const filterValue = label.toLowerCase();\n\n    return _.difference(\n      this.options.filter(option => option.label.toLowerCase().includes(filterValue)),\n      this.selectedOptions\n    );\n  }\n\n  public selectOption(option: any): void {\n    this.selectedOptions.push(option);\n    this.selectedOptionsChanged.emit(this.selectedOptions);\n    this.clearInput();\n  }\n\n  private clearInput(): void {\n    this.myControl.setValue('');\n    try { this.inputBoxEl.nativeElement.blur(); } catch (e) {}\n    this.cdr.detectChanges();\n  }\n\n  public removeSelectedOption(option: MultiSelectOption): void {\n    _.remove(this.selectedOptions, option);\n    this.clearInput();\n  }\n\n  public isOptionSelected(option: MultiSelectOption): boolean {\n    return !!this.selectedOptions.find(sOptions => _.isEqual(sOptions, option));\n  }\n\n  public openSelect(): void {\n    setTimeout(() => {\n      try { this.inputBoxEl.nativeElement.focus(); } catch (e) {}\n    }, 0);\n  }\n\n  public clearSelected(): void {\n    this.selectedOptions = [];\n    this.selectedOptionsChanged.emit(this.selectedOptions);\n    this.clearInput();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/default/mixins/buttons';\n\n.pm-multi-select {\n  @include btn-styles(var(--color-light), var(--color-light-sat), false);\n\n  form, input {\n    width: -webkit-fill-available;\n  }\n\n  form {\n    padding-top: 1px;\n  }\n\n  input {\n    padding: 0.5em;\n    background-color: transparent;\n\n    color: var(--color-gray-darker) !important;\n  }\n\n  .chip-container {\n    background-color: var(--color-light);\n    border: 1px solid var(--color-light-states);\n    border-radius: var(--border-radius-md);\n    padding: 3px;\n    color: var(--color-gray-dark);\n\n    button {\n      border: none !important;\n    }\n  }\n\n  i {\n    color: var(--color-light-states);\n    right: 0.5em;\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n    align-content: center;\n    justify-content: center;\n    margin-top: -4px;\n\n    &:before {\n      align-self: center;\n    }\n  }\n\n}\n\n::ng-deep {\n  .pm-multi-select-autocomplete-panel {\n    margin-left: -4px;\n\n    * {\n      box-shadow: none !important;\n    }\n\n    .mat-autocomplete-panel {\n      background-color: var(--color-light);\n      margin-top: -2px;\n    }\n  }\n\n  .pm-multi-select-thumbnail-container {\n    width: 25px;\n    height: 25px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    box-sizing: border-box;\n    outline: none;\n    flex: 0 0 auto;\n\n    &.circular {\n      border-radius: 50%;\n      margin: 0;\n      overflow: hidden;\n      border: 1px solid var(--color-light-states);\n    }\n\n    img {\n      object-fit: cover;\n    }\n  }\n}\n",
                    "styleUrl": "./multi-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div #multiselect class=\"pm-multi-select cursor-pointer border-radius-{{borderRadius}}\" (click)=\"$event.stopPropagation(); openSelect();\">\n  <div class=\"d-flex flex-wrap p-1 rad-md position-relative\">\n    <div class=\"d-flex flex-row justify-content-start flex-wrap\">\n      <div *ngFor=\"let selected of selectedOptions; let first = first\" [ngClass]=\"{'m-1 chip-container': true}\">\n        <div class=\"d-flex flex-row align-items-center\">\n          <ng-container *ngTemplateOutlet=\"thumbnailContainer; context: {$implicit: selected, marginStart: true}\"></ng-container>\n          <p class=\"m-0 ms-1\">{{selected.label}}</p>\n          <button class=\"btn btn-light\" (click)=\"$event.stopPropagation(); removeSelectedOption(selected)\">x</button>\n        </div>\n      </div>\n    </div>\n    <form>\n      <input #inputBox\n             #trigger=\"matAutocompleteTrigger\"\n             [hidden]=\"selectedOptions.length === options.length || (!!limit && selectedOptions.length >= limit)\"\n             matInput\n             class=\"form-control h-100 border-0\"\n             type=\"text\"\n             [formControl]=\"myControl\"\n             [placeholder]=\"placeholder\"\n             [matAutocomplete]=\"auto\"\n      >\n\n      <mat-autocomplete #auto=\"matAutocomplete\"\n                        (optionSelected)=\"selectOption($event.option.value);\"\n                        [panelWidth]=\"multiselect.offsetWidth\"\n      >\n        <ng-container *ngFor=\"let option of filteredOptions | async\">\n          <mat-option\n            [hidden]=\"isOptionSelected(option)\"\n            [value]=\"option\"\n          >\n            <div class=\"d-flex flex-row align-items-center\">\n              <ng-container *ngTemplateOutlet=\"thumbnailContainer; context: {$implicit: option}\"></ng-container>\n              <span class=\"color-gray-dark\" [ngClass]=\"{'ms-2': option?.thumbnail}\">{{option.label}}</span>\n            </div>\n          </mat-option>\n        </ng-container>\n      </mat-autocomplete>\n    </form>\n    <i class=\"position-absolute uil uil-lg uil-angle-down\"></i>\n  </div>\n</div>\n\n<ng-template #thumbnailContainer let-option let-marginStart=\"marginStart\">\n  <div *ngIf=\"option?.thumbnail\" class=\"pm-multi-select-thumbnail-container\" [ngClass]=\"{'ms-2': marginStart, 'circular': roundedThumbnail, 'mx-2': roundedThumbnail}\">\n    <img\n      aria-hidden\n      [src]=\"option.thumbnail\"\n      height=\"25\"\n    >\n  </div>\n</ng-template>\n"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-111190288b86275b2c6275d298774733bb50d1e17e933044dcaa2c44ddfccdf2b86f678544867b1d63c908a769095fdaf56838bef0c6ca01d8663a387b0801bc",
            "file": "src/components/inputs/radio-button/radio-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDesabilita a interação com os valores do radio button.\n",
                    "description": "<p>Desabilita a interação com os valores do radio button.</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "orientation",
                    "defaultValue": "OrientationEnum.Y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOrientação horizontal ou vertical do componente.\nAceita `horizontal` | `vertical`\n",
                    "description": "<p>Orientação horizontal ou vertical do componente.\nAceita <code>horizontal</code> | <code>vertical</code></p>\n",
                    "line": 15,
                    "type": "OrientationEnum",
                    "decorators": []
                },
                {
                    "name": "selectedValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValor selecionado\n",
                    "description": "<p>Valor selecionado</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray de strings que serão exibidos no radio button\n",
                    "description": "<p>Array de strings que serão exibidos no radio button</p>\n",
                    "line": 23,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAo trocar o valor selecionado, emite este evento com o novo valor\n",
                    "description": "<p>Ao trocar o valor selecionado, emite este evento com o novo valor</p>\n",
                    "line": 31,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {OrientationEnum} from '../../../models/orientation';\n\n@Component({\n  selector: 'pm-radio-button',\n  templateUrl: './radio-button.component.html',\n  styleUrls: ['./radio-button.component.scss']\n})\nexport class RadioButtonComponent {\n\n  /**\n   * Orientação horizontal ou vertical do componente.\n   * Aceita `horizontal` | `vertical`\n   */\n  @Input() orientation: OrientationEnum = OrientationEnum.Y;\n  /**\n   * Desabilita a interação com os valores do radio button.\n   */\n  @Input() disabled = false;\n  /**\n   * Array de strings que serão exibidos no radio button\n   */\n  @Input() values: string[] = [];\n  /**\n   * Valor selecionado\n   */\n  @Input() selectedValue: string;\n  /**\n   * Ao trocar o valor selecionado, emite este evento com o novo valor\n   */\n  @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() {\n  }\n\n  public setValue(value: string): void {\n    this.selectedValue = value;\n    this.selectedChange.emit(this.selectedValue);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-radio-button {\n  mat-radio-group {\n    &.horizontal {\n      mat-radio-button {\n        &:not(:first-child) {\n          margin-left: 1em;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "templateData": "<div class=\"pm-radio-button\">\n  <mat-radio-group\n    [(ngModel)]=\"selectedValue\"\n    [disabled]=\"disabled\"\n    (change)=\"setValue($event.value)\"\n    [ngClass]=\"{'d-flex flex-column': orientation === 'vertical', 'horizontal': orientation === 'horizontal'}\">\n    <mat-radio-button *ngFor=\"let value of values\" [value]=\"value\">\n      {{value}}\n    </mat-radio-button>\n  </mat-radio-group>\n</div>\n"
        },
        {
            "name": "SpinnerComponent",
            "id": "component-SpinnerComponent-44ed33f84d10ba7601a12a96273699b10082ca67b2a4668af51b4e4141572c257840e3b56b46aa6d6c980f547f5a0551846cc38b07d1797b743bfd8e831a4bd1",
            "file": "src/directives/ng-if-loaded/spinner/spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-spinner",
            "styleUrls": [
                "./spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'pm-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-spinner {\n  // Cube parameters\n  $colorBorder: #f5f5f5;\n  $colorMin: #dddddd;\n  //$colorMax: #505050;\n  $colorMax: #dddddd;\n  $size: 30px;\n  // Time parameters\n  $duration: 1s;\n  $wait: 20%;\n  $borderSize: $size * 0.1;\n\n  .spinner-wrap {\n    perspective: 2 * $size;\n    perspective-origin: 50% 0px;\n    min-height: 50px;\n    padding-top: 3px;\n    align-self: center;\n  }\n\n  .spinner-cube {\n    position: relative;\n    width: $size;\n    transform-style: preserve-3d;\n  }\n\n  .spinner-cube div {\n    position: absolute;\n    width: $size;\n    height: $size;\n  }\n\n  .spinner-front {\n    background: $colorMin;\n    border: $borderSize solid $colorBorder;\n    transform: translateZ($size * 0.5);\n    animation: colorsf $duration ease-in-out infinite;\n    -moz-animation: colorsf $duration ease-in-out infinite;\n    -webkit-animation: colorsf $duration ease-in-out infinite;\n    -o-animation: colorsf $duration ease-in-out infinite;\n    -ms-animation: colorsf $duration ease-in-out infinite;\n  }\n\n  .spinner-left {\n    background: $colorMax;\n    border: $borderSize solid $colorBorder;\n    transform: rotateY(270deg) translateX(-$size * 0.5);\n    transform-origin: center left;\n    animation: colorsl $duration ease-in-out infinite;\n    -moz-animation: colorsl $duration ease-in-out infinite;\n    -webkit-animation: colorsl $duration ease-in-out infinite;\n    -o-animation: colorsl $duration ease-in-out infinite;\n    -ms-animation: colorsl $duration ease-in-out infinite;\n  }\n\n  .spinner-top {\n    background: $colorMax;\n    border: $borderSize solid $colorBorder;\n    transform: rotateX(90deg) translateZ($size * 0.5);\n    animation: colorsl $duration ease-in-out infinite;\n    -moz-animation: colorsl $duration ease-in-out infinite;\n    -webkit-animation: colorsl $duration ease-in-out infinite;\n    -o-animation: colorsl $duration ease-in-out infinite;\n    -ms-animation: colorsl $duration ease-in-out infinite;\n  }\n\n  @keyframes colorsf {\n    #{$wait} {\n      background: $colorMin;\n    }\n    100% {\n      background: $colorMax;\n    }\n  }\n\n  @keyframes colorsl {\n    #{$wait} {\n      background: $colorMax;\n    }\n    100% {\n      background: $colorMin;\n    }\n  }\n\n  @keyframes cube {\n    #{$wait} {\n      transform: rotateY(0deg);\n    }\n    100% {\n      transform: rotateY(90deg);\n    }\n  }\n\n  @-webkit-keyframes colorsf {\n    #{$wait} {\n      background: $colorMin;\n    }\n    100% {\n      background: $colorMax;\n    }\n  }\n\n  @-webkit-keyframes colorsl {\n    #{$wait} {\n      background: $colorMax;\n    }\n    100% {\n      background: $colorMin;\n    }\n  }\n\n  @-webkit-keyframes cube {\n    #{$wait} {\n      transform: rotateY(0deg);\n    }\n    100% {\n      transform: rotateY(90deg);\n    }\n  }\n\n\n  @-o-keyframes colorsf {\n    #{$wait} {\n      background: $colorMin;\n    }\n    100% {\n      background: $colorMax;\n    }\n  }\n\n  @-o-keyframes colorsl {\n    #{$wait} {\n      background: $colorMax;\n    }\n    100% {\n      background: $colorMin;\n    }\n  }\n\n  @-o-keyframes cube {\n    #{$wait} {\n      transform: rotateY(0deg);\n    }\n    100% {\n      transform: rotateY(90deg);\n    }\n  }\n\n  @-ms-keyframes colorsf {\n    #{$wait} {\n      background: $colorMin;\n    }\n    100% {\n      background: $colorMax;\n    }\n  }\n\n  @-ms-keyframes colorsl {\n    #{$wait} {\n      background: $colorMax;\n    }\n    100% {\n      background: $colorMin;\n    }\n  }\n\n  @-ms-keyframes cube {\n    #{$wait} {\n      transform: rotateY(0deg);\n    }\n    100% {\n      transform: rotateY(90deg);\n    }\n  }\n\n  @-ms-keyframes colorsf {\n    #{$wait} {\n      background: $colorMin;\n    }\n    100% {\n      background: $colorMax;\n    }\n  }\n\n  @-moz-keyframes colorsl {\n    #{$wait} {\n      background: $colorMax;\n    }\n    100% {\n      background: $colorMin;\n    }\n  }\n\n  @-moz-keyframes cube {\n    #{$wait} {\n      transform: rotateY(0deg);\n    }\n    100% {\n      transform: rotateY(90deg);\n    }\n  }\n\n  .spinner-cube {\n    z-index: 999;\n    animation: cube $duration ease-in-out infinite;\n    -moz-animation: cube $duration ease-in-out infinite;\n    -webkit-animation: cube $duration ease-in-out infinite;\n    -o-animation: cube $duration ease-in-out infinite;\n    -ms-animation: cube $duration ease-in-out infinite;\n  }\n}\n",
                    "styleUrl": "./spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"pm-spinner\">\n  <div class=\"d-flex justify-content-center w-100 h-100\" style=\"min-height: 50px;\">\n    <div class=\"spinner-wrap\">\n      <div class=\"spinner-cube\">\n        <div class=\"spinner-front\"></div>\n        <div class=\"spinner-left\"></div>\n        <div class=\"spinner-top\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "StepperComponent",
            "id": "component-StepperComponent-e2918ac16539693339f14d80adfb2a7b10c460ca3fda949bf1a2dd123f96a71440d7eb5e7b3b770ee08503bf59c637760617128d9b6b9bee47883e6cd465e93d",
            "file": "src/components/navigation/stepper/stepper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: CdkStepper, useExisting: StepperComponent }",
                    "type": "component"
                }
            ],
            "selector": "pm-stepper",
            "styleUrls": [
                "./stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stepper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "selectStepByIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {CdkStepper} from '@angular/cdk/stepper';\n\n@Component({\n  selector: 'pm-stepper',\n  templateUrl: './stepper.component.html',\n  styleUrls: ['./stepper.component.scss'],\n  providers: [{provide: CdkStepper, useExisting: StepperComponent}]\n})\nexport class StepperComponent extends CdkStepper {\n\n  selectStepByIndex(index: number): void {\n    this.selectedIndex = index;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-stepper {\n  .example-container {\n    border: 1px solid;\n    padding: 10px;\n    margin: 10px;\n  }\n\n  .example-step-navigation-bar {\n    display: flex;\n    justify-content: flex-start;\n    margin-top: 10px;\n  }\n\n  .example-step {\n    background: transparent;\n    border: 0;\n    margin: 0 10px;\n    padding: 10px;\n    color: inherit;\n  }\n\n  .example-step.example-active {\n    border-bottom: 1px solid;\n    font-weight: 600;\n  }\n\n  .example-nav-button {\n    background: transparent;\n    border: 0;\n    color: inherit;\n  }\n}\n",
                    "styleUrl": "./stepper.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "CdkStepper",
            "templateData": "<div [ngClass]=\"{'pm-stepper': true}\">\n  <section class=\"example-container\">\n    <header>\n      <ng-container *ngTemplateOutlet=\"headerActions\"></ng-container>\n      <h2>Step {{ selectedIndex + 1 }}/{{ steps.length }}</h2>\n    </header>\n\n    <div [ngTemplateOutlet]=\"selected ? selected.content : null\"></div>\n\n    <footer class=\"example-step-navigation-bar\">\n      <ng-container *ngTemplateOutlet=\"footerActions\"></ng-container>\n    </footer>\n  </section>\n\n  <ng-template #headerActions>\n    <button class=\"example-nav-button\" cdkStepperPrevious>&larr;</button>\n    <button\n      class=\"example-step\"\n      [class.example-active]=\"selectedIndex === i\"\n      *ngFor=\"let step of steps; let i = index\"\n      (click)=\"selectStepByIndex(i)\"\n    >\n      Step {{ i + 1 }}\n    </button>\n    <button class=\"example-nav-button\" cdkStepperNext>&rarr;</button>\n  </ng-template>\n\n  <ng-template #footerActions>\n    <div class=\"w-100 d-flex justify-content-between\">\n      <pm-button (click)=\"previous()\" [type]=\"'light'\">Retornar</pm-button>\n      <pm-button (click)=\"next()\" [type]=\"'primary'\">Próximo</pm-button>\n    </div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "TableListComponent",
            "id": "component-TableListComponent-db0416762bc193828740232d9508b4137ba706f022b8805452db1098feb2fa592c973da16e88d00f44a7f8225ec970f1b038b05cf8d64e944c8972b0e7b0c275",
            "file": "src/components/lists/table-list/table-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-table-list",
            "styleUrls": [
                "./table-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "Sizes",
                    "decorators": []
                },
                {
                    "name": "columnNames",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "disableExpandedOnDisabledRow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "expandedDetailTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "imageColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "imageHeight",
                    "defaultValue": "'50px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "numberFormat",
                    "defaultValue": "'1.2-2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "numberPrefix",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemListChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "doubleLabelCell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'doubleLabelCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "expandedRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formattedNumberCell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formattedNumberCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "imageCell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'imageCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "isExpansionDetailRow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "isNormalRow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "singleLabelCell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'singleLabelCell', {static: true}"
                        }
                    ]
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'table', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disableHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSome com a linha de header\n",
                    "description": "<p>Some com a linha de header</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enableHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMostra a linha de header\n",
                    "description": "<p>Mostra a linha de header</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCellTemplate",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TemplateRef<any>",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetorna o template que será renderizada a celula de acordo com o input de item e coluna\n",
                    "description": "<p>Retorna o template que será renderizada a celula de acordo com o input de item e coluna</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4157,
                                "end": 4161,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4151,
                                "end": 4156,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>: item da lista de itens</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4198,
                                "end": 4204,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "column"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4192,
                                "end": 4197,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>: propriedade do item</p>\n"
                        }
                    ]
                },
                {
                    "name": "getItemList",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetorna a lista atual de itens na tabela\n",
                    "description": "<p>Retorna a lista atual de itens na tabela</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSelectedRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVerifica se a row é igual à selecionada\n",
                    "description": "<p>Verifica se a row é igual à selecionada</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3000,
                                "end": 3003,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "row"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2994,
                                "end": 2999,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadExpandedDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReconstroi os elementos da tabela para incluir o \"detail row\" e deixar ela expansível\n",
                    "description": "<p>Reconstroi os elementos da tabela para incluir o &quot;detail row&quot; e deixar ela expansível</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3207,
                                "end": 3214,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 121,
                                "escapedText": "private"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setItemList",
                    "args": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTroca a lista de itens da tabela\n",
                    "description": "<p>Troca a lista de itens da tabela</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndá como selecionada a row atual CASO exista um template de expandedDetailTemplate\n",
                    "description": "<p>dá como selecionada a row atual CASO exista um template de expandedDetailTemplate</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2520,
                                "end": 2523,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "row"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2514,
                                "end": 2519,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {Sizes} from '../../../models/sizes';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {MatTable, MatTableDataSource} from '@angular/material/table';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'pm-table-list',\n  templateUrl: './table-list.component.html',\n  styleUrls: ['./table-list.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class TableListComponent implements AfterViewInit {\n\n  @Output() onItemListChange = new EventEmitter();\n  @Input() columns: string[] = [];\n  @Input() columnNames: string[] = [];\n  @Input() imageColumns: string[] = [];\n  @Input() imageHeight: string = '50px';\n  @Input() showHeader: boolean = true;\n  @Input() numberFormat = '1.2-2';\n  @Input() numberPrefix = '';\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() itemList: any = [];\n  @Input() borderRadius: Sizes;\n  @Input() backgroundColor: string;\n\n  @Input() expandedDetailTemplate: TemplateRef<any>;\n  @Input() disableExpandedOnDisabledRow: boolean = true;\n\n\n  @ViewChild('table', {static: true}) table: MatTable<any>;\n  @ViewChild('singleLabelCell', {static: true}) singleLabelCell: TemplateRef<any>;\n  @ViewChild('doubleLabelCell', {static: true}) doubleLabelCell: TemplateRef<any>;\n  @ViewChild('imageCell', {static: true}) imageCell: TemplateRef<any>;\n  @ViewChild('formattedNumberCell', {static: true}) formattedNumberCell: TemplateRef<any>;\n\n  public expandedRow: any;\n  // tslint:disable-next-line:ban-types\n  isExpansionDetailRow = (i: number, row: Object) => row.hasOwnProperty('detailRow');\n  // tslint:disable-next-line:ban-types\n  isNormalRow = (i: number, row: Object) => true;\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n  }\n\n  ngAfterViewInit(): void {\n    if (typeof this.actionsTemplate !== 'undefined') {\n      if (this.columns.includes('ACTIONS') === false) {\n        this.columns.push('ACTIONS');\n        this.columnNames.push('');\n      }\n    }\n    this.reloadExpandedDetail();\n  }\n\n  /**\n   * dá como selecionada a row atual CASO exista um template de expandedDetailTemplate\n   * @param row\n   */\n  public setSelectedRow(row: any): void {\n    if (!_.isNil(this.expandedDetailTemplate)) {\n      if (row.hasOwnProperty('detailRow') === false) {\n        row = { detailRow: true, element: row };\n      }\n      if (row.element?.disabled) {\n        if (this.disableExpandedOnDisabledRow === false) {\n          this.expandedRow = row;\n        }\n      } else {\n        this.expandedRow = row;\n      }\n    }\n  }\n\n  /**\n   * Verifica se a row é igual à selecionada\n   * @param row\n   */\n  public isSelectedRow(row: any): boolean {\n    return _.isEqual(row, this.expandedRow);\n  }\n\n  /**\n   * Reconstroi os elementos da tabela para incluir o \"detail row\" e deixar ela expansível\n   * @private\n   */\n  private reloadExpandedDetail(): void {\n    const newItems: any[] = [];\n    this.itemList.forEach((element: any) => newItems.push(element, { detailRow: true, element }));\n    this.itemList = new MatTableDataSource(newItems);\n    this.changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Retorna a lista atual de itens na tabela\n   */\n  public getItemList(): any[] {\n    return this.itemList;\n  }\n\n  /**\n   * Troca a lista de itens da tabela\n   */\n  public setItemList(itemList: any[]): void {\n    this.itemList = itemList;\n    this.reloadExpandedDetail();\n    this.onItemListChange.emit(this.itemList);\n  }\n\n  /**\n   * Mostra a linha de header\n   */\n  public enableHeader(): void {\n    this.showHeader = true;\n  }\n\n  /**\n   * Some com a linha de header\n   */\n  public disableHeader(): void {\n    this.showHeader = false;\n  }\n\n  /**\n   * Retorna o template que será renderizada a celula de acordo com o input de item e coluna\n   * @param item: item da lista de itens\n   * @param column: propriedade do item\n   */\n  public getCellTemplate(item: any, column: string): TemplateRef<any> {\n    if (column === 'ACTIONS') {\n      return this.actionsTemplate;\n    } else if (Array.isArray(item[column])) {\n      return this.doubleLabelCell;\n    } else {\n      if (this.imageColumns.includes(column)) {\n        return this.imageCell;\n      } else {\n        if (typeof item[column] === 'number') {\n          return this.formattedNumberCell;\n        } else {\n          return this.singleLabelCell;\n        }\n      }\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-table-list {\n  width: 100%;\n  border-collapse: collapse;\n  overflow:hidden !important;\n\n  &.mat-table {\n    background-color: transparent;\n  }\n\n  mat-header-cell {\n    font-size: 16px;\n    font-weight: 600;\n  }\n\n  mat-cell {\n    &.disabled {\n      background-color: var(--color-gray-light);\n\n      * {\n        color: var(--color-gray-dark) !important;\n      }\n    }\n  }\n\n  .main-label {\n    margin: 0px;\n    color: rgba(0, 0, 0, 0.87);\n    font-size: 14px;\n  }\n\n  .sub-label {\n    margin: 0px;\n    color: #c0c0c0;\n  }\n\n  .element-row {\n    position: relative;\n  }\n\n  .element-row:not(.expanded) {\n    cursor: pointer;\n  }\n\n  .element-row.expanded {\n    border-bottom-color: transparent;\n  }\n}\n",
                    "styleUrl": "./table-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<mat-table #table [dataSource]=\"itemList\" class=\"pm-table-list\"\n           [ngStyle]=\"{'border-radius': borderRadius ? 'var(--border-radius-' + borderRadius + ')' : null, 'background-color': backgroundColor ? backgroundColor : null}\"\n>\n\n  <ng-container *ngFor=\"let column of columns; let i = index;\">\n    <ng-container matColumnDef=\"{{column}}\">\n      <mat-header-cell *matHeaderCellDef>{{columnNames ? columnNames[i] : column}}</mat-header-cell>\n      <mat-cell *matCellDef=\"let item\" [ngClass]=\"{'disabled': item?.disabled === true}\">\n        <ng-container\n          *ngTemplateOutlet=\"getCellTemplate(item, column);\n          context: {$implicit: item, column: column}\">\n        </ng-container>\n      </mat-cell>\n    </ng-container>\n  </ng-container>\n\n  <ng-container matColumnDef=\"expandedDetail\">\n    <mat-cell *matCellDef=\"let item\" [ngClass]=\"{'disabled': item?.disabled === true}\">\n      <ng-container *ngTemplateOutlet=\"expandedDetailTemplate; context: {$implicit: item.element}\"></ng-container>\n    </mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"columns\" [ngClass]=\"{'d-none': !showHeader}\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: columns\"\n           [ngClass]=\"{'element-row': expandedDetailTemplate}\"\n           [class.expanded]=\"expandedRow == row\"\n           (click)=\"setSelectedRow(row)\"\n  ></mat-row>\n  <mat-row *matRowDef=\"let row; columns: ['expandedDetail']; when: isExpansionDetailRow\"\n           [@detailExpand]=\"isSelectedRow(row) ? 'expanded' : 'collapsed'\"\n           (click)=\"setSelectedRow(row)\"\n           style=\"overflow: hidden\"\n  >\n  </mat-row>\n</mat-table>\n\n<ng-template #imageCell let-item let-column=\"column\">\n  <img [attr.src]=\"item[column]\" [attr.alt]=\"item[column]\"\n       class=\"img-fluid my-2\" [ngStyle]=\"{'height': imageHeight ? imageHeight : '50px', 'max-height': imageHeight ? imageHeight : '50px'}\">\n</ng-template>\n\n<ng-template #singleLabelCell let-item let-column=\"column\">\n  <p class=\"main-label\">{{item[column]}}</p>\n</ng-template>\n\n<ng-template #doubleLabelCell let-item let-column=\"column\">\n  <div class=\"d-block\">\n    <p class=\"main-label\">{{item[column][0]}}</p>\n    <p class=\"sub-label\">{{item[column][1]}}</p>\n  </div>\n</ng-template>\n\n<ng-template #formattedNumberCell let-item let-column=\"column\">\n  <p class=\"main-label\">{{numberPrefix}}{{item[column] | number: numberFormat}}</p>\n</ng-template>\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-e3f750beb7efb3a0bf57075383dec0378aad4f5eb8ddf18a4c2baaeb18eaff82ee5b7d51edf7fd1d030364a30700fb32cd9084d7c0fd2d56785de40587818a2b",
            "file": "src/components/containers/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pm-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {MatTabGroup} from '@angular/material/tabs';\n\n@Component({\n  selector: 'pm-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.scss']\n})\nexport class TabsComponent {\n\n  constructor() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pm-tabs {\n  &.horizontal-tabs {\n\n    .mat-tab-label {\n      margin-right: 0.5rem;\n    }\n\n    .mat-tab-label:last-child {\n      margin-right: 0px;\n    }\n\n    .mat-tab-label {\n      font-size: 15px;\n      background-color: transparent;\n      border-radius: var(--border-radius-xxl);\n      height: 45px;\n      min-width: 25px !important;\n      padding: 5px;\n      color: var(--color-default);\n      font-weight: 500;\n      width: 120px !important;\n\n      &:hover {\n        background-color: rgba(0, 0, 0, 0.03);\n      }\n\n      &.mat-tab-label-active {\n        background-color: rgba(var(--color-primary-states-rgb), 0.1);\n        color: var(--color-primary-states);\n        font-weight: 600;\n      }\n    }\n\n    .mat-tab-header {\n      border-bottom: none;\n    }\n\n    .mat-tab-header-pagination {\n      display: none !important;\n    }\n\n    .mat-ink-bar {\n      height: 100%;\n      left: 100% !important;\n      background-color: #51cbce33 !important;\n    }\n\n    .mat-tab-body-wrapper {\n      flex: 1 1 auto;\n      padding: 0px;\n      overflow-y: auto;\n      overflow-x: hidden;\n\n      label {\n        margin-top: 12px;\n        margin-bottom: 5px;\n        color: var(--color-default);\n      }\n\n      .btn-tooltip-sm {\n        height: 20px;\n        width: 20px;\n        border-radius: 50%;\n        padding: 0px;\n      }\n\n      .bool-div-container {\n        margin-top: 12px;\n        margin-bottom: 5px;\n      }\n    }\n  }\n\n  .vertical-tabs {\n    @extend .horizontal-tabs;\n\n    .mat-tab-label {\n      margin-top: 5px;\n    }\n\n    .mat-tab-group {\n      flex-direction: row;\n    }\n\n    .mat-tab-labels {\n      flex-direction: column;\n    }\n\n    .mat-tab-body-wrapper {\n      padding-left: 10px;\n    }\n\n    .mat-tab-label-container {\n      overflow-y: auto;\n    }\n\n    mat-tab-body {\n      min-height: 100px;\n    }\n  }\n}\n",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"pm-tabs horizontal-tabs\">\n  <ng-content></ng-content>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "BasicCardModule",
            "id": "module-BasicCardModule-75bf77df2f03a94cebbc2693b2a24cc538b6287191ff6dfb83f547e2596a3c5df8bacf6e9cd0e10d01a07edb049abb94ffe683b7b5e5654b30b32a0372b984ca",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/cards/basic-card/basic-card.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BasicCardComponent} from './basic-card.component';\n\n\n@NgModule({\n  declarations: [BasicCardComponent],\n  exports: [BasicCardComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class BasicCardModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BasicCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BasicCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-429426c026f3f89d6e4cc225446dc200ac92e71492f798cd2ad7ed108d22035782c9a12407dcca6df5939e5fce530061034f9b0fce4963d9d26d6154f9856ae5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/inputs/button/button.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ButtonComponent} from './button.component';\n\n\n@NgModule({\n  declarations: [ButtonComponent],\n  exports: [ButtonComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class ButtonModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "id": "module-CheckboxModule-37c6dd9a0ce62ca44116586cb34f46934154384708999dc90700e3504faa6ae9cc4ec8d6d25f38ae8178e8b88aa6b32afe0084bd8d1777892bbd42441900bf9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/inputs/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CheckboxComponent} from './checkbox.component';\nimport {FormsModule} from '@angular/forms';\n\n\n@NgModule({\n  declarations: [CheckboxComponent],\n  exports: [CheckboxComponent],\n  imports: [\n    CommonModule,\n    FormsModule\n  ]\n})\nexport class CheckboxModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ColorThemeModule",
            "id": "module-ColorThemeModule-0ab1c36753218132c82678b8c01e942874376d662555270dd5b2165e8827c12110da955e3bcd224817c36fb78557b70b634a00c4f5f451414c7fd1eb8d9de934",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/services/color-theme/color-theme.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "options",
                            "type": "ColorThemeModuleConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ColorThemeModule>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "ColorThemeModuleConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {ColorThemeService} from './color-theme.service';\nimport {colorThemeToken, defaultColorTheme} from './injection';\n\nexport interface ColorThemeModuleConfig {\n  theme?: string;\n}\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  exports: [],\n})\nexport class ColorThemeModule {\n  public static forRoot(options: ColorThemeModuleConfig = {}): ModuleWithProviders<ColorThemeModule> {\n    return {\n      ngModule: ColorThemeModule,\n      providers: [\n        ColorThemeService,\n        {provide: colorThemeToken, useValue: options.theme || defaultColorTheme},\n      ]\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComboBoxModule",
            "id": "module-ComboBoxModule-b3d8f7b29a3884a0be91e8ca7c096672e42876211783760457102500d2a794e96223b4751782fd2be27e0c367836537c323f3058cb0580865d2c0c06a9961f5f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/inputs/combo-box/combo-box.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComboBoxComponent} from './combo-box.component';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSelectModule} from '@angular/material/select';\nimport {FormsModule} from '@angular/forms';\n\n\n@NgModule({\n  declarations: [ComboBoxComponent],\n  exports: [ComboBoxComponent],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    FormsModule\n  ]\n})\nexport class ComboBoxModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComboBoxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ComboBoxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CopyContentInputModule",
            "id": "module-CopyContentInputModule-f783fe81fa910e9380eac7c18012d1817780790a65cfee7ff6f667b82a5189e34672ab0ec26b9f7aa9dd89fe830ff2b88427145aae4b1fdcd110363d6f02332d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/inputs/copy-content-input/copy-content-input.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CopyContentInputComponent} from './copy-content-input.component';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\n\n\n@NgModule({\n  declarations: [CopyContentInputComponent],\n  exports: [CopyContentInputComponent],\n  imports: [\n    CommonModule,\n    ClipboardModule\n  ]\n})\nexport class CopyContentInputModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CopyContentInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CopyContentInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DraggableListModule",
            "id": "module-DraggableListModule-4ac5c06f49c42ed7a5ba0656563f2614dea0a4843b40706e20c2bd44123906c0e9f56556e1bd26045cef9f112ce1fb9d7d867bb0194df6ee644358fbbd28dcfb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/lists/draggable-list/draggable-list.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DraggableListComponent} from './draggable-list.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {FormsModule} from '@angular/forms';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\n\n\n@NgModule({\n  declarations: [DraggableListComponent],\n  exports: [DraggableListComponent],\n  imports: [\n    CommonModule,\n    DragDropModule,\n    MatDialogModule,\n    FormsModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ]\n})\nexport class DraggableListModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DraggableListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DraggableListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DropdownActionsModule",
            "id": "module-DropdownActionsModule-122e66ae89796cf5788cda936b006f63178f7ebfb631ee6c6461f916f925f8ab7803c684d7a291802fb7c238fe742ff119ede0bd081a812ad8b1cc8df6af7431",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/inputs/dropdown-actions/dropdown-actions.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MatSelectModule} from '@angular/material/select';\nimport {ButtonModule} from '../button/button.module';\nimport {DropdownActionsComponent} from './dropdown-actions.component';\n\n\n@NgModule({\n  declarations: [DropdownActionsComponent],\n  exports: [DropdownActionsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatSelectModule,\n    ButtonModule,\n  ]\n})\nexport class DropdownActionsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropdownActionsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DropdownActionsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExpansionPanelModule",
            "id": "module-ExpansionPanelModule-161cf7236a855fbd5372e7bfccd1ab17f7a5b22e416cc9991fdc63313727765f79ab3c85bfd45b9b514e26c8c4804a32de887f7843fa32e564d89b72f6c20de5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/containers/expansion-panel/expansion-panel.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ExpansionPanelComponent} from './expansion-panel.component';\nimport {MatExpansionModule} from '@angular/material/expansion';\n\n\n@NgModule({\n  declarations: [ExpansionPanelComponent],\n  exports: [ExpansionPanelComponent],\n  imports: [\n    CommonModule,\n    MatExpansionModule\n  ]\n})\nexport class ExpansionPanelModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExpansionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExpansionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GridListModule",
            "id": "module-GridListModule-408b56217d15ba58c2f2511c1376b582fd310bc06362a4c61651bc09a3be54875dbdef5a0e0daaa7cbbdead8e1513d98a7875510e499480dd53054baf36977be",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/lists/grid-list/grid-list.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {GridListComponent} from './grid-list.component';\n\n\n@NgModule({\n  declarations: [GridListComponent],\n  exports: [GridListComponent],\n  imports: [\n    CommonModule\n  ]\n})\nexport class GridListModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GridListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GridListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconCardModule",
            "id": "module-IconCardModule-2e09763124de1955e0e7f0a39de30a6166a3e3f6abd5d2a0fdda329b860f1986e0595d8a03ea7cb34191a9c6b1b0a8e925a88bfaf4fc3b7226328ca9929175e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/cards/icon-card/icon-card.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IconCardComponent} from './icon-card.component';\nimport {BasicCardModule} from '../basic-card/basic-card.module';\n\n\n@NgModule({\n  declarations: [IconCardComponent],\n  exports: [IconCardComponent],\n  imports: [\n    CommonModule,\n    BasicCardModule\n  ]\n})\nexport class IconCardModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BasicCardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MultiSelectModule",
            "id": "module-MultiSelectModule-4aac78b777f4b68f56c2de29e4052ceba80bcc15125539aff358e6a2d209b072cc0325eacae028d97bb55449447fd95ecdc4d9385767d4b80798f307fadc4fa4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/inputs/multi-select/multi-select.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {MultiSelectComponent} from './multi-select.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatInputModule} from '@angular/material/input';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  declarations: [\n    MultiSelectComponent\n  ],\n  exports: [\n    MultiSelectComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule,\n    MatInputModule,\n  ]\n})\nexport class MultiSelectModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgIfLoadedModule",
            "id": "module-NgIfLoadedModule-86139e97d7b025f97e9a6024236897a2fd8b3f1a48b91ad296a1a3fca9ce82a528a9a7f803d47d2ba47b2441a3c9c1cf6a49b55d0998818aaeda6e83f3c89cef",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/directives/ng-if-loaded/ng-if-loaded.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "spinnerComponent",
                            "type": "ComponentType<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<NgIfLoadedModule>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "spinnerComponent",
                            "type": "ComponentType<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NgIfLoadedDirective} from './ng-if-loaded.directive';\nimport {SpinnerComponent} from './spinner/spinner.component';\nimport {IF_LOADED_SPINNER} from './injection';\nimport {ComponentType} from '@angular/cdk/overlay';\n\nconst directives = [\n  NgIfLoadedDirective,\n  SpinnerComponent\n];\n\n@NgModule({\n  declarations: directives,\n  exports: directives,\n  imports: [\n    CommonModule\n  ],\n})\nexport class NgIfLoadedModule {\n  // @ts-ignore\n  public static forRoot(spinnerComponent: ComponentType<any> = undefined): ModuleWithProviders<NgIfLoadedModule> {\n    return {\n      ngModule: NgIfLoadedModule,\n      providers: [\n        {provide: IF_LOADED_SPINNER, useValue: spinnerComponent || SpinnerComponent},\n      ]\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgIfLoadedDirective"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgIfLoadedDirective"
                        },
                        {
                            "name": "SpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RadioButtonModule",
            "id": "module-RadioButtonModule-8c94ceabad47d3dc0bed008d95e8dec2e77b0baf1fa0d6cf91b65d369170a2fe80b32abded16a8eb5973092f9a93edef79205106f04f5c3aae12c57cc4362224",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/inputs/radio-button/radio-button.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RadioButtonComponent} from './radio-button.component';\nimport {FormsModule} from '@angular/forms';\nimport {MatRadioModule} from '@angular/material/radio';\n\n\n@NgModule({\n  declarations: [RadioButtonComponent],\n  exports: [RadioButtonComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatRadioModule\n  ]\n})\nexport class RadioButtonModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StepperModule",
            "id": "module-StepperModule-4be658cff9db9159efd4f5875bb288a468d3601b1b543884cc258f89a9316cb9549e4473a354a9af586cb2f0f661902be13038936134825b858ffc9a4501526a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/navigation/stepper/stepper.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {StepperComponent} from './stepper.component';\nimport {CdkStepper, CdkStepperModule} from '@angular/cdk/stepper';\nimport {ButtonModule} from '../../inputs/button/button.module';\n\n@NgModule({\n  declarations: [StepperComponent],\n  exports: [StepperComponent],\n  imports: [\n    CommonModule,\n    CdkStepperModule,\n    ButtonModule\n  ],\n  providers: [\n    CdkStepper\n  ]\n})\nexport class StepperModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableListModule",
            "id": "module-TableListModule-0bafbd0b18537a93386461280dec94f486359083ffe6c31e5cf5ddc6c36917d84c282a618878f988043a44e64ee5658b9e249c8dda06a23aa70a9e6b296e4418",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/lists/table-list/table-list.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TableListComponent} from './table-list.component';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatSelectModule} from '@angular/material/select';\n\n\n@NgModule({\n  declarations: [TableListComponent],\n  exports: [TableListComponent],\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatSelectModule\n  ]\n})\nexport class TableListModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-7df0bd5f8f8f626b7d5242131d9930e4ff20e7ddc331d18dede50193f33d946a5952d37f27570aa27b12640b4169368be24232a532d34e374b14273cb5735212",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/components/containers/tabs/tabs.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TabsComponent} from '../tabs/tabs.component';\nimport {MatTabsModule} from '@angular/material/tabs';\n\n\n@NgModule({\n  declarations: [\n    TabsComponent\n  ],\n  exports: [\n    TabsComponent\n  ],\n  imports: [\n    CommonModule,\n    MatTabsModule\n  ]\n})\nexport class TabsModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ActionsTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ActionsTableTemplate.bind({})"
            },
            {
                "name": "ActionsTableTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableListComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-table-list\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [expandedDetailTemplate]=\"expandedDetailTemplate\"\n      [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n      [actionsTemplate]=\"actionsTemplate\"\n    ></pm-table-list>\n\n    <ng-template #actionsTemplate let-item let-column=\"column\">\n      <div [ngClass]=\"{'disabled': item?.disabled === true}\">\n        <button class=\"btn btn-primary\" [disabled]=\"item?.disabled\">Actions (id: {{item.id}})</button>\n      </div>\n    </ng-template>\n  `\n})"
            },
            {
                "name": "ArrayIconCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/cards/icon-card/icon-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BusyButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ColorTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "colorThemeToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/color-theme/injection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>(defaultColorTheme)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DangerButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/color-theme/color-theme.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  'color-primary': '#455363',\n  'color-default': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scripts/stories/default.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/cards/basic-card/basic-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  hoverable: false,\n  borderRadius: Sizes.md,\n  paddingClass: 'p-3'\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/cards/icon-card/icon-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  textPosition: 'center',\n  paddingClass: 'p-3',\n  hoverable: true,\n  orientation: OrientationEnum.Y,\n  iconClass: 'uil uil-star',\n  title: '',\n  subtitle: '',\n  iconCardArray: [],\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/containers/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: '',\n  type: MainColors.default,\n  busy: false,\n  busyText: '',\n  iconClass: '',\n  iconPosition: 'start',\n  outline: false,\n  disabled: false,\n  size: 'md',\n  fillWidth: false\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  checked: false,\n  disabled: false,\n  selectedItem: undefined,\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/combo-box/combo-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  items: [],\n  disabled: false,\n  selectedItem: undefined\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  disabled: false,\n  text: '',\n  copyCallback: undefined,\n  fillHeight: false,\n  btnColor: MainColors.primary,\n  borderRadius: Sizes.md\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  actions: []\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  options: [],\n  placeholder: '',\n  borderRadius: Sizes.md,\n  roundedThumbnail: true,\n  limit: 0,\n  selectedOptions: []\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/radio-button/radio-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  orientation: OrientationEnum.Y,\n  values: [],\n  disabled: false,\n  selectedValue: undefined\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  showIndex: true,\n  itemActionLabel: undefined,\n  itemMainLabel: undefined,\n  itemSubLabel: undefined,\n  actions: undefined,\n  itemList: undefined,\n  roundedBorders: true,\n  enableDragging: true,\n  enableSelection: true,\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/grid-list/grid-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  columns: [],\n  columnNames: [],\n  imageColumns: [],\n  imageHeight: '50px',\n  showHeader: true,\n  numberFormat: '1.2-2',\n  numberPrefix: '',\n  actionsTemplate: undefined,\n  itemList: undefined,\n  borderRadius: undefined,\n  backgroundColor: undefined,\n  expandedDetailTemplate: undefined,\n  disableExpandedOnDisabledRow: true,\n  expandedRow: undefined\n}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/navigation/stepper/stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{}"
            },
            {
                "name": "defaultArgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  flag: true\n}"
            },
            {
                "name": "DefaultBasicCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/cards/basic-card/basic-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultColorTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/color-theme/injection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'default'"
            },
            {
                "name": "DefaultComboBox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/combo-box/combo-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultCopyContentInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultDraggableList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultDropdownActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultExpansionPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultGridList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/grid-list/grid-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultIconCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/cards/icon-card/icon-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/combo-box/combo-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    label: 'Value 1',\n    value: 1\n  },\n  {\n    label: 'Value 2',\n    value: 2\n  },\n  {\n    label: 'Value 3',\n    value: 3\n  }\n]"
            },
            {
                "name": "DefaultMultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultRadioButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/radio-button/radio-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/directives/ng-if-loaded/injection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ComponentType<any>",
                "defaultValue": "SpinnerComponent"
            },
            {
                "name": "DefaultSpinner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultStepper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/navigation/stepper/stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultTableList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultTabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/containers/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "defaultTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/color-theme/color-theme.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  'color-primary': '#455363',\n  'color-default': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
            },
            {
                "name": "DefaultXXXTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scripts/stories/default.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "directives",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/directives/ng-if-loaded/ng-if-loaded.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  NgIfLoadedDirective,\n  SpinnerComponent\n]"
            },
            {
                "name": "DisabledButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisabledCheckbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DisabledDragging",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ExpandedDetailsTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ExpandedDetailsTableTemplate.bind({})"
            },
            {
                "name": "ExpandedDetailsTableTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableListComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-table-list\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [expandedDetailTemplate]=\"dummyExpandedItem\"\n      [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n    ></pm-table-list>\n\n    <ng-template #dummyExpandedItem let-item>\n      <div class=\"d-block\">\n        <p>{{item.name}} - {{item.price}}</p>\n        <p>Here is an example item</p>\n        <p>Here is an example item</p>\n      </div>\n    </ng-template>\n  `\n})"
            },
            {
                "name": "getColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/grid-list/grid-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => MainColors.primary"
            },
            {
                "name": "HorizontalRadioButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/radio-button/radio-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IF_LOADED_SPINNER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/directives/ng-if-loaded/injection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ComponentType<any>>('defaultSpinner')"
            },
            {
                "name": "InfoButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LightButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "lightTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/color-theme/color-theme.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  'color-primary': '#fff',\n  'color-default': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n}"
            },
            {
                "name": "NoHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoIndexStringList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PreSelectedOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "SecondaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SmallButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "scripts/stories/default.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<XXXComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-XXXName\n    >\n    </pm-XXXName>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/cards/basic-card/basic-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<BasicCardComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-basic-card\n      [hoverable]=\"hoverable\"\n      [borderRadius]=\"borderRadius\"\n      [paddingClass]=\"paddingClass\"\n    >\n    </pm-basic-card>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/cards/icon-card/icon-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<IconCardComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-icon-card\n      [textPosition]=\"textPosition\"\n      [paddingClass]=\"paddingClass\"\n      [hoverable]=\"hoverable\"\n      [orientation]=\"orientation\"\n      [iconClass]=\"iconClass\"\n      [title]=\"title\"\n      [subtitle]=\"subtitle\"\n      [iconCardArray]=\"iconCardArray\"\n    >\n    </pm-icon-card>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ExpansionPanelComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-expansion-panel\n    >\n        Conteúdo aqui\n    </pm-expansion-panel>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/containers/tabs/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabsComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-tabs\n    >\n    </pm-tabs>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n        [iconClass]=\"iconClass\"\n        [iconPosition]=\"iconPosition\"\n        [outline]=\"outline\"\n        [disabled]=\"disabled\"\n        [size]=\"size\"\n        [fillWidth]=\"fillWidth\"\n    >\n        Button Content\n    </pm-button>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-checkbox\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    >\n        Checkbox\n    </pm-checkbox>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/combo-box/combo-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ComboBoxComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-combo-box\n      [items]=\"items\"\n      [disabled]=\"disabled\"\n      [selectedItem]=\"selectedItem\"\n    >\n    </pm-combo-box>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CopyContentInputComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-copy-content-input\n      [text]=\"text\"\n      [disabled]=\"disabled\"\n      [copyCallback]=\"copyCallback\"\n      [fillHeight]=\"fillHeight\"\n      [btnColor]=\"btnColor\"\n      [borderRadius]=\"borderRadius\"\n    >\n    </pm-copy-content-input>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DropdownActionsComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-dropdown-actions\n      [actions]=\"actions\"\n    >\n    </pm-dropdown-actions>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MultiSelectComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-multi-select\n        [options]=\"options\"\n        [placeholder]=\"placeholder\"\n        [borderRadius]=\"borderRadius\"\n        [roundedThumbnail]=\"roundedThumbnail\"\n        [limit]=\"limit\"\n        [selectedOptions]=\"selectedOptions\"\n    >\n    </pm-multi-select>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/radio-button/radio-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RadioButtonComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-radio-button\n      [orientation]=\"orientation\"\n      [values]=\"values\"\n      [selectedValue]=\"selectedValue\"\n      [disabled]=\"disabled\"\n    >\n    </pm-radio-button>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DraggableListComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-draggable-list\n      [showIndex]=\"showIndex\"\n      [itemActionLabel]=\"itemActionLabel\"\n      [itemMainLabel]=\"itemMainLabel\"\n      [itemSubLabel]=\"itemSubLabel\"\n      [actions]=\"actions\"\n      [itemList]=\"itemList\"\n      [roundedBorders]=\"roundedBorders\"\n      [enableDragging]=\"enableDragging\"\n      [enableSelection]=\"enableSelection\"\n    >\n    </pm-draggable-list>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/grid-list/grid-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GridListComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-grid-list\n      [items]=\"items\"\n      [displayStyle]=\"displayStyle\"\n      [gridHeaderReverse]=\"gridHeaderReverse\"\n      [bodyBackgroundColor]=\"bodyBackgroundColor\"\n      [actionTemplate]=\"undefined\"\n      [overflowGallery]=\"overflowGallery\"\n    >\n    </pm-grid-list>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableListComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `<pm-table-list\n    [columns]=\"columns\"\n    [columnNames]=\"columnNames\"\n    [imageColumns]=\"imageColumns\"\n    [imageHeight]=\"imageHeight\"\n    [showHeader]=\"showHeader\"\n    [numberFormat]=\"numberFormat\"\n    [numberPrefix]=\"numberPrefix\"\n    [itemList]=\"itemList\"\n    [borderRadius]=\"borderRadius\"\n    [backgroundColor]=\"backgroundColor\"\n    [expandedDetailTemplate]=\"expandedDetailTemplate\"\n    [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n  ></pm-table-list>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/navigation/stepper/stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StepperComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-stepper>\n      <cdk-step> <p>This is any content of \"Step 1\"</p> </cdk-step>\n      <cdk-step> <p>This is any content of \"Step 2\"</p> </cdk-step>\n    </pm-stepper>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SpinnerComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <div *ngIfLoaded=\"flag\">\n        Conteúdo normal\n    </div>\n  `\n})"
            },
            {
                "name": "ThumbnailMultiSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ThumbnailTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/lists/table-list/table-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WarningButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/inputs/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MainColors",
                "childs": [
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "secondary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary"
                    },
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "danger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "danger"
                    },
                    {
                        "name": "light",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light"
                    },
                    {
                        "name": "default",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/colors.ts"
            },
            {
                "name": "OrientationEnum",
                "childs": [
                    {
                        "name": "X",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "horizontal"
                    },
                    {
                        "name": "Y",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "vertical"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/orientation.ts"
            },
            {
                "name": "PaleColors",
                "childs": [
                    {
                        "name": "primaryPale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary-pale"
                    },
                    {
                        "name": "secondaryPale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary-pale"
                    },
                    {
                        "name": "successPale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success-pale"
                    },
                    {
                        "name": "infoPale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info-pale"
                    },
                    {
                        "name": "warningPale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning-pale"
                    },
                    {
                        "name": "dangerPale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "danger-pale"
                    },
                    {
                        "name": "lightPale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light-pale"
                    },
                    {
                        "name": "defaultPale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default-pale"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/colors.ts"
            },
            {
                "name": "SaturatedColors",
                "childs": [
                    {
                        "name": "primarySat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary-sat"
                    },
                    {
                        "name": "secondarySat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary-sat"
                    },
                    {
                        "name": "successSat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success-sat"
                    },
                    {
                        "name": "infoSat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info-sat"
                    },
                    {
                        "name": "warningSat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning-sat"
                    },
                    {
                        "name": "dangerSat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "danger-sat"
                    },
                    {
                        "name": "lightSat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light-sat"
                    },
                    {
                        "name": "defaultSat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default-sat"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/colors.ts"
            },
            {
                "name": "Sizes",
                "childs": [
                    {
                        "name": "xs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "xs"
                    },
                    {
                        "name": "sm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sm"
                    },
                    {
                        "name": "md",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "md"
                    },
                    {
                        "name": "lg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lg"
                    },
                    {
                        "name": "xl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "xl"
                    },
                    {
                        "name": "xxl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "xxl"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/sizes.ts"
            },
            {
                "name": "StateColors",
                "childs": [
                    {
                        "name": "primaryStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary-states"
                    },
                    {
                        "name": "secondaryStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary-states"
                    },
                    {
                        "name": "successStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success-states"
                    },
                    {
                        "name": "infoStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info-states"
                    },
                    {
                        "name": "warningStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning-states"
                    },
                    {
                        "name": "dangerStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "danger-states"
                    },
                    {
                        "name": "lightStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light-states"
                    },
                    {
                        "name": "defaultStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default-states"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/models/colors.ts"
            }
        ],
        "groupedVariables": {
            "src/components/lists/table-list/table-list.stories.ts": [
                {
                    "name": "ActionsTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ActionsTableTemplate.bind({})"
                },
                {
                    "name": "ActionsTableTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableListComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-table-list\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [expandedDetailTemplate]=\"expandedDetailTemplate\"\n      [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n      [actionsTemplate]=\"actionsTemplate\"\n    ></pm-table-list>\n\n    <ng-template #actionsTemplate let-item let-column=\"column\">\n      <div [ngClass]=\"{'disabled': item?.disabled === true}\">\n        <button class=\"btn btn-primary\" [disabled]=\"item?.disabled\">Actions (id: {{item.id}})</button>\n      </div>\n    </ng-template>\n  `\n})"
                },
                {
                    "name": "ColorTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  columns: [],\n  columnNames: [],\n  imageColumns: [],\n  imageHeight: '50px',\n  showHeader: true,\n  numberFormat: '1.2-2',\n  numberPrefix: '',\n  actionsTemplate: undefined,\n  itemList: undefined,\n  borderRadius: undefined,\n  backgroundColor: undefined,\n  expandedDetailTemplate: undefined,\n  disableExpandedOnDisabledRow: true,\n  expandedRow: undefined\n}"
                },
                {
                    "name": "DefaultTableList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ExpandedDetailsTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ExpandedDetailsTableTemplate.bind({})"
                },
                {
                    "name": "ExpandedDetailsTableTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableListComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-table-list\n      [columns]=\"columns\"\n      [columnNames]=\"columnNames\"\n      [imageColumns]=\"imageColumns\"\n      [imageHeight]=\"imageHeight\"\n      [showHeader]=\"showHeader\"\n      [numberFormat]=\"numberFormat\"\n      [numberPrefix]=\"numberPrefix\"\n      [itemList]=\"itemList\"\n      [borderRadius]=\"borderRadius\"\n      [backgroundColor]=\"backgroundColor\"\n      [expandedDetailTemplate]=\"dummyExpandedItem\"\n      [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n    ></pm-table-list>\n\n    <ng-template #dummyExpandedItem let-item>\n      <div class=\"d-block\">\n        <p>{{item.name}} - {{item.price}}</p>\n        <p>Here is an example item</p>\n        <p>Here is an example item</p>\n      </div>\n    </ng-template>\n  `\n})"
                },
                {
                    "name": "NoHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableListComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `<pm-table-list\n    [columns]=\"columns\"\n    [columnNames]=\"columnNames\"\n    [imageColumns]=\"imageColumns\"\n    [imageHeight]=\"imageHeight\"\n    [showHeader]=\"showHeader\"\n    [numberFormat]=\"numberFormat\"\n    [numberPrefix]=\"numberPrefix\"\n    [itemList]=\"itemList\"\n    [borderRadius]=\"borderRadius\"\n    [backgroundColor]=\"backgroundColor\"\n    [expandedDetailTemplate]=\"expandedDetailTemplate\"\n    [disableExpandedOnDisabledRow]=\"disableExpandedOnDisabledRow\"\n  ></pm-table-list>`\n})"
                },
                {
                    "name": "ThumbnailTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/table-list/table-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/components/cards/icon-card/icon-card.stories.ts": [
                {
                    "name": "ArrayIconCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/cards/icon-card/icon-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/cards/icon-card/icon-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  textPosition: 'center',\n  paddingClass: 'p-3',\n  hoverable: true,\n  orientation: OrientationEnum.Y,\n  iconClass: 'uil uil-star',\n  title: '',\n  subtitle: '',\n  iconCardArray: [],\n}"
                },
                {
                    "name": "DefaultIconCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/cards/icon-card/icon-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/cards/icon-card/icon-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<IconCardComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-icon-card\n      [textPosition]=\"textPosition\"\n      [paddingClass]=\"paddingClass\"\n      [hoverable]=\"hoverable\"\n      [orientation]=\"orientation\"\n      [iconClass]=\"iconClass\"\n      [title]=\"title\"\n      [subtitle]=\"subtitle\"\n      [iconCardArray]=\"iconCardArray\"\n    >\n    </pm-icon-card>\n  `\n})"
                }
            ],
            "src/components/inputs/button/button.stories.ts": [
                {
                    "name": "BusyButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DangerButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: '',\n  type: MainColors.default,\n  busy: false,\n  busyText: '',\n  iconClass: '',\n  iconPosition: 'start',\n  outline: false,\n  disabled: false,\n  size: 'md',\n  fillWidth: false\n}"
                },
                {
                    "name": "DefaultButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DisabledButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "InfoButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LightButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SecondaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SmallButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-button\n        [label]=\"label\"\n        [type]=\"type\"\n        [busy]=\"busy\"\n        [busyText]=\"busyText\"\n        [iconClass]=\"iconClass\"\n        [iconPosition]=\"iconPosition\"\n        [outline]=\"outline\"\n        [disabled]=\"disabled\"\n        [size]=\"size\"\n        [fillWidth]=\"fillWidth\"\n    >\n        Button Content\n    </pm-button>\n  `\n})"
                },
                {
                    "name": "WarningButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/services/color-theme/injection.ts": [
                {
                    "name": "colorThemeToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/color-theme/injection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>(defaultColorTheme)"
                },
                {
                    "name": "defaultColorTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/color-theme/injection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'default'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/services/color-theme/color-theme.service.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/color-theme/color-theme.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  'color-primary': '#455363',\n  'color-default': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
                },
                {
                    "name": "defaultTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/color-theme/color-theme.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  'color-primary': '#455363',\n  'color-default': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
                },
                {
                    "name": "lightTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/color-theme/color-theme.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  'color-primary': '#fff',\n  'color-default': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n}"
                }
            ],
            "scripts/stories/default.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scripts/stories/default.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n}"
                },
                {
                    "name": "DefaultXXXTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scripts/stories/default.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "scripts/stories/default.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<XXXComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-XXXName\n    >\n    </pm-XXXName>\n  `\n})"
                }
            ],
            "src/components/cards/basic-card/basic-card.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/cards/basic-card/basic-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  hoverable: false,\n  borderRadius: Sizes.md,\n  paddingClass: 'p-3'\n}"
                },
                {
                    "name": "DefaultBasicCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/cards/basic-card/basic-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/cards/basic-card/basic-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<BasicCardComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-basic-card\n      [hoverable]=\"hoverable\"\n      [borderRadius]=\"borderRadius\"\n      [paddingClass]=\"paddingClass\"\n    >\n    </pm-basic-card>\n  `\n})"
                }
            ],
            "src/components/containers/expansion-panel/expansion-panel.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n}"
                },
                {
                    "name": "DefaultExpansionPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ExpansionPanelComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-expansion-panel\n    >\n        Conteúdo aqui\n    </pm-expansion-panel>\n  `\n})"
                }
            ],
            "src/components/containers/tabs/tabs.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/containers/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n}"
                },
                {
                    "name": "DefaultTabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/containers/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/containers/tabs/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-tabs\n    >\n    </pm-tabs>\n  `\n})"
                }
            ],
            "src/components/inputs/checkbox/checkbox.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  checked: false,\n  disabled: false,\n  selectedItem: undefined,\n}"
                },
                {
                    "name": "DefaultCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DisabledCheckbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-checkbox\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    >\n        Checkbox\n    </pm-checkbox>\n  `\n})"
                }
            ],
            "src/components/inputs/combo-box/combo-box.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/combo-box/combo-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  items: [],\n  disabled: false,\n  selectedItem: undefined\n}"
                },
                {
                    "name": "DefaultComboBox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/combo-box/combo-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "defaultItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/combo-box/combo-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    label: 'Value 1',\n    value: 1\n  },\n  {\n    label: 'Value 2',\n    value: 2\n  },\n  {\n    label: 'Value 3',\n    value: 3\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/combo-box/combo-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ComboBoxComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-combo-box\n      [items]=\"items\"\n      [disabled]=\"disabled\"\n      [selectedItem]=\"selectedItem\"\n    >\n    </pm-combo-box>\n  `\n})"
                }
            ],
            "src/components/inputs/copy-content-input/copy-content-input.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  disabled: false,\n  text: '',\n  copyCallback: undefined,\n  fillHeight: false,\n  btnColor: MainColors.primary,\n  borderRadius: Sizes.md\n}"
                },
                {
                    "name": "DefaultCopyContentInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CopyContentInputComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-copy-content-input\n      [text]=\"text\"\n      [disabled]=\"disabled\"\n      [copyCallback]=\"copyCallback\"\n      [fillHeight]=\"fillHeight\"\n      [btnColor]=\"btnColor\"\n      [borderRadius]=\"borderRadius\"\n    >\n    </pm-copy-content-input>\n  `\n})"
                }
            ],
            "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  actions: []\n}"
                },
                {
                    "name": "DefaultDropdownActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DropdownActionsComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-dropdown-actions\n      [actions]=\"actions\"\n    >\n    </pm-dropdown-actions>\n  `\n})"
                }
            ],
            "src/components/inputs/multi-select/multi-select.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  options: [],\n  placeholder: '',\n  borderRadius: Sizes.md,\n  roundedThumbnail: true,\n  limit: 0,\n  selectedOptions: []\n}"
                },
                {
                    "name": "DefaultMultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PreSelectedOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MultiSelectComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-multi-select\n        [options]=\"options\"\n        [placeholder]=\"placeholder\"\n        [borderRadius]=\"borderRadius\"\n        [roundedThumbnail]=\"roundedThumbnail\"\n        [limit]=\"limit\"\n        [selectedOptions]=\"selectedOptions\"\n    >\n    </pm-multi-select>\n  `\n})"
                },
                {
                    "name": "ThumbnailMultiSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/multi-select/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/components/inputs/radio-button/radio-button.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/radio-button/radio-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  orientation: OrientationEnum.Y,\n  values: [],\n  disabled: false,\n  selectedValue: undefined\n}"
                },
                {
                    "name": "DefaultRadioButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/radio-button/radio-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HorizontalRadioButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/radio-button/radio-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/inputs/radio-button/radio-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RadioButtonComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-radio-button\n      [orientation]=\"orientation\"\n      [values]=\"values\"\n      [selectedValue]=\"selectedValue\"\n      [disabled]=\"disabled\"\n    >\n    </pm-radio-button>\n  `\n})"
                }
            ],
            "src/components/lists/draggable-list/draggable-list.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  showIndex: true,\n  itemActionLabel: undefined,\n  itemMainLabel: undefined,\n  itemSubLabel: undefined,\n  actions: undefined,\n  itemList: undefined,\n  roundedBorders: true,\n  enableDragging: true,\n  enableSelection: true,\n}"
                },
                {
                    "name": "DefaultDraggableList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DisabledDragging",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoIndexStringList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/draggable-list/draggable-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DraggableListComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-draggable-list\n      [showIndex]=\"showIndex\"\n      [itemActionLabel]=\"itemActionLabel\"\n      [itemMainLabel]=\"itemMainLabel\"\n      [itemSubLabel]=\"itemSubLabel\"\n      [actions]=\"actions\"\n      [itemList]=\"itemList\"\n      [roundedBorders]=\"roundedBorders\"\n      [enableDragging]=\"enableDragging\"\n      [enableSelection]=\"enableSelection\"\n    >\n    </pm-draggable-list>\n  `\n})"
                }
            ],
            "src/components/lists/grid-list/grid-list.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/grid-list/grid-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n}"
                },
                {
                    "name": "DefaultGridList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/grid-list/grid-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "getColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/grid-list/grid-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => MainColors.primary"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/lists/grid-list/grid-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GridListComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-grid-list\n      [items]=\"items\"\n      [displayStyle]=\"displayStyle\"\n      [gridHeaderReverse]=\"gridHeaderReverse\"\n      [bodyBackgroundColor]=\"bodyBackgroundColor\"\n      [actionTemplate]=\"undefined\"\n      [overflowGallery]=\"overflowGallery\"\n    >\n    </pm-grid-list>\n  `\n})"
                }
            ],
            "src/components/navigation/stepper/stepper.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/navigation/stepper/stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{}"
                },
                {
                    "name": "DefaultStepper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/navigation/stepper/stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/navigation/stepper/stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StepperComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <pm-stepper>\n      <cdk-step> <p>This is any content of \"Step 1\"</p> </cdk-step>\n      <cdk-step> <p>This is any content of \"Step 2\"</p> </cdk-step>\n    </pm-stepper>\n  `\n})"
                }
            ],
            "src/directives/ng-if-loaded/spinner/spinner.stories.ts": [
                {
                    "name": "defaultArgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  flag: true\n}"
                },
                {
                    "name": "DefaultSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SpinnerComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <div *ngIfLoaded=\"flag\">\n        Conteúdo normal\n    </div>\n  `\n})"
                }
            ],
            "src/directives/ng-if-loaded/injection.ts": [
                {
                    "name": "defaultSpinner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/directives/ng-if-loaded/injection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentType<any>",
                    "defaultValue": "SpinnerComponent"
                },
                {
                    "name": "IF_LOADED_SPINNER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/directives/ng-if-loaded/injection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ComponentType<any>>('defaultSpinner')"
                }
            ],
            "src/directives/ng-if-loaded/ng-if-loaded.module.ts": [
                {
                    "name": "directives",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/directives/ng-if-loaded/ng-if-loaded.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  NgIfLoadedDirective,\n  SpinnerComponent\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/models/colors.ts": [
                {
                    "name": "MainColors",
                    "childs": [
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "secondary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary"
                        },
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "danger",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "danger"
                        },
                        {
                            "name": "light",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light"
                        },
                        {
                            "name": "default",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/colors.ts"
                },
                {
                    "name": "PaleColors",
                    "childs": [
                        {
                            "name": "primaryPale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary-pale"
                        },
                        {
                            "name": "secondaryPale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary-pale"
                        },
                        {
                            "name": "successPale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success-pale"
                        },
                        {
                            "name": "infoPale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info-pale"
                        },
                        {
                            "name": "warningPale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning-pale"
                        },
                        {
                            "name": "dangerPale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "danger-pale"
                        },
                        {
                            "name": "lightPale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light-pale"
                        },
                        {
                            "name": "defaultPale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default-pale"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/colors.ts"
                },
                {
                    "name": "SaturatedColors",
                    "childs": [
                        {
                            "name": "primarySat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary-sat"
                        },
                        {
                            "name": "secondarySat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary-sat"
                        },
                        {
                            "name": "successSat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success-sat"
                        },
                        {
                            "name": "infoSat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info-sat"
                        },
                        {
                            "name": "warningSat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning-sat"
                        },
                        {
                            "name": "dangerSat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "danger-sat"
                        },
                        {
                            "name": "lightSat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light-sat"
                        },
                        {
                            "name": "defaultSat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default-sat"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/colors.ts"
                },
                {
                    "name": "StateColors",
                    "childs": [
                        {
                            "name": "primaryStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary-states"
                        },
                        {
                            "name": "secondaryStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary-states"
                        },
                        {
                            "name": "successStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success-states"
                        },
                        {
                            "name": "infoStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info-states"
                        },
                        {
                            "name": "warningStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning-states"
                        },
                        {
                            "name": "dangerStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "danger-states"
                        },
                        {
                            "name": "lightStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light-states"
                        },
                        {
                            "name": "defaultStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default-states"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/colors.ts"
                }
            ],
            "src/models/orientation.ts": [
                {
                    "name": "OrientationEnum",
                    "childs": [
                        {
                            "name": "X",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "horizontal"
                        },
                        {
                            "name": "Y",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "vertical"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/orientation.ts"
                }
            ],
            "src/models/sizes.ts": [
                {
                    "name": "Sizes",
                    "childs": [
                        {
                            "name": "xs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "xs"
                        },
                        {
                            "name": "sm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sm"
                        },
                        {
                            "name": "md",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "md"
                        },
                        {
                            "name": "lg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lg"
                        },
                        {
                            "name": "xl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "xl"
                        },
                        {
                            "name": "xxl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "xxl"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/models/sizes.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "scripts/stories/default.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "scripts/stories/default.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultXXXTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "scripts/stories/default.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/basic-card/basic-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BasicCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/basic-card/basic-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/basic-card/basic-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultBasicCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/basic-card/basic-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/icon-card/icon-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/icon-card/icon-card.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IconCardArrayItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/icon-card/icon-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ArrayIconCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/icon-card/icon-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/icon-card/icon-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultIconCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/cards/icon-card/icon-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/containers/expansion-panel/expansion-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultExpansionPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/containers/expansion-panel/expansion-panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/containers/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/components/containers/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/containers/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultTabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/containers/tabs/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 69,
                "coverageCount": "9/13",
                "status": "good"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BusyButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DangerButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InfoButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LightButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SmallButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WarningButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/combo-box/combo-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComboBoxComponent",
                "coveragePercent": 44,
                "coverageCount": "4/9",
                "status": "medium"
            },
            {
                "filePath": "src/components/inputs/combo-box/combo-box.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComboItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/combo-box/combo-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/combo-box/combo-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultComboBox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/combo-box/combo-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/combo-box/combo-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/copy-content-input/copy-content-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CopyContentInputComponent",
                "coveragePercent": 60,
                "coverageCount": "6/10",
                "status": "good"
            },
            {
                "filePath": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultCopyContentInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/copy-content-input/copy-content-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/dropdown-actions/dropdown-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownActionsComponent",
                "coveragePercent": 41,
                "coverageCount": "7/17",
                "status": "medium"
            },
            {
                "filePath": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDropdownActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/dropdown-actions/dropdown-actions.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/multi-select/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 26,
                "coverageCount": "6/23",
                "status": "medium"
            },
            {
                "filePath": "src/components/inputs/multi-select/multi-select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MultiSelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/multi-select/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/multi-select/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultMultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/multi-select/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PreSelectedOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/multi-select/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/multi-select/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThumbnailMultiSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/components/inputs/radio-button/radio-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/radio-button/radio-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultRadioButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/radio-button/radio-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HorizontalRadioButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/inputs/radio-button/radio-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/draggable-list/draggable-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DraggableListComponent",
                "coveragePercent": 22,
                "coverageCount": "6/27",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDraggableList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledDragging",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoIndexStringList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/draggable-list/draggable-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/grid-list/grid-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/grid-list/grid-list.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GridListItem",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/grid-list/grid-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/grid-list/grid-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultGridList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/grid-list/grid-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/grid-list/grid-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableListComponent",
                "coveragePercent": 24,
                "coverageCount": "8/33",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActionsTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActionsTableTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultTableList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExpandedDetailsTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExpandedDetailsTableTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/lists/table-list/table-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThumbnailTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/navigation/stepper/stepper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StepperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/components/navigation/stepper/stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/navigation/stepper/stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultStepper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/navigation/stepper/stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/directives/ng-if-loaded/injection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultSpinner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/directives/ng-if-loaded/injection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IF_LOADED_SPINNER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/directives/ng-if-loaded/ng-if-loaded.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgIfLoadedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/directives/ng-if-loaded/ng-if-loaded.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "directives",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/directives/ng-if-loaded/spinner/spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultSpinner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/directives/ng-if-loaded/spinner/spinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/color-theme/color-theme.module.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColorThemeModuleConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/services/color-theme/color-theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/services/color-theme/color-theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/color-theme/color-theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/color-theme/color-theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/color-theme/injection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colorThemeToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/services/color-theme/injection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultColorTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}